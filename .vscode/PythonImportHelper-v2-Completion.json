[
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux                   ",
        "description": "CythonModules.Linux                   ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux                   ",
        "documentation": {}
    },
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux                   ",
        "description": "CythonModules.Linux                   ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux                   ",
        "documentation": {}
    },
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux                   ",
        "description": "CythonModules.Linux                   ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux                   ",
        "documentation": {}
    },
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux                   ",
        "description": "CythonModules.Linux                   ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux                   ",
        "documentation": {}
    },
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux                   ",
        "description": "CythonModules.Linux                   ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux                   ",
        "documentation": {}
    },
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux                   ",
        "description": "CythonModules.Linux                   ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux                   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "ascii",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "ascii",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN               ",
        "description": "script.STDIN.LinuxSTDIN               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN               ",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "right_frame",
        "importPath": "BM_INSTALL",
        "description": "BM_INSTALL",
        "isExtraImport": true,
        "detail": "BM_INSTALL",
        "documentation": {}
    },
    {
        "label": "unzip_and_compress",
        "importPath": "BM_INSTALL",
        "description": "BM_INSTALL",
        "isExtraImport": true,
        "detail": "BM_INSTALL",
        "documentation": {}
    },
    {
        "label": "unstall",
        "importPath": "BM_INSTALL",
        "description": "BM_INSTALL",
        "isExtraImport": true,
        "detail": "BM_INSTALL",
        "documentation": {}
    },
    {
        "label": "check_if_bm_is_installed",
        "importPath": "BM_INSTALL",
        "description": "BM_INSTALL",
        "isExtraImport": true,
        "detail": "BM_INSTALL",
        "documentation": {}
    },
    {
        "label": "scroll_bar",
        "importPath": "BM_INSTALL",
        "description": "BM_INSTALL",
        "isExtraImport": true,
        "detail": "BM_INSTALL",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "BM_INSTALL",
        "description": "BM_INSTALL",
        "isExtraImport": true,
        "detail": "BM_INSTALL",
        "documentation": {}
    },
    {
        "label": "right_frame",
        "importPath": "BM_INSTALL",
        "description": "BM_INSTALL",
        "isExtraImport": true,
        "detail": "BM_INSTALL",
        "documentation": {}
    },
    {
        "label": "scroll_bar",
        "importPath": "BM_INSTALL",
        "description": "BM_INSTALL",
        "isExtraImport": true,
        "detail": "BM_INSTALL",
        "documentation": {}
    },
    {
        "label": "right_frame",
        "importPath": "BM_INSTALL",
        "description": "BM_INSTALL",
        "isExtraImport": true,
        "detail": "BM_INSTALL",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "strerror",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_inheritable",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "tarfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tarfile",
        "description": "tarfile",
        "detail": "tarfile",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter.ttk   ",
        "description": "tkinter.ttk   ",
        "isExtraImport": true,
        "detail": "tkinter.ttk   ",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter       ",
        "description": "tkinter       ",
        "isExtraImport": true,
        "detail": "tkinter       ",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "cythonize",
        "importPath": "Cython.Build",
        "description": "Cython.Build",
        "isExtraImport": true,
        "detail": "Cython.Build",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN ",
        "description": "script.STDIN.LinuxSTDIN ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN ",
        "documentation": {}
    },
    {
        "label": "termios,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "termios.",
        "description": "termios.",
        "detail": "termios.",
        "documentation": {}
    },
    {
        "label": "details",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "true_cursor_pos",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "test",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "examples",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "test",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "examples",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "cursor_pos",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "func_class",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "true_cursor_pos",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "string_buid",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "pull_editor",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "left_right",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "cursor",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "test",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "drop_box",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "true_cursor_pos",
        "importPath": "IDE.EDITOR                            ",
        "description": "IDE.EDITOR                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                            ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                           ",
        "description": "src.classes                           ",
        "isExtraImport": true,
        "detail": "src.classes                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN       ",
        "description": "script.STDIN.LinuxSTDIN       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN       ",
        "description": "script.STDIN.LinuxSTDIN       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN       ",
        "documentation": {}
    },
    {
        "label": "ascii",
        "importPath": "script.STDIN.LinuxSTDIN       ",
        "description": "script.STDIN.LinuxSTDIN       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN       ",
        "description": "script.STDIN.LinuxSTDIN       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN       ",
        "description": "script.STDIN.LinuxSTDIN       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN       ",
        "description": "script.STDIN.LinuxSTDIN       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN       ",
        "description": "script.STDIN.LinuxSTDIN       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN       ",
        "description": "script.STDIN.LinuxSTDIN       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN       ",
        "description": "script.STDIN.LinuxSTDIN       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN       ",
        "description": "script.STDIN.LinuxSTDIN       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN       ",
        "description": "script.STDIN.LinuxSTDIN       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN       ",
        "documentation": {}
    },
    {
        "label": "pull_editor",
        "importPath": "IDE.EDITOR                    ",
        "description": "IDE.EDITOR                    ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                    ",
        "documentation": {}
    },
    {
        "label": "test",
        "importPath": "IDE.EDITOR                    ",
        "description": "IDE.EDITOR                    ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                    ",
        "documentation": {}
    },
    {
        "label": "scan",
        "importPath": "IDE.EDITOR                    ",
        "description": "IDE.EDITOR                    ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                    ",
        "documentation": {}
    },
    {
        "label": "test",
        "importPath": "IDE.EDITOR                    ",
        "description": "IDE.EDITOR                    ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                    ",
        "documentation": {}
    },
    {
        "label": "true_cursor_pos",
        "importPath": "IDE.EDITOR                    ",
        "description": "IDE.EDITOR                    ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                    ",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time                                 ",
        "description": "time                                 ",
        "isExtraImport": true,
        "detail": "time                                 ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN                               ",
        "description": "script.STDIN.LinuxSTDIN                               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                               ",
        "description": "script.STDIN.LinuxSTDIN                               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                               ",
        "description": "script.STDIN.LinuxSTDIN                               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                               ",
        "description": "script.STDIN.LinuxSTDIN                               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                               ",
        "description": "script.STDIN.LinuxSTDIN                               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                               ",
        "description": "script.STDIN.LinuxSTDIN                               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                               ",
        "description": "script.STDIN.LinuxSTDIN                               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                               ",
        "description": "script.STDIN.LinuxSTDIN                               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                               ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN                               ",
        "description": "script.STDIN.LinuxSTDIN                               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                               ",
        "description": "script.STDIN.LinuxSTDIN                               ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                               ",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE                                      ",
        "description": "script.DATA_BASE                                      ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE                                      ",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE                                      ",
        "description": "script.DATA_BASE                                      ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE                                      ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                                ",
        "description": "script                                                ",
        "isExtraImport": true,
        "detail": "script                                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                                ",
        "description": "script                                                ",
        "isExtraImport": true,
        "detail": "script                                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                                ",
        "description": "script                                                ",
        "isExtraImport": true,
        "detail": "script                                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                                ",
        "description": "script                                                ",
        "isExtraImport": true,
        "detail": "script                                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                                ",
        "description": "script                                                ",
        "isExtraImport": true,
        "detail": "script                                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                                ",
        "description": "script                                                ",
        "isExtraImport": true,
        "detail": "script                                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                                ",
        "description": "script                                                ",
        "isExtraImport": true,
        "detail": "script                                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                                ",
        "description": "script                                                ",
        "isExtraImport": true,
        "detail": "script                                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                                ",
        "description": "script                                                ",
        "isExtraImport": true,
        "detail": "script                                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                                ",
        "description": "script                                                ",
        "isExtraImport": true,
        "detail": "script                                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                                ",
        "description": "script                                                ",
        "isExtraImport": true,
        "detail": "script                                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                                ",
        "description": "script                                                ",
        "isExtraImport": true,
        "detail": "script                                                ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "documentation": {}
    },
    {
        "label": "if_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "documentation": {}
    },
    {
        "label": "if_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "documentation": {}
    },
    {
        "label": "if_inter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "documentation": {}
    },
    {
        "label": "if_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "documentation": {}
    },
    {
        "label": "if_inter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_                   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN  ",
        "description": "script.STDIN.LinuxSTDIN  ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN  ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                 ",
        "description": "script.LEXER.FUNCTION                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                 ",
        "description": "script.LEXER.FUNCTION                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                 ",
        "description": "script.LEXER.FUNCTION                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                 ",
        "description": "script.LEXER.FUNCTION                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                 ",
        "description": "script.LEXER.FUNCTION                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                 ",
        "description": "script.LEXER.FUNCTION                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                 ",
        "description": "script.LEXER.FUNCTION                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                 ",
        "description": "script.LEXER.FUNCTION                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                 ",
        "description": "script.LEXER.FUNCTION                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                 ",
        "documentation": {}
    },
    {
        "label": "parxer",
        "importPath": "script.PARXER.WINParxer               ",
        "description": "script.PARXER.WINParxer               ",
        "isExtraImport": true,
        "detail": "script.PARXER.WINParxer               ",
        "documentation": {}
    },
    {
        "label": "parxer",
        "importPath": "script.PARXER.WINParxer               ",
        "description": "script.PARXER.WINParxer               ",
        "isExtraImport": true,
        "detail": "script.PARXER.WINParxer               ",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE                      ",
        "description": "script.DATA_BASE                      ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE                      ",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE                      ",
        "description": "script.DATA_BASE                      ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE                      ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "drop_down_menus",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                ",
        "description": "script                                ",
        "isExtraImport": true,
        "detail": "script                                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                    ",
        "description": "script                                    ",
        "isExtraImport": true,
        "detail": "script                                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                    ",
        "description": "script                                    ",
        "isExtraImport": true,
        "detail": "script                                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                    ",
        "description": "script                                    ",
        "isExtraImport": true,
        "detail": "script                                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                    ",
        "description": "script                                    ",
        "isExtraImport": true,
        "detail": "script                                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                    ",
        "description": "script                                    ",
        "isExtraImport": true,
        "detail": "script                                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                    ",
        "description": "script                                    ",
        "isExtraImport": true,
        "detail": "script                                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                    ",
        "description": "script                                    ",
        "isExtraImport": true,
        "detail": "script                                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                    ",
        "description": "script                                    ",
        "isExtraImport": true,
        "detail": "script                                    ",
        "documentation": {}
    },
    {
        "label": "ClassError",
        "importPath": "classes                                   ",
        "description": "classes                                   ",
        "isExtraImport": true,
        "detail": "classes                                   ",
        "documentation": {}
    },
    {
        "label": "internalClass",
        "importPath": "classes                                   ",
        "description": "classes                                   ",
        "isExtraImport": true,
        "detail": "classes                                   ",
        "documentation": {}
    },
    {
        "label": "internalClass",
        "importPath": "classes                                   ",
        "description": "classes                                   ",
        "isExtraImport": true,
        "detail": "classes                                   ",
        "documentation": {}
    },
    {
        "label": "internalClass",
        "importPath": "classes                                   ",
        "description": "classes                                   ",
        "isExtraImport": true,
        "detail": "classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement.error                           ",
        "description": "statement.error                           ",
        "isExtraImport": true,
        "detail": "statement.error                           ",
        "documentation": {}
    },
    {
        "label": "switchError",
        "importPath": "statement.error                           ",
        "description": "statement.error                           ",
        "isExtraImport": true,
        "detail": "statement.error                           ",
        "documentation": {}
    },
    {
        "label": "externalBlocks",
        "importPath": "statement.comment                         ",
        "description": "statement.comment                         ",
        "isExtraImport": true,
        "detail": "statement.comment                         ",
        "documentation": {}
    },
    {
        "label": "externalCmt",
        "importPath": "statement.comment                         ",
        "description": "statement.comment                         ",
        "isExtraImport": true,
        "detail": "statement.comment                         ",
        "documentation": {}
    },
    {
        "label": "externalCmt",
        "importPath": "statement.comment                         ",
        "description": "statement.comment                         ",
        "isExtraImport": true,
        "detail": "statement.comment                         ",
        "documentation": {}
    },
    {
        "label": "externalBlocks",
        "importPath": "statement.comment                         ",
        "description": "statement.comment                         ",
        "isExtraImport": true,
        "detail": "statement.comment                         ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                        ",
        "description": "script                                        ",
        "isExtraImport": true,
        "detail": "script                                        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                        ",
        "description": "script                                        ",
        "isExtraImport": true,
        "detail": "script                                        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                        ",
        "description": "script                                        ",
        "isExtraImport": true,
        "detail": "script                                        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                        ",
        "description": "script                                        ",
        "isExtraImport": true,
        "detail": "script                                        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                        ",
        "description": "script                                        ",
        "isExtraImport": true,
        "detail": "script                                        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                        ",
        "description": "script                                        ",
        "isExtraImport": true,
        "detail": "script                                        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                        ",
        "description": "script                                        ",
        "isExtraImport": true,
        "detail": "script                                        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                        ",
        "description": "script                                        ",
        "isExtraImport": true,
        "detail": "script                                        ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                 ",
        "description": "script.PARXER.LEXER_CONFIGURE                 ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                 ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                 ",
        "description": "script.PARXER.LEXER_CONFIGURE                 ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                 ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                 ",
        "description": "script.PARXER.LEXER_CONFIGURE                 ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                 ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement.error                               ",
        "description": "statement.error                               ",
        "isExtraImport": true,
        "detail": "statement.error                               ",
        "documentation": {}
    },
    {
        "label": "structure",
        "importPath": "statement.comment                             ",
        "description": "statement.comment                             ",
        "isExtraImport": true,
        "detail": "statement.comment                             ",
        "documentation": {}
    },
    {
        "label": "externalBlocks",
        "importPath": "statement.comment                             ",
        "description": "statement.comment                             ",
        "isExtraImport": true,
        "detail": "statement.comment                             ",
        "documentation": {}
    },
    {
        "label": "mainStatement",
        "importPath": "statement                                     ",
        "description": "statement                                     ",
        "isExtraImport": true,
        "detail": "statement                                     ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                     ",
        "description": "statement                                     ",
        "isExtraImport": true,
        "detail": "statement                                     ",
        "documentation": {}
    },
    {
        "label": "externalTry",
        "importPath": "statement                                     ",
        "description": "statement                                     ",
        "isExtraImport": true,
        "detail": "statement                                     ",
        "documentation": {}
    },
    {
        "label": "mainFor",
        "importPath": "loop                                          ",
        "description": "loop                                          ",
        "isExtraImport": true,
        "detail": "loop                                          ",
        "documentation": {}
    },
    {
        "label": "errorDef",
        "importPath": "functions                                     ",
        "description": "functions                                     ",
        "isExtraImport": true,
        "detail": "functions                                     ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                       ",
        "description": "script.STDIN.LinuxSTDIN                       ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                       ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                         ",
        "description": "script.PARXER                         ",
        "isExtraImport": true,
        "detail": "script.PARXER                         ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                         ",
        "description": "script.PARXER                         ",
        "isExtraImport": true,
        "detail": "script.PARXER                         ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE         ",
        "description": "script.PARXER.LEXER_CONFIGURE         ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE         ",
        "documentation": {}
    },
    {
        "label": "partial_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE         ",
        "description": "script.PARXER.LEXER_CONFIGURE         ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE         ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE         ",
        "description": "script.PARXER.LEXER_CONFIGURE         ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE         ",
        "documentation": {}
    },
    {
        "label": "partial_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE         ",
        "description": "script.PARXER.LEXER_CONFIGURE         ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE         ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "loop",
        "description": "loop",
        "isExtraImport": true,
        "detail": "loop",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN   ",
        "description": "script.STDIN.LinuxSTDIN   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN   ",
        "description": "script.STDIN.LinuxSTDIN   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN   ",
        "description": "script.STDIN.LinuxSTDIN   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN   ",
        "description": "script.STDIN.LinuxSTDIN   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN   ",
        "description": "script.STDIN.LinuxSTDIN   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN   ",
        "description": "script.STDIN.LinuxSTDIN   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN   ",
        "description": "script.STDIN.LinuxSTDIN   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN   ",
        "description": "script.STDIN.LinuxSTDIN   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN   ",
        "description": "script.STDIN.LinuxSTDIN   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN   ",
        "description": "script.STDIN.LinuxSTDIN   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN   ",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script",
        "description": "script",
        "isExtraImport": true,
        "detail": "script",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script",
        "description": "script",
        "isExtraImport": true,
        "detail": "script",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script",
        "description": "script",
        "isExtraImport": true,
        "detail": "script",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script",
        "description": "script",
        "isExtraImport": true,
        "detail": "script",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script",
        "description": "script",
        "isExtraImport": true,
        "detail": "script",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script",
        "description": "script",
        "isExtraImport": true,
        "detail": "script",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script",
        "description": "script",
        "isExtraImport": true,
        "detail": "script",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script",
        "description": "script",
        "isExtraImport": true,
        "detail": "script",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script",
        "description": "script",
        "isExtraImport": true,
        "detail": "script",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script",
        "description": "script",
        "isExtraImport": true,
        "detail": "script",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script",
        "description": "script",
        "isExtraImport": true,
        "detail": "script",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script",
        "description": "script",
        "isExtraImport": true,
        "detail": "script",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "looking_for_init_function",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "looking_for_init_function",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "float_or_function",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "segmentation",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "segmentation",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "looking_for_bool_operators",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "looking_for_logical_operators",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "looking_for_arithmetic_operators",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "looking_for_init_function",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "looking_for_module_load",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "var_name_checking",
        "importPath": "script.LEXER",
        "description": "script.LEXER",
        "isExtraImport": true,
        "detail": "script.LEXER",
        "documentation": {}
    },
    {
        "label": "get_var_name",
        "importPath": "script.PARXER.VAR_NAME",
        "description": "script.PARXER.VAR_NAME",
        "isExtraImport": true,
        "detail": "script.PARXER.VAR_NAME",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                    ",
        "description": "script                    ",
        "isExtraImport": true,
        "detail": "script                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                    ",
        "description": "script                    ",
        "isExtraImport": true,
        "detail": "script                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                    ",
        "description": "script                    ",
        "isExtraImport": true,
        "detail": "script                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                    ",
        "description": "script                    ",
        "isExtraImport": true,
        "detail": "script                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                    ",
        "description": "script                    ",
        "isExtraImport": true,
        "detail": "script                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                    ",
        "description": "script                    ",
        "isExtraImport": true,
        "detail": "script                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                    ",
        "description": "script                    ",
        "isExtraImport": true,
        "detail": "script                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                    ",
        "description": "script                    ",
        "isExtraImport": true,
        "detail": "script                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                    ",
        "description": "script                    ",
        "isExtraImport": true,
        "detail": "script                    ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "checking_tabulation",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "dictionnary_analysis",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "segmentation",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "looking_for_bool_operators",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "looking_for_logical_operators",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "float_or_function",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "checking_if_backslash",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER              ",
        "description": "script.LEXER              ",
        "isExtraImport": true,
        "detail": "script.LEXER              ",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "importPath": "script.LEXER.segmentation ",
        "description": "script.LEXER.segmentation ",
        "isExtraImport": true,
        "detail": "script.LEXER.segmentation ",
        "documentation": {}
    },
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux       ",
        "description": "CythonModules.Linux       ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux       ",
        "documentation": {}
    },
    {
        "label": "attributes",
        "importPath": "attr",
        "description": "attr",
        "isExtraImport": true,
        "detail": "attr",
        "documentation": {}
    },
    {
        "label": "Attribute",
        "importPath": "attr",
        "description": "attr",
        "isExtraImport": true,
        "detail": "attr",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                                            ",
        "description": "script                                            ",
        "isExtraImport": true,
        "detail": "script                                            ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                      ",
        "description": "script.LEXER                                      ",
        "isExtraImport": true,
        "detail": "script.LEXER                                      ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                      ",
        "description": "script.LEXER                                      ",
        "isExtraImport": true,
        "detail": "script.LEXER                                      ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                     ",
        "description": "script.PARXER.LEXER_CONFIGURE                     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                     ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                           ",
        "description": "script.STDIN.LinuxSTDIN                           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                           ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                            ",
        "description": "script                            ",
        "isExtraImport": true,
        "detail": "script                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                            ",
        "description": "script                            ",
        "isExtraImport": true,
        "detail": "script                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                            ",
        "description": "script                            ",
        "isExtraImport": true,
        "detail": "script                            ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                            ",
        "description": "script                            ",
        "isExtraImport": true,
        "detail": "script                            ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                      ",
        "description": "script.LEXER                      ",
        "isExtraImport": true,
        "detail": "script.LEXER                      ",
        "documentation": {}
    },
    {
        "label": "segmentation",
        "importPath": "script.LEXER                      ",
        "description": "script.LEXER                      ",
        "isExtraImport": true,
        "detail": "script.LEXER                      ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                      ",
        "description": "script.LEXER                      ",
        "isExtraImport": true,
        "detail": "script.LEXER                      ",
        "documentation": {}
    },
    {
        "label": "segmentation",
        "importPath": "script.LEXER                      ",
        "description": "script.LEXER                      ",
        "isExtraImport": true,
        "detail": "script.LEXER                      ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                      ",
        "description": "script.LEXER                      ",
        "isExtraImport": true,
        "detail": "script.LEXER                      ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE     ",
        "description": "script.PARXER.LEXER_CONFIGURE     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE     ",
        "documentation": {}
    },
    {
        "label": "partial_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE     ",
        "description": "script.PARXER.LEXER_CONFIGURE     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE     ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE     ",
        "description": "script.PARXER.LEXER_CONFIGURE     ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE     ",
        "documentation": {}
    },
    {
        "label": "show_data",
        "importPath": "script.PARXER.PRINT               ",
        "description": "script.PARXER.PRINT               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PRINT               ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN           ",
        "description": "script.STDIN.LinuxSTDIN           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN           ",
        "description": "script.STDIN.LinuxSTDIN           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN           ",
        "description": "script.STDIN.LinuxSTDIN           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN           ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN           ",
        "description": "script.STDIN.LinuxSTDIN           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN           ",
        "documentation": {}
    },
    {
        "label": "show",
        "importPath": "CythonModules.Linux               ",
        "description": "CythonModules.Linux               ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux               ",
        "documentation": {}
    },
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux               ",
        "description": "CythonModules.Linux               ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux               ",
        "documentation": {}
    },
    {
        "label": "making_arr",
        "importPath": "CythonModules.Linux               ",
        "description": "CythonModules.Linux               ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux               ",
        "documentation": {}
    },
    {
        "label": "variance",
        "importPath": "statistics                    ",
        "description": "statistics                    ",
        "isExtraImport": true,
        "detail": "statistics                    ",
        "documentation": {}
    },
    {
        "label": "pvariance",
        "importPath": "statistics                    ",
        "description": "statistics                    ",
        "isExtraImport": true,
        "detail": "statistics                    ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                        ",
        "description": "script                        ",
        "isExtraImport": true,
        "detail": "script                        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                        ",
        "description": "script                        ",
        "isExtraImport": true,
        "detail": "script                        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                        ",
        "description": "script                        ",
        "isExtraImport": true,
        "detail": "script                        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                        ",
        "description": "script                        ",
        "isExtraImport": true,
        "detail": "script                        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                        ",
        "description": "script                        ",
        "isExtraImport": true,
        "detail": "script                        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                        ",
        "description": "script                        ",
        "isExtraImport": true,
        "detail": "script                        ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                  ",
        "description": "script.LEXER                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                  ",
        "documentation": {}
    },
    {
        "label": "segmentation",
        "importPath": "script.LEXER                  ",
        "description": "script.LEXER                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                  ",
        "documentation": {}
    },
    {
        "label": "checking_if_backslash",
        "importPath": "script.LEXER                  ",
        "description": "script.LEXER                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                  ",
        "documentation": {}
    },
    {
        "label": "comment_line",
        "importPath": "script.LEXER                  ",
        "description": "script.LEXER                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                  ",
        "documentation": {}
    },
    {
        "label": "segmentation",
        "importPath": "script.LEXER                  ",
        "description": "script.LEXER                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                  ",
        "documentation": {}
    },
    {
        "label": "segmentation",
        "importPath": "script.LEXER                  ",
        "description": "script.LEXER                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                  ",
        "description": "script.LEXER                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                  ",
        "description": "script.LEXER                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                  ",
        "description": "script.LEXER                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                  ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE ",
        "description": "script.PARXER.LEXER_CONFIGURE ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE ",
        "description": "script.PARXER.LEXER_CONFIGURE ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE ",
        "description": "script.PARXER.LEXER_CONFIGURE ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE ",
        "documentation": {}
    },
    {
        "label": "arithmetic_object",
        "importPath": "script.MATHS                  ",
        "description": "script.MATHS                  ",
        "isExtraImport": true,
        "detail": "script.MATHS                  ",
        "documentation": {}
    },
    {
        "label": "ansi",
        "importPath": "script.DATA_BASE              ",
        "description": "script.DATA_BASE              ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE              ",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE              ",
        "description": "script.DATA_BASE              ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE              ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.transform                 ",
        "description": "src.transform                 ",
        "isExtraImport": true,
        "detail": "src.transform                 ",
        "documentation": {}
    },
    {
        "label": "statistics",
        "importPath": "src.transform                 ",
        "description": "src.transform                 ",
        "isExtraImport": true,
        "detail": "src.transform                 ",
        "documentation": {}
    },
    {
        "label": "matrix_modules",
        "importPath": "src.transform                 ",
        "description": "src.transform                 ",
        "isExtraImport": true,
        "detail": "src.transform                 ",
        "documentation": {}
    },
    {
        "label": "matrix_statistics",
        "importPath": "src.transform                 ",
        "description": "src.transform                 ",
        "isExtraImport": true,
        "detail": "src.transform                 ",
        "documentation": {}
    },
    {
        "label": "open_check",
        "importPath": "src.transform                 ",
        "description": "src.transform                 ",
        "isExtraImport": true,
        "detail": "src.transform                 ",
        "documentation": {}
    },
    {
        "label": "datatype",
        "importPath": "src.transform                 ",
        "description": "src.transform                 ",
        "isExtraImport": true,
        "detail": "src.transform                 ",
        "documentation": {}
    },
    {
        "label": "matrix_modules",
        "importPath": "src.transform                 ",
        "description": "src.transform                 ",
        "isExtraImport": true,
        "detail": "src.transform                 ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.transform                 ",
        "description": "src.transform                 ",
        "isExtraImport": true,
        "detail": "src.transform                 ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.transform                 ",
        "description": "src.transform                 ",
        "isExtraImport": true,
        "detail": "src.transform                 ",
        "documentation": {}
    },
    {
        "label": "dictionary",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "Trigo",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "Open",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "making_stat",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "bm_statistics",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "help",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "arithmetic_analyze",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "array_to_list",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "progress_bar",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "Trees",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "merge_list",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "array_to_list",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "making_stat",
        "importPath": "CythonModules.Linux           ",
        "description": "CythonModules.Linux           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux           ",
        "documentation": {}
    },
    {
        "label": "affectationError",
        "importPath": "script.LEXER.error.Cython         ",
        "description": "script.LEXER.error.Cython         ",
        "isExtraImport": true,
        "detail": "script.LEXER.error.Cython         ",
        "documentation": {}
    },
    {
        "label": "affectationError",
        "importPath": "script.LEXER.error.Cython         ",
        "description": "script.LEXER.error.Cython         ",
        "isExtraImport": true,
        "detail": "script.LEXER.error.Cython         ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                 ",
        "description": "script.STDIN.WinSTDIN                 ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                 ",
        "documentation": {}
    },
    {
        "label": "segmentation",
        "importPath": "script.LEXER                          ",
        "description": "script.LEXER                          ",
        "isExtraImport": true,
        "detail": "script.LEXER                          ",
        "documentation": {}
    },
    {
        "label": "backslashError",
        "importPath": "script.LEXER.error.Cython             ",
        "description": "script.LEXER.error.Cython             ",
        "isExtraImport": true,
        "detail": "script.LEXER.error.Cython             ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement.error",
        "description": "statement.error",
        "isExtraImport": true,
        "detail": "statement.error",
        "documentation": {}
    },
    {
        "label": "function",
        "importPath": "script.LEXER.FUNCTION         ",
        "description": "script.LEXER.FUNCTION         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION         ",
        "documentation": {}
    },
    {
        "label": "class_",
        "importPath": "script.LEXER.FUNCTION         ",
        "description": "script.LEXER.FUNCTION         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION         ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION         ",
        "description": "script.LEXER.FUNCTION         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION         ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN         ",
        "description": "script.STDIN.WinSTDIN         ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN         ",
        "documentation": {}
    },
    {
        "label": "global_",
        "importPath": "script.LEXER.FUNCTION",
        "description": "script.LEXER.FUNCTION",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION",
        "documentation": {}
    },
    {
        "label": "return_",
        "importPath": "script.LEXER.FUNCTION",
        "description": "script.LEXER.FUNCTION",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION",
        "description": "script.LEXER.FUNCTION",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION",
        "description": "script.LEXER.FUNCTION",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION",
        "documentation": {}
    },
    {
        "label": "return_",
        "importPath": "script.LEXER.FUNCTION",
        "description": "script.LEXER.FUNCTION",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script      ",
        "description": "script      ",
        "isExtraImport": true,
        "detail": "script      ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE",
        "description": "script.PARXER.LEXER_CONFIGURE",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE",
        "documentation": {}
    },
    {
        "label": "global_",
        "importPath": "script.LEXER.FUNCTION     ",
        "description": "script.LEXER.FUNCTION     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION     ",
        "documentation": {}
    },
    {
        "label": "return_",
        "importPath": "script.LEXER.FUNCTION     ",
        "description": "script.LEXER.FUNCTION     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION     ",
        "documentation": {}
    },
    {
        "label": "class_",
        "importPath": "script.LEXER.FUNCTION     ",
        "description": "script.LEXER.FUNCTION     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION     ",
        "documentation": {}
    },
    {
        "label": "function",
        "importPath": "script.LEXER.FUNCTION     ",
        "description": "script.LEXER.FUNCTION     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION     ",
        "documentation": {}
    },
    {
        "label": "function_rebuild",
        "importPath": "script.LEXER.FUNCTION     ",
        "description": "script.LEXER.FUNCTION     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION     ",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "script.LEXER.FUNCTION     ",
        "description": "script.LEXER.FUNCTION     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION     ",
        "documentation": {}
    },
    {
        "label": "lambda_",
        "importPath": "script.LEXER.FUNCTION     ",
        "description": "script.LEXER.FUNCTION     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION     ",
        "documentation": {}
    },
    {
        "label": "print_value",
        "importPath": "script.LEXER.FUNCTION     ",
        "description": "script.LEXER.FUNCTION     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION     ",
        "documentation": {}
    },
    {
        "label": "transformation",
        "importPath": "script.LEXER.FUNCTION     ",
        "description": "script.LEXER.FUNCTION     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION     ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION     ",
        "description": "script.LEXER.FUNCTION     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION     ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION     ",
        "description": "script.LEXER.FUNCTION     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION     ",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama                          ",
        "description": "colorama                          ",
        "isExtraImport": true,
        "detail": "colorama                          ",
        "documentation": {}
    },
    {
        "label": "segError",
        "importPath": "CythonModules.Linux.LEXER.seg     ",
        "description": "CythonModules.Linux.LEXER.seg     ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux.LEXER.seg     ",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama                  ",
        "description": "colorama                  ",
        "isExtraImport": true,
        "detail": "colorama                  ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN     ",
        "description": "script.STDIN.WinSTDIN     ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN     ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_   ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN             ",
        "description": "script.STDIN.WinSTDIN             ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN             ",
        "documentation": {}
    },
    {
        "label": "segError",
        "importPath": "CythonModules.Windows.LEXER.seg   ",
        "description": "CythonModules.Windows.LEXER.seg   ",
        "isExtraImport": true,
        "detail": "CythonModules.Windows.LEXER.seg   ",
        "documentation": {}
    },
    {
        "label": "num",
        "importPath": "CythonModules.Windows.LEXER.seg   ",
        "description": "CythonModules.Windows.LEXER.seg   ",
        "isExtraImport": true,
        "detail": "CythonModules.Windows.LEXER.seg   ",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama      ",
        "description": "colorama      ",
        "isExtraImport": true,
        "detail": "colorama      ",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama      ",
        "description": "colorama      ",
        "isExtraImport": true,
        "detail": "colorama      ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama      ",
        "description": "colorama      ",
        "isExtraImport": true,
        "detail": "colorama      ",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama      ",
        "description": "colorama      ",
        "isExtraImport": true,
        "detail": "colorama      ",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama      ",
        "description": "colorama      ",
        "isExtraImport": true,
        "detail": "colorama      ",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama      ",
        "description": "colorama      ",
        "isExtraImport": true,
        "detail": "colorama      ",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama      ",
        "description": "colorama      ",
        "isExtraImport": true,
        "detail": "colorama      ",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama      ",
        "description": "colorama      ",
        "isExtraImport": true,
        "detail": "colorama      ",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama      ",
        "description": "colorama      ",
        "isExtraImport": true,
        "detail": "colorama      ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script        ",
        "description": "script        ",
        "isExtraImport": true,
        "detail": "script        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script        ",
        "description": "script        ",
        "isExtraImport": true,
        "detail": "script        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script        ",
        "description": "script        ",
        "isExtraImport": true,
        "detail": "script        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script        ",
        "description": "script        ",
        "isExtraImport": true,
        "detail": "script        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script        ",
        "description": "script        ",
        "isExtraImport": true,
        "detail": "script        ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script        ",
        "description": "script        ",
        "isExtraImport": true,
        "detail": "script        ",
        "documentation": {}
    },
    {
        "label": "get_list",
        "importPath": "script.PARXER.INTERNAL_FUNCTION   ",
        "description": "script.PARXER.INTERNAL_FUNCTION   ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION   ",
        "documentation": {}
    },
    {
        "label": "get_dictionary",
        "importPath": "script.PARXER.INTERNAL_FUNCTION   ",
        "description": "script.PARXER.INTERNAL_FUNCTION   ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION   ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                     ",
        "description": "script.PARXER                     ",
        "isExtraImport": true,
        "detail": "script.PARXER                     ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                     ",
        "description": "script.PARXER                     ",
        "isExtraImport": true,
        "detail": "script.PARXER                     ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                      ",
        "description": "script.STDIN.WinSTDIN                      ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                      ",
        "documentation": {}
    },
    {
        "label": "arithmetic_modules",
        "importPath": "script.MATHS",
        "description": "script.MATHS",
        "isExtraImport": true,
        "detail": "script.MATHS",
        "documentation": {}
    },
    {
        "label": "arithmetic_object",
        "importPath": "script.MATHS",
        "description": "script.MATHS",
        "isExtraImport": true,
        "detail": "script.MATHS",
        "documentation": {}
    },
    {
        "label": "arithmetic_calculations",
        "importPath": "script.MATHS",
        "description": "script.MATHS",
        "isExtraImport": true,
        "detail": "script.MATHS",
        "documentation": {}
    },
    {
        "label": "deep_checking",
        "importPath": "script.MATHS",
        "description": "script.MATHS",
        "isExtraImport": true,
        "detail": "script.MATHS",
        "documentation": {}
    },
    {
        "label": "arithmetic_modules",
        "importPath": "script.MATHS",
        "description": "script.MATHS",
        "isExtraImport": true,
        "detail": "script.MATHS",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER          ",
        "description": "script.LEXER          ",
        "isExtraImport": true,
        "detail": "script.LEXER          ",
        "documentation": {}
    },
    {
        "label": "integer",
        "importPath": "script.MATHS          ",
        "description": "script.MATHS          ",
        "isExtraImport": true,
        "detail": "script.MATHS          ",
        "documentation": {}
    },
    {
        "label": "real",
        "importPath": "script.MATHS          ",
        "description": "script.MATHS          ",
        "isExtraImport": true,
        "detail": "script.MATHS          ",
        "documentation": {}
    },
    {
        "label": "complex",
        "importPath": "script.MATHS          ",
        "description": "script.MATHS          ",
        "isExtraImport": true,
        "detail": "script.MATHS          ",
        "documentation": {}
    },
    {
        "label": "dictionary",
        "importPath": "script.MATHS          ",
        "description": "script.MATHS          ",
        "isExtraImport": true,
        "detail": "script.MATHS          ",
        "documentation": {}
    },
    {
        "label": "my_list",
        "importPath": "script.MATHS          ",
        "description": "script.MATHS          ",
        "isExtraImport": true,
        "detail": "script.MATHS          ",
        "documentation": {}
    },
    {
        "label": "string",
        "importPath": "script.MATHS          ",
        "description": "script.MATHS          ",
        "isExtraImport": true,
        "detail": "script.MATHS          ",
        "documentation": {}
    },
    {
        "label": "tuple",
        "importPath": "script.MATHS          ",
        "description": "script.MATHS          ",
        "isExtraImport": true,
        "detail": "script.MATHS          ",
        "documentation": {}
    },
    {
        "label": "boolean",
        "importPath": "script.MATHS          ",
        "description": "script.MATHS          ",
        "isExtraImport": true,
        "detail": "script.MATHS          ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                ",
        "description": "script                ",
        "isExtraImport": true,
        "detail": "script                ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN ",
        "description": "script.STDIN.WinSTDIN ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN ",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER",
        "description": "script.PARXER",
        "isExtraImport": true,
        "detail": "script.PARXER",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER",
        "description": "script.PARXER",
        "isExtraImport": true,
        "detail": "script.PARXER",
        "documentation": {}
    },
    {
        "label": "parxer_assembly",
        "importPath": "script.PARXER",
        "description": "script.PARXER",
        "isExtraImport": true,
        "detail": "script.PARXER",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER",
        "description": "script.PARXER",
        "isExtraImport": true,
        "detail": "script.PARXER",
        "documentation": {}
    },
    {
        "label": "parxer_assembly",
        "importPath": "script.PARXER",
        "description": "script.PARXER",
        "isExtraImport": true,
        "detail": "script.PARXER",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER  ",
        "description": "script.LEXER  ",
        "isExtraImport": true,
        "detail": "script.LEXER  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER  ",
        "description": "script.LEXER  ",
        "isExtraImport": true,
        "detail": "script.LEXER  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER  ",
        "description": "script.LEXER  ",
        "isExtraImport": true,
        "detail": "script.LEXER  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER  ",
        "description": "script.LEXER  ",
        "isExtraImport": true,
        "detail": "script.LEXER  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER  ",
        "description": "script.LEXER  ",
        "isExtraImport": true,
        "detail": "script.LEXER  ",
        "documentation": {}
    },
    {
        "label": "integer",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "real",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "complex",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "my_list",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "string",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "tuple",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "boolean",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "integer",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "real",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "complex",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "dictionary",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "string",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "tuple",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "boolean",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "integer",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "real",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "complex",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "string",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "boolean",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "arithemtic_operations",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "mathematics",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "arithemtic_operations",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "mathematics",
        "importPath": "script.MATHS  ",
        "description": "script.MATHS  ",
        "isExtraImport": true,
        "detail": "script.MATHS  ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN              ",
        "description": "script.STDIN.LinuxSTDIN              ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN              ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN              ",
        "description": "script.STDIN.LinuxSTDIN              ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN              ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN              ",
        "description": "script.STDIN.LinuxSTDIN              ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN              ",
        "documentation": {}
    },
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux                  ",
        "description": "CythonModules.Linux                  ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux                  ",
        "documentation": {}
    },
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux                  ",
        "description": "CythonModules.Linux                  ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux                  ",
        "documentation": {}
    },
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux                  ",
        "description": "CythonModules.Linux                  ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux                  ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "CythonModules.Linux.DEEP_PARSER      ",
        "description": "CythonModules.Linux.DEEP_PARSER      ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux.DEEP_PARSER      ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER                                  ",
        "description": "script.LEXER                                  ",
        "isExtraImport": true,
        "detail": "script.LEXER                                  ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                 ",
        "description": "script.PARXER                                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                         ",
        "description": "script.LEXER.FUNCTION                         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                         ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                         ",
        "description": "script.LEXER.FUNCTION                         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                         ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                         ",
        "description": "script.LEXER.FUNCTION                         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                         ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                         ",
        "description": "script.LEXER.FUNCTION                         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                         ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                         ",
        "description": "script.LEXER.FUNCTION                         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                         ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                         ",
        "description": "script.LEXER.FUNCTION                         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                         ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                         ",
        "description": "script.LEXER.FUNCTION                         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                         ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                         ",
        "description": "script.LEXER.FUNCTION                         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                         ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                         ",
        "description": "script.LEXER.FUNCTION                         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                         ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                         ",
        "description": "script.LEXER.FUNCTION                         ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                         ",
        "documentation": {}
    },
    {
        "label": "get_list",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_list",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_list",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_dictionary",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_list",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_string",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_none",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_boolean",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_tuple",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_dictionary",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_list",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_string",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_none",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_boolean",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_tuple",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "get_list",
        "importPath": "script.PARXER.INTERNAL_FUNCTION               ",
        "description": "script.PARXER.INTERNAL_FUNCTION               ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION               ",
        "documentation": {}
    },
    {
        "label": "union",
        "importPath": "src.classes.Unions                            ",
        "description": "src.classes.Unions                            ",
        "isExtraImport": true,
        "detail": "src.classes.Unions                            ",
        "documentation": {}
    },
    {
        "label": "union",
        "importPath": "src.classes.Unions                            ",
        "description": "src.classes.Unions                            ",
        "isExtraImport": true,
        "detail": "src.classes.Unions                            ",
        "documentation": {}
    },
    {
        "label": "union",
        "importPath": "src.classes.Unions                            ",
        "description": "src.classes.Unions                            ",
        "isExtraImport": true,
        "detail": "src.classes.Unions                            ",
        "documentation": {}
    },
    {
        "label": "union",
        "importPath": "src.classes.Unions                            ",
        "description": "src.classes.Unions                            ",
        "isExtraImport": true,
        "detail": "src.classes.Unions                            ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "loading",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "readfile",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "check_char",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "run_func",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "inheritance",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "loading",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "readfile",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "check_char",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "run_func",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "inheritance",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "loading",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "readfile",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "check_char",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "run_func",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "inheritance",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "run_func",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                   ",
        "description": "src.classes                                   ",
        "isExtraImport": true,
        "detail": "src.classes                                   ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                 ",
        "description": "script.PARXER                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                 ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                 ",
        "description": "script.PARXER                 ",
        "isExtraImport": true,
        "detail": "script.PARXER                 ",
        "documentation": {}
    },
    {
        "label": "Lists",
        "importPath": "src.classes.Lists             ",
        "description": "src.classes.Lists             ",
        "isExtraImport": true,
        "detail": "src.classes.Lists             ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                   ",
        "description": "src.classes                   ",
        "isExtraImport": true,
        "detail": "src.classes                   ",
        "documentation": {}
    },
    {
        "label": "Char",
        "importPath": "src.classes.Chars                             ",
        "description": "src.classes.Chars                             ",
        "isExtraImport": true,
        "detail": "src.classes.Chars                             ",
        "documentation": {}
    },
    {
        "label": "Char",
        "importPath": "src.classes.Chars                             ",
        "description": "src.classes.Chars                             ",
        "isExtraImport": true,
        "detail": "src.classes.Chars                             ",
        "documentation": {}
    },
    {
        "label": "Char",
        "importPath": "src.classes.Chars                             ",
        "description": "src.classes.Chars                             ",
        "isExtraImport": true,
        "detail": "src.classes.Chars                             ",
        "documentation": {}
    },
    {
        "label": "Char",
        "importPath": "src.classes.Chars                             ",
        "description": "src.classes.Chars                             ",
        "isExtraImport": true,
        "detail": "src.classes.Chars                             ",
        "documentation": {}
    },
    {
        "label": "Global",
        "importPath": "src.classes.Chars                             ",
        "description": "src.classes.Chars                             ",
        "isExtraImport": true,
        "detail": "src.classes.Chars                             ",
        "documentation": {}
    },
    {
        "label": "Join",
        "importPath": "src.classes.Chars                             ",
        "description": "src.classes.Chars                             ",
        "isExtraImport": true,
        "detail": "src.classes.Chars                             ",
        "documentation": {}
    },
    {
        "label": "Replace",
        "importPath": "src.classes.Chars                             ",
        "description": "src.classes.Chars                             ",
        "isExtraImport": true,
        "detail": "src.classes.Chars                             ",
        "documentation": {}
    },
    {
        "label": "Split",
        "importPath": "src.classes.Chars                             ",
        "description": "src.classes.Chars                             ",
        "isExtraImport": true,
        "detail": "src.classes.Chars                             ",
        "documentation": {}
    },
    {
        "label": "fileError",
        "importPath": "CythonModules.Linux                           ",
        "description": "CythonModules.Linux                           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux                           ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "CythonModules.Linux                           ",
        "description": "CythonModules.Linux                           ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux                           ",
        "documentation": {}
    },
    {
        "label": "Tuples",
        "importPath": "src.classes.Tuples                            ",
        "description": "src.classes.Tuples                            ",
        "isExtraImport": true,
        "detail": "src.classes.Tuples                            ",
        "documentation": {}
    },
    {
        "label": "Tuples",
        "importPath": "src.classes.Tuples                            ",
        "description": "src.classes.Tuples                            ",
        "isExtraImport": true,
        "detail": "src.classes.Tuples                            ",
        "documentation": {}
    },
    {
        "label": "Tuples",
        "importPath": "src.classes.Tuples                            ",
        "description": "src.classes.Tuples                            ",
        "isExtraImport": true,
        "detail": "src.classes.Tuples                            ",
        "documentation": {}
    },
    {
        "label": "Tuples",
        "importPath": "src.classes.Tuples                            ",
        "description": "src.classes.Tuples                            ",
        "isExtraImport": true,
        "detail": "src.classes.Tuples                            ",
        "documentation": {}
    },
    {
        "label": "Tuples",
        "importPath": "src.classes.Tuples                            ",
        "description": "src.classes.Tuples                            ",
        "isExtraImport": true,
        "detail": "src.classes.Tuples                            ",
        "documentation": {}
    },
    {
        "label": "main_lexer",
        "importPath": "script.LEXER      ",
        "description": "script.LEXER      ",
        "isExtraImport": true,
        "detail": "script.LEXER      ",
        "documentation": {}
    },
    {
        "label": "check_if_affectation",
        "importPath": "script.LEXER      ",
        "description": "script.LEXER      ",
        "isExtraImport": true,
        "detail": "script.LEXER      ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script            ",
        "description": "script            ",
        "isExtraImport": true,
        "detail": "script            ",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama          ",
        "description": "colorama          ",
        "isExtraImport": true,
        "detail": "colorama          ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                         ",
        "description": "script.PARXER                                         ",
        "isExtraImport": true,
        "detail": "script.PARXER                                         ",
        "documentation": {}
    },
    {
        "label": "module_load_treatment",
        "importPath": "script.PARXER                                         ",
        "description": "script.PARXER                                         ",
        "isExtraImport": true,
        "detail": "script.PARXER                                         ",
        "documentation": {}
    },
    {
        "label": "partial_assembly",
        "importPath": "script.PARXER                                         ",
        "description": "script.PARXER                                         ",
        "isExtraImport": true,
        "detail": "script.PARXER                                         ",
        "documentation": {}
    },
    {
        "label": "module_load_treatment",
        "importPath": "script.PARXER                                         ",
        "description": "script.PARXER                                         ",
        "isExtraImport": true,
        "detail": "script.PARXER                                         ",
        "documentation": {}
    },
    {
        "label": "module_load_treatment",
        "importPath": "script.PARXER                                         ",
        "description": "script.PARXER                                         ",
        "isExtraImport": true,
        "detail": "script.PARXER                                         ",
        "documentation": {}
    },
    {
        "label": "partial_assembly",
        "importPath": "script.PARXER                                         ",
        "description": "script.PARXER                                         ",
        "isExtraImport": true,
        "detail": "script.PARXER                                         ",
        "documentation": {}
    },
    {
        "label": "module_load_treatment",
        "importPath": "script.PARXER                                         ",
        "description": "script.PARXER                                         ",
        "isExtraImport": true,
        "detail": "script.PARXER                                         ",
        "documentation": {}
    },
    {
        "label": "partial_assembly",
        "importPath": "script.PARXER                                         ",
        "description": "script.PARXER                                         ",
        "isExtraImport": true,
        "detail": "script.PARXER                                         ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                         ",
        "description": "script.PARXER                                         ",
        "isExtraImport": true,
        "detail": "script.PARXER                                         ",
        "documentation": {}
    },
    {
        "label": "parxerError",
        "importPath": "script.PARXER                                         ",
        "description": "script.PARXER                                         ",
        "isExtraImport": true,
        "detail": "script.PARXER                                         ",
        "documentation": {}
    },
    {
        "label": "show_data",
        "importPath": "script.PARXER.PRINT                                   ",
        "description": "script.PARXER.PRINT                                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PRINT                                   ",
        "documentation": {}
    },
    {
        "label": "show_data",
        "importPath": "script.PARXER.PRINT                                   ",
        "description": "script.PARXER.PRINT                                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PRINT                                   ",
        "documentation": {}
    },
    {
        "label": "show_data",
        "importPath": "script.PARXER.PRINT                                   ",
        "description": "script.PARXER.PRINT                                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PRINT                                   ",
        "documentation": {}
    },
    {
        "label": "show_data",
        "importPath": "script.PARXER.PRINT                                   ",
        "description": "script.PARXER.PRINT                                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PRINT                                   ",
        "documentation": {}
    },
    {
        "label": "print_value",
        "importPath": "script.LEXER.FUNCTION                                 ",
        "description": "script.LEXER.FUNCTION                                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                                 ",
        "description": "script.LEXER.FUNCTION                                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                                 ",
        "description": "script.LEXER.FUNCTION                                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                                 ",
        "description": "script.LEXER.FUNCTION                                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                                 ",
        "description": "script.LEXER.FUNCTION                                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                                 ",
        "description": "script.LEXER.FUNCTION                                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                                 ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                                 ",
        "description": "script.LEXER.FUNCTION                                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                                 ",
        "documentation": {}
    },
    {
        "label": "print_value",
        "importPath": "script.LEXER.FUNCTION                                 ",
        "description": "script.LEXER.FUNCTION                                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                                 ",
        "documentation": {}
    },
    {
        "label": "print_value",
        "importPath": "script.LEXER.FUNCTION                                 ",
        "description": "script.LEXER.FUNCTION                                 ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                                 ",
        "documentation": {}
    },
    {
        "label": "mainStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "externalIF",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "externalIF",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "externalTry",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "externalTry",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "externalUnless",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "externalUnless",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "mainStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "mainStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "mainStatement",
        "importPath": "statement                                             ",
        "description": "statement                                             ",
        "isExtraImport": true,
        "detail": "statement                                             ",
        "documentation": {}
    },
    {
        "label": "unless_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "documentation": {}
    },
    {
        "label": "UnlessError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "documentation": {}
    },
    {
        "label": "UnlessError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "documentation": {}
    },
    {
        "label": "unless_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "documentation": {}
    },
    {
        "label": "unless_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "documentation": {}
    },
    {
        "label": "unless_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_               ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_               ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_               ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_               ",
        "documentation": {}
    },
    {
        "label": "switch_inter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_               ",
        "documentation": {}
    },
    {
        "label": "while_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.WHILE                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS.WHILE                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.WHILE                  ",
        "documentation": {}
    },
    {
        "label": "whileError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.WHILE                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS.WHILE                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.WHILE                  ",
        "documentation": {}
    },
    {
        "label": "whileError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.WHILE                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS.WHILE                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.WHILE                  ",
        "documentation": {}
    },
    {
        "label": "while_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.WHILE                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS.WHILE                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.WHILE                  ",
        "documentation": {}
    },
    {
        "label": "end_for_else",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "documentation": {}
    },
    {
        "label": "for_try",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "documentation": {}
    },
    {
        "label": "for_block_treatment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "documentation": {}
    },
    {
        "label": "for_block_treatment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "documentation": {}
    },
    {
        "label": "for_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "documentation": {}
    },
    {
        "label": "for_block_treatment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "documentation": {}
    },
    {
        "label": "for_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_                  ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_        ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_        ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_        ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_        ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_        ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_        ",
        "documentation": {}
    },
    {
        "label": "cmt_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_        ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_        ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_        ",
        "documentation": {}
    },
    {
        "label": "try_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "documentation": {}
    },
    {
        "label": "tryError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "documentation": {}
    },
    {
        "label": "tryError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "documentation": {}
    },
    {
        "label": "try_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "documentation": {}
    },
    {
        "label": "try_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_                  ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "subWindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "externalIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "externalIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "externalIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "externalIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "externalIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS       ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "externalUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "subWindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "internalUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS           ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "externalSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "modules",
        "importPath": "src.modulesLoading                                    ",
        "description": "src.modulesLoading                                    ",
        "isExtraImport": true,
        "detail": "src.modulesLoading                                    ",
        "documentation": {}
    },
    {
        "label": "moduleMain",
        "importPath": "src.modulesLoading                                    ",
        "description": "src.modulesLoading                                    ",
        "isExtraImport": true,
        "detail": "src.modulesLoading                                    ",
        "documentation": {}
    },
    {
        "label": "modules",
        "importPath": "src.modulesLoading                                    ",
        "description": "src.modulesLoading                                    ",
        "isExtraImport": true,
        "detail": "src.modulesLoading                                    ",
        "documentation": {}
    },
    {
        "label": "moduleMain",
        "importPath": "src.modulesLoading                                    ",
        "description": "src.modulesLoading                                    ",
        "isExtraImport": true,
        "detail": "src.modulesLoading                                    ",
        "documentation": {}
    },
    {
        "label": "modules",
        "importPath": "src.modulesLoading                                    ",
        "description": "src.modulesLoading                                    ",
        "isExtraImport": true,
        "detail": "src.modulesLoading                                    ",
        "documentation": {}
    },
    {
        "label": "moduleMain",
        "importPath": "src.modulesLoading                                    ",
        "description": "src.modulesLoading                                    ",
        "isExtraImport": true,
        "detail": "src.modulesLoading                                    ",
        "documentation": {}
    },
    {
        "label": "modules",
        "importPath": "src.modulesLoading                                    ",
        "description": "src.modulesLoading                                    ",
        "isExtraImport": true,
        "detail": "src.modulesLoading                                    ",
        "documentation": {}
    },
    {
        "label": "moduleMain",
        "importPath": "src.modulesLoading                                    ",
        "description": "src.modulesLoading                                    ",
        "isExtraImport": true,
        "detail": "src.modulesLoading                                    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "externalWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "subWindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "internalWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "WindowsWhile",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS    ",
        "documentation": {}
    },
    {
        "label": "windowsDef",
        "importPath": "src.functions.windows                                 ",
        "description": "src.functions.windows                                 ",
        "isExtraImport": true,
        "detail": "src.functions.windows                                 ",
        "documentation": {}
    },
    {
        "label": "windowsDef",
        "importPath": "src.functions.windows                                 ",
        "description": "src.functions.windows                                 ",
        "isExtraImport": true,
        "detail": "src.functions.windows                                 ",
        "documentation": {}
    },
    {
        "label": "windowsClass",
        "importPath": "src.classes.windows                                   ",
        "description": "src.classes.windows                                   ",
        "isExtraImport": true,
        "detail": "src.classes.windows                                   ",
        "documentation": {}
    },
    {
        "label": "windowsClass",
        "importPath": "src.classes.windows                                   ",
        "description": "src.classes.windows                                   ",
        "isExtraImport": true,
        "detail": "src.classes.windows                                   ",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "documentation": {}
    },
    {
        "label": "externalLoading",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "documentation": {}
    },
    {
        "label": "externalLoading",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "documentation": {}
    },
    {
        "label": "externalLoading",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS      ",
        "documentation": {}
    },
    {
        "label": "Lists",
        "importPath": "src.classes.Lists                             ",
        "description": "src.classes.Lists                             ",
        "isExtraImport": true,
        "detail": "src.classes.Lists                             ",
        "documentation": {}
    },
    {
        "label": "Lists",
        "importPath": "src.classes.Lists                             ",
        "description": "src.classes.Lists                             ",
        "isExtraImport": true,
        "detail": "src.classes.Lists                             ",
        "documentation": {}
    },
    {
        "label": "Lists",
        "importPath": "src.classes.Lists                             ",
        "description": "src.classes.Lists                             ",
        "isExtraImport": true,
        "detail": "src.classes.Lists                             ",
        "documentation": {}
    },
    {
        "label": "inserting",
        "importPath": "src.classes.Lists                             ",
        "description": "src.classes.Lists                             ",
        "isExtraImport": true,
        "detail": "src.classes.Lists                             ",
        "documentation": {}
    },
    {
        "label": "random_init",
        "importPath": "src.classes.Lists                             ",
        "description": "src.classes.Lists                             ",
        "isExtraImport": true,
        "detail": "src.classes.Lists                             ",
        "documentation": {}
    },
    {
        "label": "sorting",
        "importPath": "src.classes.Lists                             ",
        "description": "src.classes.Lists                             ",
        "isExtraImport": true,
        "detail": "src.classes.Lists                             ",
        "documentation": {}
    },
    {
        "label": "to_array",
        "importPath": "src.classes.Lists                             ",
        "description": "src.classes.Lists                             ",
        "isExtraImport": true,
        "detail": "src.classes.Lists                             ",
        "documentation": {}
    },
    {
        "label": "to_array",
        "importPath": "src.classes.Lists                             ",
        "description": "src.classes.Lists                             ",
        "isExtraImport": true,
        "detail": "src.classes.Lists                             ",
        "documentation": {}
    },
    {
        "label": "inserting",
        "importPath": "src.classes.Lists                             ",
        "description": "src.classes.Lists                             ",
        "isExtraImport": true,
        "detail": "src.classes.Lists                             ",
        "documentation": {}
    },
    {
        "label": "random_init",
        "importPath": "src.classes.Lists                             ",
        "description": "src.classes.Lists                             ",
        "isExtraImport": true,
        "detail": "src.classes.Lists                             ",
        "documentation": {}
    },
    {
        "label": "sorting",
        "importPath": "src.classes.Lists                             ",
        "description": "src.classes.Lists                             ",
        "isExtraImport": true,
        "detail": "src.classes.Lists                             ",
        "documentation": {}
    },
    {
        "label": "cplx",
        "importPath": "src.classes.Cplx                              ",
        "description": "src.classes.Cplx                              ",
        "isExtraImport": true,
        "detail": "src.classes.Cplx                              ",
        "documentation": {}
    },
    {
        "label": "cplx",
        "importPath": "src.classes.Cplx                              ",
        "description": "src.classes.Cplx                              ",
        "isExtraImport": true,
        "detail": "src.classes.Cplx                              ",
        "documentation": {}
    },
    {
        "label": "cplx",
        "importPath": "src.classes.Cplx                              ",
        "description": "src.classes.Cplx                              ",
        "isExtraImport": true,
        "detail": "src.classes.Cplx                              ",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "src.classes.Cplx                              ",
        "description": "src.classes.Cplx                              ",
        "isExtraImport": true,
        "detail": "src.classes.Cplx                              ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "src.classes.frame                             ",
        "description": "src.classes.frame                             ",
        "isExtraImport": true,
        "detail": "src.classes.frame                             ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "src.classes.frame                             ",
        "description": "src.classes.frame                             ",
        "isExtraImport": true,
        "detail": "src.classes.frame                             ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "src.classes.frame                             ",
        "description": "src.classes.frame                             ",
        "isExtraImport": true,
        "detail": "src.classes.frame                             ",
        "documentation": {}
    },
    {
        "label": "matrix_2D",
        "importPath": "src.classes.matrix                            ",
        "description": "src.classes.matrix                            ",
        "isExtraImport": true,
        "detail": "src.classes.matrix                            ",
        "documentation": {}
    },
    {
        "label": "arguments",
        "importPath": "src.classes.matrix                            ",
        "description": "src.classes.matrix                            ",
        "isExtraImport": true,
        "detail": "src.classes.matrix                            ",
        "documentation": {}
    },
    {
        "label": "matrix_2D",
        "importPath": "src.classes.matrix                            ",
        "description": "src.classes.matrix                            ",
        "isExtraImport": true,
        "detail": "src.classes.matrix                            ",
        "documentation": {}
    },
    {
        "label": "arguments",
        "importPath": "src.classes.matrix                            ",
        "description": "src.classes.matrix                            ",
        "isExtraImport": true,
        "detail": "src.classes.matrix                            ",
        "documentation": {}
    },
    {
        "label": "matrix_2D",
        "importPath": "src.classes.matrix                            ",
        "description": "src.classes.matrix                            ",
        "isExtraImport": true,
        "detail": "src.classes.matrix                            ",
        "documentation": {}
    },
    {
        "label": "arguments",
        "importPath": "src.classes.matrix                            ",
        "description": "src.classes.matrix                            ",
        "isExtraImport": true,
        "detail": "src.classes.matrix                            ",
        "documentation": {}
    },
    {
        "label": "checking_2D",
        "importPath": "src.classes.matrix                            ",
        "description": "src.classes.matrix                            ",
        "isExtraImport": true,
        "detail": "src.classes.matrix                            ",
        "documentation": {}
    },
    {
        "label": "loading",
        "importPath": "src.functions                                 ",
        "description": "src.functions                                 ",
        "isExtraImport": true,
        "detail": "src.functions                                 ",
        "documentation": {}
    },
    {
        "label": "function",
        "importPath": "src.functions                                 ",
        "description": "src.functions                                 ",
        "isExtraImport": true,
        "detail": "src.functions                                 ",
        "documentation": {}
    },
    {
        "label": "loading",
        "importPath": "src.functions                                 ",
        "description": "src.functions                                 ",
        "isExtraImport": true,
        "detail": "src.functions                                 ",
        "documentation": {}
    },
    {
        "label": "function",
        "importPath": "src.functions                                 ",
        "description": "src.functions                                 ",
        "isExtraImport": true,
        "detail": "src.functions                                 ",
        "documentation": {}
    },
    {
        "label": "loading",
        "importPath": "src.functions                                 ",
        "description": "src.functions                                 ",
        "isExtraImport": true,
        "detail": "src.functions                                 ",
        "documentation": {}
    },
    {
        "label": "function",
        "importPath": "src.functions                                 ",
        "description": "src.functions                                 ",
        "isExtraImport": true,
        "detail": "src.functions                                 ",
        "documentation": {}
    },
    {
        "label": "function",
        "importPath": "src.functions                                 ",
        "description": "src.functions                                 ",
        "isExtraImport": true,
        "detail": "src.functions                                 ",
        "documentation": {}
    },
    {
        "label": "nested_vars",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED ",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED ",
        "documentation": {}
    },
    {
        "label": "nested_vars",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED ",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED ",
        "documentation": {}
    },
    {
        "label": "nested_func_load",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED ",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED ",
        "documentation": {}
    },
    {
        "label": "classInit",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES        ",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES        ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES        ",
        "documentation": {}
    },
    {
        "label": "classInit",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES        ",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES        ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES        ",
        "documentation": {}
    },
    {
        "label": "classInit",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES        ",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES        ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES        ",
        "documentation": {}
    },
    {
        "label": "Range",
        "importPath": "src.classes.Range                             ",
        "description": "src.classes.Range                             ",
        "isExtraImport": true,
        "detail": "src.classes.Range                             ",
        "documentation": {}
    },
    {
        "label": "def_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS  ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS  ",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS  ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS  ",
        "documentation": {}
    },
    {
        "label": "errorClass",
        "importPath": "src.classes                               ",
        "description": "src.classes                               ",
        "isExtraImport": true,
        "detail": "src.classes                               ",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "src.classes                               ",
        "description": "src.classes                               ",
        "isExtraImport": true,
        "detail": "src.classes                               ",
        "documentation": {}
    },
    {
        "label": "errorClass",
        "importPath": "src.classes                               ",
        "description": "src.classes                               ",
        "isExtraImport": true,
        "detail": "src.classes                               ",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "src.classes                               ",
        "description": "src.classes                               ",
        "isExtraImport": true,
        "detail": "src.classes                               ",
        "documentation": {}
    },
    {
        "label": "updatingClasses",
        "importPath": "src.classes                               ",
        "description": "src.classes                               ",
        "isExtraImport": true,
        "detail": "src.classes                               ",
        "documentation": {}
    },
    {
        "label": "errorClass",
        "importPath": "src.classes                               ",
        "description": "src.classes                               ",
        "isExtraImport": true,
        "detail": "src.classes                               ",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "src.classes                               ",
        "description": "src.classes                               ",
        "isExtraImport": true,
        "detail": "src.classes                               ",
        "documentation": {}
    },
    {
        "label": "updatingClasses",
        "importPath": "src.classes                               ",
        "description": "src.classes                               ",
        "isExtraImport": true,
        "detail": "src.classes                               ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                     ",
        "description": "script.STDIN.WinSTDIN                     ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                     ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                     ",
        "description": "script.STDIN.WinSTDIN                     ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                     ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                     ",
        "description": "script.STDIN.WinSTDIN                     ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                     ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                     ",
        "description": "script.LEXER.FUNCTION                     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                     ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                     ",
        "description": "script.LEXER.FUNCTION                     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                     ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                     ",
        "description": "script.LEXER.FUNCTION                     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                     ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                     ",
        "description": "script.LEXER.FUNCTION                     ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                     ",
        "documentation": {}
    },
    {
        "label": "externalRest",
        "importPath": "statement                                 ",
        "description": "statement                                 ",
        "isExtraImport": true,
        "detail": "statement                                 ",
        "documentation": {}
    },
    {
        "label": "externalRest",
        "importPath": "statement                                 ",
        "description": "statement                                 ",
        "isExtraImport": true,
        "detail": "statement                                 ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                 ",
        "description": "statement                                 ",
        "isExtraImport": true,
        "detail": "statement                                 ",
        "documentation": {}
    },
    {
        "label": "externalSwitch",
        "importPath": "statement                                 ",
        "description": "statement                                 ",
        "isExtraImport": true,
        "detail": "statement                                 ",
        "documentation": {}
    },
    {
        "label": "mainStatement",
        "importPath": "statement                                 ",
        "description": "statement                                 ",
        "isExtraImport": true,
        "detail": "statement                                 ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_       ",
        "documentation": {}
    },
    {
        "label": "if_inter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_       ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_       ",
        "documentation": {}
    },
    {
        "label": "module_load_treatment",
        "importPath": "script.PARXER                             ",
        "description": "script.PARXER                             ",
        "isExtraImport": true,
        "detail": "script.PARXER                             ",
        "documentation": {}
    },
    {
        "label": "internalDef",
        "importPath": "functions                                 ",
        "description": "functions                                 ",
        "isExtraImport": true,
        "detail": "functions                                 ",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE                          ",
        "description": "script.DATA_BASE                          ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE                          ",
        "documentation": {}
    },
    {
        "label": "get_list",
        "importPath": "script.PARXER.INTERNAL_FUNCTION                   ",
        "description": "script.PARXER.INTERNAL_FUNCTION                   ",
        "isExtraImport": true,
        "detail": "script.PARXER.INTERNAL_FUNCTION                   ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                             ",
        "description": "script.LEXER.FUNCTION                             ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                             ",
        "documentation": {}
    },
    {
        "label": "print_value",
        "importPath": "script.LEXER.FUNCTION                             ",
        "description": "script.LEXER.FUNCTION                             ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                             ",
        "documentation": {}
    },
    {
        "label": "print_value",
        "importPath": "script.LEXER.FUNCTION                             ",
        "description": "script.LEXER.FUNCTION                             ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                             ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                             ",
        "description": "script.LEXER.FUNCTION                             ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                             ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                             ",
        "description": "script.LEXER.FUNCTION                             ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                             ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                             ",
        "description": "script.LEXER.FUNCTION                             ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                             ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                             ",
        "description": "script.LEXER.FUNCTION                             ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                             ",
        "documentation": {}
    },
    {
        "label": "print_value",
        "importPath": "script.LEXER.FUNCTION                             ",
        "description": "script.LEXER.FUNCTION                             ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                             ",
        "documentation": {}
    },
    {
        "label": "print_value",
        "importPath": "script.LEXER.FUNCTION                             ",
        "description": "script.LEXER.FUNCTION                             ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                             ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                             ",
        "description": "script.LEXER.FUNCTION                             ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                             ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                             ",
        "description": "script.LEXER.FUNCTION                             ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                             ",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "script.LEXER.FUNCTION                             ",
        "description": "script.LEXER.FUNCTION                             ",
        "isExtraImport": true,
        "detail": "script.LEXER.FUNCTION                             ",
        "documentation": {}
    },
    {
        "label": "if_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "end_else_elif",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "if_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "if_inter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "end_else_elif",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "if_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "if_inter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "if_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "if_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "if_inter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "end_else_elif",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "end_else_elif",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "loop_if_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_               ",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE                                  ",
        "description": "script.DATA_BASE                                  ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE                                  ",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE                                  ",
        "description": "script.DATA_BASE                                  ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE                                  ",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE                                  ",
        "description": "script.DATA_BASE                                  ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE                                  ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "end",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "end",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "cmtError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "cmtError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "cmtError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "cmt_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "cmt_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "cmtError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "cmtError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_    ",
        "documentation": {}
    },
    {
        "label": "module_load_treatment",
        "importPath": "script.PARXER                                     ",
        "description": "script.PARXER                                     ",
        "isExtraImport": true,
        "detail": "script.PARXER                                     ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                     ",
        "description": "script.PARXER                                     ",
        "isExtraImport": true,
        "detail": "script.PARXER                                     ",
        "documentation": {}
    },
    {
        "label": "parxer_assembly",
        "importPath": "script.PARXER                                     ",
        "description": "script.PARXER                                     ",
        "isExtraImport": true,
        "detail": "script.PARXER                                     ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                     ",
        "description": "script.PARXER                                     ",
        "isExtraImport": true,
        "detail": "script.PARXER                                     ",
        "documentation": {}
    },
    {
        "label": "module_load_treatment",
        "importPath": "script.PARXER                                     ",
        "description": "script.PARXER                                     ",
        "isExtraImport": true,
        "detail": "script.PARXER                                     ",
        "documentation": {}
    },
    {
        "label": "module_load_treatment",
        "importPath": "script.PARXER                                     ",
        "description": "script.PARXER                                     ",
        "isExtraImport": true,
        "detail": "script.PARXER                                     ",
        "documentation": {}
    },
    {
        "label": "module_load_treatment",
        "importPath": "script.PARXER                                     ",
        "description": "script.PARXER                                     ",
        "isExtraImport": true,
        "detail": "script.PARXER                                     ",
        "documentation": {}
    },
    {
        "label": "numerical_value",
        "importPath": "script.PARXER                                     ",
        "description": "script.PARXER                                     ",
        "isExtraImport": true,
        "detail": "script.PARXER                                     ",
        "documentation": {}
    },
    {
        "label": "unless_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "unless_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "unless_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "unless_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "unless_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "unless_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "unless_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "UnlessError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "UnlessError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "UnlessError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "unless_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "unless_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "unless_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "loop_unless_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_           ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "documentation": {}
    },
    {
        "label": "switchError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_           ",
        "documentation": {}
    },
    {
        "label": "try_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "documentation": {}
    },
    {
        "label": "try_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "documentation": {}
    },
    {
        "label": "try_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "documentation": {}
    },
    {
        "label": "try_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "documentation": {}
    },
    {
        "label": "try_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "documentation": {}
    },
    {
        "label": "try_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "documentation": {}
    },
    {
        "label": "try_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "documentation": {}
    },
    {
        "label": "try_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "documentation": {}
    },
    {
        "label": "try_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_              ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "function",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "loading",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "set_openfile",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "updating_data",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "type_of_data",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "type_of_data",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "updating_data",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "set_openfile",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.functions                                     ",
        "description": "src.functions                                     ",
        "isExtraImport": true,
        "detail": "src.functions                                     ",
        "documentation": {}
    },
    {
        "label": "internalDef",
        "importPath": "functions                                         ",
        "description": "functions                                         ",
        "isExtraImport": true,
        "detail": "functions                                         ",
        "documentation": {}
    },
    {
        "label": "internalDef",
        "importPath": "functions                                         ",
        "description": "functions                                         ",
        "isExtraImport": true,
        "detail": "functions                                         ",
        "documentation": {}
    },
    {
        "label": "internalDef",
        "importPath": "functions                                         ",
        "description": "functions                                         ",
        "isExtraImport": true,
        "detail": "functions                                         ",
        "documentation": {}
    },
    {
        "label": "internalDef",
        "importPath": "functions                                         ",
        "description": "functions                                         ",
        "isExtraImport": true,
        "detail": "functions                                         ",
        "documentation": {}
    },
    {
        "label": "externalCmt",
        "importPath": "statement.comment                                 ",
        "description": "statement.comment                                 ",
        "isExtraImport": true,
        "detail": "statement.comment                                 ",
        "documentation": {}
    },
    {
        "label": "externalCmt",
        "importPath": "statement.comment                                 ",
        "description": "statement.comment                                 ",
        "isExtraImport": true,
        "detail": "statement.comment                                 ",
        "documentation": {}
    },
    {
        "label": "externalCmt",
        "importPath": "statement.comment                                 ",
        "description": "statement.comment                                 ",
        "isExtraImport": true,
        "detail": "statement.comment                                 ",
        "documentation": {}
    },
    {
        "label": "internalCmt",
        "importPath": "statement.comment                                 ",
        "description": "statement.comment                                 ",
        "isExtraImport": true,
        "detail": "statement.comment                                 ",
        "documentation": {}
    },
    {
        "label": "externalCmt",
        "importPath": "statement.comment                                 ",
        "description": "statement.comment                                 ",
        "isExtraImport": true,
        "detail": "statement.comment                                 ",
        "documentation": {}
    },
    {
        "label": "externalCmt",
        "importPath": "statement.comment                                 ",
        "description": "statement.comment                                 ",
        "isExtraImport": true,
        "detail": "statement.comment                                 ",
        "documentation": {}
    },
    {
        "label": "externalCmt",
        "importPath": "statement.comment                                 ",
        "description": "statement.comment                                 ",
        "isExtraImport": true,
        "detail": "statement.comment                                 ",
        "documentation": {}
    },
    {
        "label": "externalBlocks",
        "importPath": "statement.comment                                 ",
        "description": "statement.comment                                 ",
        "isExtraImport": true,
        "detail": "statement.comment                                 ",
        "documentation": {}
    },
    {
        "label": "structure",
        "importPath": "statement.comment                                 ",
        "description": "statement.comment                                 ",
        "isExtraImport": true,
        "detail": "statement.comment                                 ",
        "documentation": {}
    },
    {
        "label": "externalBlocks",
        "importPath": "statement.comment                                 ",
        "description": "statement.comment                                 ",
        "isExtraImport": true,
        "detail": "statement.comment                                 ",
        "documentation": {}
    },
    {
        "label": "while_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "description": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "documentation": {}
    },
    {
        "label": "whileError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "description": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "documentation": {}
    },
    {
        "label": "while_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "description": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "documentation": {}
    },
    {
        "label": "while_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "description": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "documentation": {}
    },
    {
        "label": "while_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "description": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.WHILE              ",
        "documentation": {}
    },
    {
        "label": "externalLoading",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS          ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS          ",
        "documentation": {}
    },
    {
        "label": "def_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS          ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS          ",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS          ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS          ",
        "documentation": {}
    },
    {
        "label": "updating",
        "importPath": "updatingDataBase                                  ",
        "description": "updatingDataBase                                  ",
        "isExtraImport": true,
        "detail": "updatingDataBase                                  ",
        "documentation": {}
    },
    {
        "label": "updating",
        "importPath": "updatingDataBase                                  ",
        "description": "updatingDataBase                                  ",
        "isExtraImport": true,
        "detail": "updatingDataBase                                  ",
        "documentation": {}
    },
    {
        "label": "updating",
        "importPath": "updatingDataBase                                  ",
        "description": "updatingDataBase                                  ",
        "isExtraImport": true,
        "detail": "updatingDataBase                                  ",
        "documentation": {}
    },
    {
        "label": "updating",
        "importPath": "updatingDataBase                                  ",
        "description": "updatingDataBase                                  ",
        "isExtraImport": true,
        "detail": "updatingDataBase                                  ",
        "documentation": {}
    },
    {
        "label": "updating",
        "importPath": "updatingDataBase                                  ",
        "description": "updatingDataBase                                  ",
        "isExtraImport": true,
        "detail": "updatingDataBase                                  ",
        "documentation": {}
    },
    {
        "label": "updating",
        "importPath": "updatingDataBase                                  ",
        "description": "updatingDataBase                                  ",
        "isExtraImport": true,
        "detail": "updatingDataBase                                  ",
        "documentation": {}
    },
    {
        "label": "updating",
        "importPath": "updatingDataBase                                  ",
        "description": "updatingDataBase                                  ",
        "isExtraImport": true,
        "detail": "updatingDataBase                                  ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "distutils.log",
        "description": "distutils.log",
        "isExtraImport": true,
        "detail": "distutils.log",
        "documentation": {}
    },
    {
        "label": "cython",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cython",
        "description": "cython",
        "detail": "cython",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "externalSwitch",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "externalRest",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "externalIF",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "externalIF",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "externalIF",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "externalSwitch",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "externalUnless",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "externalUnless",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "InternalStatement",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "externalUnless",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "mainStatement",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "mainStatement",
        "importPath": "statement                                         ",
        "description": "statement                                         ",
        "isExtraImport": true,
        "detail": "statement                                         ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                             ",
        "description": "script.STDIN.WinSTDIN                             ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                             ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                             ",
        "description": "script.STDIN.WinSTDIN                             ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                             ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                             ",
        "description": "script.STDIN.WinSTDIN                             ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                             ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                             ",
        "description": "script.STDIN.WinSTDIN                             ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                             ",
        "documentation": {}
    },
    {
        "label": "if_stdin",
        "importPath": "script.STDIN.WinSTDIN                             ",
        "description": "script.STDIN.WinSTDIN                             ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                             ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                             ",
        "description": "script.STDIN.WinSTDIN                             ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                             ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                             ",
        "description": "script.STDIN.WinSTDIN                             ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                             ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                             ",
        "description": "script.STDIN.WinSTDIN                             ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                             ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                             ",
        "description": "script.STDIN.WinSTDIN                             ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                             ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                             ",
        "description": "script.STDIN.WinSTDIN                             ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                             ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_           ",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_           ",
        "documentation": {}
    },
    {
        "label": "if_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_           ",
        "documentation": {}
    },
    {
        "label": "if_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_           ",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_           ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_           ",
        "documentation": {}
    },
    {
        "label": "externalFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN  ",
        "documentation": {}
    },
    {
        "label": "internalFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN  ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN  ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN  ",
        "documentation": {}
    },
    {
        "label": "externalCmt",
        "importPath": "statement.comment                                     ",
        "description": "statement.comment                                     ",
        "isExtraImport": true,
        "detail": "statement.comment                                     ",
        "documentation": {}
    },
    {
        "label": "externalCmt",
        "importPath": "statement.comment                                     ",
        "description": "statement.comment                                     ",
        "isExtraImport": true,
        "detail": "statement.comment                                     ",
        "documentation": {}
    },
    {
        "label": "externalCmt",
        "importPath": "statement.comment                                     ",
        "description": "statement.comment                                     ",
        "isExtraImport": true,
        "detail": "statement.comment                                     ",
        "documentation": {}
    },
    {
        "label": "externalCmt",
        "importPath": "statement.comment                                     ",
        "description": "statement.comment                                     ",
        "isExtraImport": true,
        "detail": "statement.comment                                     ",
        "documentation": {}
    },
    {
        "label": "forError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR              ",
        "documentation": {}
    },
    {
        "label": "forError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR              ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                         ",
        "description": "script.PARXER.LEXER_CONFIGURE                         ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                         ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                         ",
        "description": "script.PARXER.LEXER_CONFIGURE                         ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                         ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                         ",
        "description": "script.PARXER.LEXER_CONFIGURE                         ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                         ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE                         ",
        "description": "script.PARXER.LEXER_CONFIGURE                         ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE                         ",
        "documentation": {}
    },
    {
        "label": "subWindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "documentation": {}
    },
    {
        "label": "WindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "documentation": {}
    },
    {
        "label": "subWindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "documentation": {}
    },
    {
        "label": "subWindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "documentation": {}
    },
    {
        "label": "subWindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "documentation": {}
    },
    {
        "label": "subWindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "documentation": {}
    },
    {
        "label": "subWindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "documentation": {}
    },
    {
        "label": "subWindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "documentation": {}
    },
    {
        "label": "subWindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "documentation": {}
    },
    {
        "label": "subWindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "documentation": {}
    },
    {
        "label": "WindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN          ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "documentation": {}
    },
    {
        "label": "subWinTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN          ",
        "documentation": {}
    },
    {
        "label": "externalIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS",
        "documentation": {}
    },
    {
        "label": "externalIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS",
        "documentation": {}
    },
    {
        "label": "externalTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "documentation": {}
    },
    {
        "label": "internalTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "documentation": {}
    },
    {
        "label": "WindowsTry",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN      ",
        "documentation": {}
    },
    {
        "label": "forError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR          ",
        "documentation": {}
    },
    {
        "label": "numeric_lexer",
        "importPath": "script.PARXER.LEXER_CONFIGURE             ",
        "description": "script.PARXER.LEXER_CONFIGURE             ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE             ",
        "documentation": {}
    },
    {
        "label": "lexer_and_parxer",
        "importPath": "script.PARXER.LEXER_CONFIGURE             ",
        "description": "script.PARXER.LEXER_CONFIGURE             ",
        "isExtraImport": true,
        "detail": "script.PARXER.LEXER_CONFIGURE             ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                   ",
        "description": "script.STDIN.LinuxSTDIN                   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                   ",
        "description": "script.STDIN.LinuxSTDIN                   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                   ",
        "description": "script.STDIN.LinuxSTDIN                   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                   ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN                   ",
        "description": "script.STDIN.LinuxSTDIN                   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN                   ",
        "documentation": {}
    },
    {
        "label": "case",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_   ",
        "documentation": {}
    },
    {
        "label": "switchError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_   ",
        "documentation": {}
    },
    {
        "label": "updating",
        "importPath": "updatingDataBase                          ",
        "description": "updatingDataBase                          ",
        "isExtraImport": true,
        "detail": "updatingDataBase                          ",
        "documentation": {}
    },
    {
        "label": "unless_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_       ",
        "documentation": {}
    },
    {
        "label": "switch_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_       ",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_",
        "documentation": {}
    },
    {
        "label": "tryError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_          ",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_          ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_          ",
        "documentation": {}
    },
    {
        "label": "updating",
        "importPath": "updatingDataBase                              ",
        "description": "updatingDataBase                              ",
        "isExtraImport": true,
        "detail": "updatingDataBase                              ",
        "documentation": {}
    },
    {
        "label": "frame",
        "importPath": "CythonModules.Linux          ",
        "description": "CythonModules.Linux          ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux          ",
        "documentation": {}
    },
    {
        "label": "mainFor",
        "importPath": "loop                                                  ",
        "description": "loop                                                  ",
        "isExtraImport": true,
        "detail": "loop                                                  ",
        "documentation": {}
    },
    {
        "label": "mainFor",
        "importPath": "loop                                                  ",
        "description": "loop                                                  ",
        "isExtraImport": true,
        "detail": "loop                                                  ",
        "documentation": {}
    },
    {
        "label": "mainFor",
        "importPath": "loop                                                  ",
        "description": "loop                                                  ",
        "isExtraImport": true,
        "detail": "loop                                                  ",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "CythonModules.Linux.PARTIAL_PARSER                    ",
        "description": "CythonModules.Linux.PARTIAL_PARSER                    ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux.PARTIAL_PARSER                    ",
        "documentation": {}
    },
    {
        "label": "transpiler",
        "importPath": "script.PARXER.WINParxer",
        "description": "script.PARXER.WINParxer",
        "isExtraImport": true,
        "detail": "script.PARXER.WINParxer",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                                 ",
        "description": "script.STDIN.WinSTDIN                                 ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                                 ",
        "documentation": {}
    },
    {
        "label": "stdin",
        "importPath": "script.STDIN.WinSTDIN                                 ",
        "description": "script.STDIN.WinSTDIN                                 ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                                 ",
        "documentation": {}
    },
    {
        "label": "if_stdin",
        "importPath": "script.STDIN.WinSTDIN                                 ",
        "description": "script.STDIN.WinSTDIN                                 ",
        "isExtraImport": true,
        "detail": "script.STDIN.WinSTDIN                                 ",
        "documentation": {}
    },
    {
        "label": "def_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS              ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS              ",
        "documentation": {}
    },
    {
        "label": "def_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS              ",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS              ",
        "documentation": {}
    },
    {
        "label": "class_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES                ",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES                ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES                ",
        "documentation": {}
    },
    {
        "label": "class_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES                ",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES                ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES                ",
        "documentation": {}
    },
    {
        "label": "master",
        "importPath": "doctest",
        "description": "doctest",
        "isExtraImport": true,
        "detail": "doctest",
        "documentation": {}
    },
    {
        "label": "parxer_assembly",
        "importPath": "script.PARXER             ",
        "description": "script.PARXER             ",
        "isExtraImport": true,
        "detail": "script.PARXER             ",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE          ",
        "description": "script.DATA_BASE          ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE          ",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE          ",
        "description": "script.DATA_BASE          ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE          ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.modulesLoading        ",
        "description": "src.modulesLoading        ",
        "isExtraImport": true,
        "detail": "src.modulesLoading        ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.modulesLoading        ",
        "description": "src.modulesLoading        ",
        "isExtraImport": true,
        "detail": "src.modulesLoading        ",
        "documentation": {}
    },
    {
        "label": "build_abs_Lib_path",
        "importPath": "src.modulesLoading        ",
        "description": "src.modulesLoading        ",
        "isExtraImport": true,
        "detail": "src.modulesLoading        ",
        "documentation": {}
    },
    {
        "label": "loading",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS",
        "documentation": {}
    },
    {
        "label": "get_var_name",
        "importPath": "script.PARXER.VAR_NAME                                ",
        "description": "script.PARXER.VAR_NAME                                ",
        "isExtraImport": true,
        "detail": "script.PARXER.VAR_NAME                                ",
        "documentation": {}
    },
    {
        "label": "get_var_name",
        "importPath": "script.PARXER.VAR_NAME                            ",
        "description": "script.PARXER.VAR_NAME                            ",
        "isExtraImport": true,
        "detail": "script.PARXER.VAR_NAME                            ",
        "documentation": {}
    },
    {
        "label": "show_data",
        "importPath": "script.PARXER.PRINT                               ",
        "description": "script.PARXER.PRINT                               ",
        "isExtraImport": true,
        "detail": "script.PARXER.PRINT                               ",
        "documentation": {}
    },
    {
        "label": "for_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "documentation": {}
    },
    {
        "label": "for_block_treatment",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "documentation": {}
    },
    {
        "label": "for_if",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "documentation": {}
    },
    {
        "label": "for_begin",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "documentation": {}
    },
    {
        "label": "for_statement",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "documentation": {}
    },
    {
        "label": "for_switch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "documentation": {}
    },
    {
        "label": "for_unless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "documentation": {}
    },
    {
        "label": "for_try",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "documentation": {}
    },
    {
        "label": "end_for_else",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_              ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsIF",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS   ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS   ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS   ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS       ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS       ",
        "documentation": {}
    },
    {
        "label": "WindowsUnless",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS       ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS       ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS       ",
        "documentation": {}
    },
    {
        "label": "WindowsSwitch",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS",
        "documentation": {}
    },
    {
        "label": "class_interpreter",
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES            ",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES            ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES            ",
        "documentation": {}
    },
    {
        "label": "modules",
        "importPath": "src.modulesLoading                                ",
        "description": "src.modulesLoading                                ",
        "isExtraImport": true,
        "detail": "src.modulesLoading                                ",
        "documentation": {}
    },
    {
        "label": "moduleMain",
        "importPath": "src.modulesLoading                                ",
        "description": "src.modulesLoading                                ",
        "isExtraImport": true,
        "detail": "src.modulesLoading                                ",
        "documentation": {}
    },
    {
        "label": "WindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN      ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN      ",
        "documentation": {}
    },
    {
        "label": "subWindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN      ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN      ",
        "documentation": {}
    },
    {
        "label": "subWindowsFor",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN      ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN      ",
        "documentation": {}
    },
    {
        "label": "for_analyze",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN      ",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN      ",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN      ",
        "documentation": {}
    },
    {
        "label": "windowsDef",
        "importPath": "src.functions.windows                             ",
        "description": "src.functions.windows                             ",
        "isExtraImport": true,
        "detail": "src.functions.windows                             ",
        "documentation": {}
    },
    {
        "label": "subWindowsDef",
        "importPath": "src.functions.windows                             ",
        "description": "src.functions.windows                             ",
        "isExtraImport": true,
        "detail": "src.functions.windows                             ",
        "documentation": {}
    },
    {
        "label": "updatingDef",
        "importPath": "src.functions.windows                             ",
        "description": "src.functions.windows                             ",
        "isExtraImport": true,
        "detail": "src.functions.windows                             ",
        "documentation": {}
    },
    {
        "label": "internalDef",
        "importPath": "src.functions.windows                             ",
        "description": "src.functions.windows                             ",
        "isExtraImport": true,
        "detail": "src.functions.windows                             ",
        "documentation": {}
    },
    {
        "label": "updatingDef",
        "importPath": "src.functions.windows                             ",
        "description": "src.functions.windows                             ",
        "isExtraImport": true,
        "detail": "src.functions.windows                             ",
        "documentation": {}
    },
    {
        "label": "externalDef",
        "importPath": "src.functions.windows                             ",
        "description": "src.functions.windows                             ",
        "isExtraImport": true,
        "detail": "src.functions.windows                             ",
        "documentation": {}
    },
    {
        "label": "windowsClass",
        "importPath": "src.classes.windows                               ",
        "description": "src.classes.windows                               ",
        "isExtraImport": true,
        "detail": "src.classes.windows                               ",
        "documentation": {}
    },
    {
        "label": "internalClass",
        "importPath": "src.classes.windows                               ",
        "description": "src.classes.windows                               ",
        "isExtraImport": true,
        "detail": "src.classes.windows                               ",
        "documentation": {}
    },
    {
        "label": "externalClass",
        "importPath": "src.classes.windows                               ",
        "description": "src.classes.windows                               ",
        "isExtraImport": true,
        "detail": "src.classes.windows                               ",
        "documentation": {}
    },
    {
        "label": "mainFor",
        "importPath": "loop                                              ",
        "description": "loop                                              ",
        "isExtraImport": true,
        "detail": "loop                                              ",
        "documentation": {}
    },
    {
        "label": "mainFor",
        "importPath": "loop                                              ",
        "description": "loop                                              ",
        "isExtraImport": true,
        "detail": "loop                                              ",
        "documentation": {}
    },
    {
        "label": "mainFor",
        "importPath": "loop                                              ",
        "description": "loop                                              ",
        "isExtraImport": true,
        "detail": "loop                                              ",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bm_configure",
        "description": "bm_configure",
        "detail": "bm_configure",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE",
        "description": "script.DATA_BASE",
        "isExtraImport": true,
        "detail": "script.DATA_BASE",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys         \t\t\t\t           ",
        "description": "sys         \t\t\t\t           ",
        "isExtraImport": true,
        "detail": "sys         \t\t\t\t           ",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time        \t\t\t\t           ",
        "description": "time        \t\t\t\t           ",
        "isExtraImport": true,
        "detail": "time        \t\t\t\t           ",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime    \t\t\t\t           ",
        "description": "datetime    \t\t\t\t           ",
        "isExtraImport": true,
        "detail": "datetime    \t\t\t\t           ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script        \t\t               ",
        "description": "script        \t\t               ",
        "isExtraImport": true,
        "detail": "script        \t\t               ",
        "documentation": {}
    },
    {
        "label": "ascii",
        "importPath": "script.STDIN.LinuxSTDIN \t           ",
        "description": "script.STDIN.LinuxSTDIN \t           ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN \t           ",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "statistics",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "statistics",
        "description": "statistics",
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.transform                                 ",
        "description": "src.transform                                 ",
        "isExtraImport": true,
        "detail": "src.transform                                 ",
        "documentation": {}
    },
    {
        "label": "matrix_statistics",
        "importPath": "src.transform                                 ",
        "description": "src.transform                                 ",
        "isExtraImport": true,
        "detail": "src.transform                                 ",
        "documentation": {}
    },
    {
        "label": "datatype",
        "importPath": "src.transform                                 ",
        "description": "src.transform                                 ",
        "isExtraImport": true,
        "detail": "src.transform                                 ",
        "documentation": {}
    },
    {
        "label": "new",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN \t                   ",
        "description": "script.STDIN.LinuxSTDIN \t                   ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN \t                   ",
        "documentation": {}
    },
    {
        "label": "windowsDef",
        "importPath": "src.functions.windows                     ",
        "description": "src.functions.windows                     ",
        "isExtraImport": true,
        "detail": "src.functions.windows                     ",
        "documentation": {}
    },
    {
        "label": "windowsDef",
        "importPath": "src.functions.windows                     ",
        "description": "src.functions.windows                     ",
        "isExtraImport": true,
        "detail": "src.functions.windows                     ",
        "documentation": {}
    },
    {
        "label": "subWindowsClass",
        "importPath": "src.classes.windows                       ",
        "description": "src.classes.windows                       ",
        "isExtraImport": true,
        "detail": "src.classes.windows                       ",
        "documentation": {}
    },
    {
        "label": "updatingClasses",
        "importPath": "src.classes                                       ",
        "description": "src.classes                                       ",
        "isExtraImport": true,
        "detail": "src.classes                                       ",
        "documentation": {}
    },
    {
        "label": "updatingClasses",
        "importPath": "src.classes                                       ",
        "description": "src.classes                                       ",
        "isExtraImport": true,
        "detail": "src.classes                                       ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.classes                                       ",
        "description": "src.classes                                       ",
        "isExtraImport": true,
        "detail": "src.classes                                       ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script  ",
        "description": "script  ",
        "isExtraImport": true,
        "detail": "script  ",
        "documentation": {}
    },
    {
        "label": "errorClass",
        "importPath": "src.classes           ",
        "description": "src.classes           ",
        "isExtraImport": true,
        "detail": "src.classes           ",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "src.classes           ",
        "description": "src.classes           ",
        "isExtraImport": true,
        "detail": "src.classes           ",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN",
        "description": "script.STDIN.LinuxSTDIN",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN",
        "documentation": {}
    },
    {
        "label": "readchar",
        "importPath": "script.STDIN.LinuxSTDIN",
        "description": "script.STDIN.LinuxSTDIN",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN",
        "documentation": {}
    },
    {
        "label": "IfError",
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_",
        "isExtraImport": true,
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_",
        "documentation": {}
    },
    {
        "label": "updatingDef",
        "importPath": "src.functions.windows",
        "description": "src.functions.windows",
        "isExtraImport": true,
        "detail": "src.functions.windows",
        "documentation": {}
    },
    {
        "label": "externalDef",
        "importPath": "src.functions.windows",
        "description": "src.functions.windows",
        "isExtraImport": true,
        "detail": "src.functions.windows",
        "documentation": {}
    },
    {
        "label": "get_all_fix_names",
        "importPath": "lib2to3.refactor",
        "description": "lib2to3.refactor",
        "isExtraImport": true,
        "detail": "lib2to3.refactor",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.functions                 ",
        "description": "src.functions                 ",
        "isExtraImport": true,
        "detail": "src.functions                 ",
        "documentation": {}
    },
    {
        "label": "updating_data",
        "importPath": "src.functions                 ",
        "description": "src.functions                 ",
        "isExtraImport": true,
        "detail": "src.functions                 ",
        "documentation": {}
    },
    {
        "label": "type_of_data",
        "importPath": "src.functions                 ",
        "description": "src.functions                 ",
        "isExtraImport": true,
        "detail": "src.functions                 ",
        "documentation": {}
    },
    {
        "label": "jit",
        "importPath": "numba                         ",
        "description": "numba                         ",
        "isExtraImport": true,
        "detail": "numba                         ",
        "documentation": {}
    },
    {
        "label": "jitclass",
        "importPath": "numba.experimental            ",
        "description": "numba.experimental            ",
        "isExtraImport": true,
        "detail": "numba.experimental            ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.functions                     ",
        "description": "src.functions                     ",
        "isExtraImport": true,
        "detail": "src.functions                     ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.functions                     ",
        "description": "src.functions                     ",
        "isExtraImport": true,
        "detail": "src.functions                     ",
        "documentation": {}
    },
    {
        "label": "listdir",
        "importPath": "os                        ",
        "description": "os                        ",
        "isExtraImport": true,
        "detail": "os                        ",
        "documentation": {}
    },
    {
        "label": "isfile",
        "importPath": "os.path                   ",
        "description": "os.path                   ",
        "isExtraImport": true,
        "detail": "os.path                   ",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib                   ",
        "description": "pathlib                   ",
        "isExtraImport": true,
        "detail": "pathlib                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.modulesLoading            ",
        "description": "src.modulesLoading            ",
        "isExtraImport": true,
        "detail": "src.modulesLoading            ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN    ",
        "description": "script.STDIN.LinuxSTDIN    ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN    ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.transform",
        "description": "src.transform",
        "isExtraImport": true,
        "detail": "src.transform",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "src.transform                     ",
        "description": "src.transform                     ",
        "isExtraImport": true,
        "detail": "src.transform                     ",
        "documentation": {}
    },
    {
        "label": "matrix_modules",
        "importPath": "src.transform                     ",
        "description": "src.transform                     ",
        "isExtraImport": true,
        "detail": "src.transform                     ",
        "documentation": {}
    },
    {
        "label": "statistics",
        "importPath": "src.transform                     ",
        "description": "src.transform                     ",
        "isExtraImport": true,
        "detail": "src.transform                     ",
        "documentation": {}
    },
    {
        "label": "listdir",
        "importPath": "os                            ",
        "description": "os                            ",
        "isExtraImport": true,
        "detail": "os                            ",
        "documentation": {}
    },
    {
        "label": "isfile",
        "importPath": "os.path                       ",
        "description": "os.path                       ",
        "isExtraImport": true,
        "detail": "os.path                       ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement.error                ",
        "description": "statement.error                ",
        "isExtraImport": true,
        "detail": "statement.error                ",
        "documentation": {}
    },
    {
        "label": "tryError",
        "importPath": "statement.error                ",
        "description": "statement.error                ",
        "isExtraImport": true,
        "detail": "statement.error                ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement.error                ",
        "description": "statement.error                ",
        "isExtraImport": true,
        "detail": "statement.error                ",
        "documentation": {}
    },
    {
        "label": "tryError",
        "importPath": "statement.error                ",
        "description": "statement.error                ",
        "isExtraImport": true,
        "detail": "statement.error                ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement.error                ",
        "description": "statement.error                ",
        "isExtraImport": true,
        "detail": "statement.error                ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement.error                ",
        "description": "statement.error                ",
        "isExtraImport": true,
        "detail": "statement.error                ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                         ",
        "description": "script                         ",
        "isExtraImport": true,
        "detail": "script                         ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                         ",
        "description": "script                         ",
        "isExtraImport": true,
        "detail": "script                         ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                         ",
        "description": "script                         ",
        "isExtraImport": true,
        "detail": "script                         ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                         ",
        "description": "script                         ",
        "isExtraImport": true,
        "detail": "script                         ",
        "documentation": {}
    },
    {
        "label": "particular_str_selection",
        "importPath": "script.LEXER                   ",
        "description": "script.LEXER                   ",
        "isExtraImport": true,
        "detail": "script.LEXER                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement.loop                        ",
        "description": "statement.loop                        ",
        "isExtraImport": true,
        "detail": "statement.loop                        ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement.error                                   ",
        "description": "statement.error                                   ",
        "isExtraImport": true,
        "detail": "statement.error                                   ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement.error                                   ",
        "description": "statement.error                                   ",
        "isExtraImport": true,
        "detail": "statement.error                                   ",
        "documentation": {}
    },
    {
        "label": "externalBlocks",
        "importPath": "statement.comment              ",
        "description": "statement.comment              ",
        "isExtraImport": true,
        "detail": "statement.comment              ",
        "documentation": {}
    },
    {
        "label": "externalBlocks",
        "importPath": "statement.comment              ",
        "description": "statement.comment              ",
        "isExtraImport": true,
        "detail": "statement.comment              ",
        "documentation": {}
    },
    {
        "label": "structure",
        "importPath": "statement.comment              ",
        "description": "statement.comment              ",
        "isExtraImport": true,
        "detail": "statement.comment              ",
        "documentation": {}
    },
    {
        "label": "externalBlocks",
        "importPath": "statement.comment              ",
        "description": "statement.comment              ",
        "isExtraImport": true,
        "detail": "statement.comment              ",
        "documentation": {}
    },
    {
        "label": "mainStatement",
        "importPath": "statement                      ",
        "description": "statement                      ",
        "isExtraImport": true,
        "detail": "statement                      ",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "statement.error              ",
        "description": "statement.error              ",
        "isExtraImport": true,
        "detail": "statement.error              ",
        "documentation": {}
    },
    {
        "label": "control_string",
        "importPath": "script                       ",
        "description": "script                       ",
        "isExtraImport": true,
        "detail": "script                       ",
        "documentation": {}
    },
    {
        "label": "externalBlocks",
        "importPath": "statement.comment            ",
        "description": "statement.comment            ",
        "isExtraImport": true,
        "detail": "statement.comment            ",
        "documentation": {}
    },
    {
        "label": "parxer_for_interpreter",
        "importPath": "script.PARXER.WINParxer   ",
        "description": "script.PARXER.WINParxer   ",
        "isExtraImport": true,
        "detail": "script.PARXER.WINParxer   ",
        "documentation": {}
    },
    {
        "label": "PyInstaller.__main__",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyInstaller.__main__",
        "description": "PyInstaller.__main__",
        "detail": "PyInstaller.__main__",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "BM_ERRORS   ",
        "description": "BM_ERRORS   ",
        "isExtraImport": true,
        "detail": "BM_ERRORS   ",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "BM_ERRORS   ",
        "description": "BM_ERRORS   ",
        "isExtraImport": true,
        "detail": "BM_ERRORS   ",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "alive_progress",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "alive_progress",
        "description": "alive_progress",
        "detail": "alive_progress",
        "documentation": {}
    },
    {
        "label": "Combobox",
        "importPath": "tkinter.ttk",
        "description": "tkinter.ttk",
        "isExtraImport": true,
        "detail": "tkinter.ttk",
        "documentation": {}
    },
    {
        "label": "Progressbar",
        "importPath": "tkinter.ttk",
        "description": "tkinter.ttk",
        "isExtraImport": true,
        "detail": "tkinter.ttk",
        "documentation": {}
    },
    {
        "label": "BM_TAR",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "BM_TAR",
        "description": "BM_TAR",
        "detail": "BM_TAR",
        "documentation": {}
    },
    {
        "label": "test",
        "importPath": "IDE.EDITOR                                            ",
        "description": "IDE.EDITOR                                            ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                                            ",
        "documentation": {}
    },
    {
        "label": "com_and_decom",
        "importPath": "com_and_decom",
        "description": "com_and_decom",
        "isExtraImport": true,
        "detail": "com_and_decom",
        "documentation": {}
    },
    {
        "label": "shutil,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil.",
        "description": "shutil.",
        "detail": "shutil.",
        "documentation": {}
    },
    {
        "label": "python_version",
        "importPath": "platform",
        "description": "platform",
        "isExtraImport": true,
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "abs_paths",
        "importPath": "site",
        "description": "site",
        "isExtraImport": true,
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "LinuxMain_in_testing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "LinuxMain_in_testing",
        "description": "LinuxMain_in_testing",
        "detail": "LinuxMain_in_testing",
        "documentation": {}
    },
    {
        "label": "data_base",
        "importPath": "script.DATA_BASE            ",
        "description": "script.DATA_BASE            ",
        "isExtraImport": true,
        "detail": "script.DATA_BASE            ",
        "documentation": {}
    },
    {
        "label": "bm_configure",
        "importPath": "script.STDIN.LinuxSTDIN     ",
        "description": "script.STDIN.LinuxSTDIN     ",
        "isExtraImport": true,
        "detail": "script.STDIN.LinuxSTDIN     ",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib                     ",
        "description": "pathlib                     ",
        "isExtraImport": true,
        "detail": "pathlib                     ",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "IDE.EDITOR                  ",
        "description": "IDE.EDITOR                  ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                  ",
        "documentation": {}
    },
    {
        "label": "test",
        "importPath": "IDE.EDITOR                                        ",
        "description": "IDE.EDITOR                                        ",
        "isExtraImport": true,
        "detail": "IDE.EDITOR                                        ",
        "documentation": {}
    },
    {
        "label": "num_val",
        "importPath": "script.PARXER.WINParxer                           ",
        "description": "script.PARXER.WINParxer                           ",
        "isExtraImport": true,
        "detail": "script.PARXER.WINParxer                           ",
        "documentation": {}
    },
    {
        "label": "transpiler",
        "importPath": "script.PARXER.WINParxer                           ",
        "description": "script.PARXER.WINParxer                           ",
        "isExtraImport": true,
        "detail": "script.PARXER.WINParxer                           ",
        "documentation": {}
    },
    {
        "label": "mathematics",
        "importPath": "script.MATHS                                      ",
        "description": "script.MATHS                                      ",
        "isExtraImport": true,
        "detail": "script.MATHS                                      ",
        "documentation": {}
    },
    {
        "label": "NumeriCal",
        "importPath": "CythonModules.Linux                               ",
        "description": "CythonModules.Linux                               ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux                               ",
        "documentation": {}
    },
    {
        "label": "parserError",
        "importPath": "CythonModules.Linux.PARTIAL_PARSER                ",
        "description": "CythonModules.Linux.PARTIAL_PARSER                ",
        "isExtraImport": true,
        "detail": "CythonModules.Linux.PARTIAL_PARSER                ",
        "documentation": {}
    },
    {
        "label": "TimedRotatingFileHandler",
        "importPath": "logging.handlers                                  ",
        "description": "logging.handlers                                  ",
        "isExtraImport": true,
        "detail": "logging.handlers                                  ",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "threading                                         ",
        "description": "threading                                         ",
        "isExtraImport": true,
        "detail": "threading                                         ",
        "documentation": {}
    },
    {
        "label": "njit",
        "importPath": "numba                                             ",
        "description": "numba                                             ",
        "isExtraImport": true,
        "detail": "numba                                             ",
        "documentation": {}
    },
    {
        "label": "jit",
        "importPath": "numba                                             ",
        "description": "numba                                             ",
        "isExtraImport": true,
        "detail": "numba                                             ",
        "documentation": {}
    },
    {
        "label": "cfunc",
        "importPath": "numba                                             ",
        "description": "numba                                             ",
        "isExtraImport": true,
        "detail": "numba                                             ",
        "documentation": {}
    },
    {
        "label": "errors",
        "importPath": "BM_ERRORS                                         ",
        "description": "BM_ERRORS                                         ",
        "isExtraImport": true,
        "detail": "BM_ERRORS                                         ",
        "documentation": {}
    },
    {
        "label": "BlackMamba",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "BlackMamba",
        "description": "BlackMamba",
        "detail": "BlackMamba",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "cx_Freeze",
        "description": "cx_Freeze",
        "isExtraImport": true,
        "detail": "cx_Freeze",
        "documentation": {}
    },
    {
        "label": "Executable",
        "importPath": "cx_Freeze",
        "description": "cx_Freeze",
        "isExtraImport": true,
        "detail": "cx_Freeze",
        "documentation": {}
    },
    {
        "label": "mamba_error",
        "kind": 6,
        "importPath": "BM_ERRORS.errors",
        "description": "BM_ERRORS.errors",
        "peekOfCode": "class mamba_error:\n    def __init__(self, line: int = 0):\n        self.r = bm.init.reset \n        self.w = bm.fg.rbg(255, 255, 255)\n        self.y = bm.fg.rbg(255,255,0)\n        self.c = bm.fg.rbg(255, 0, 255)\n        self.m = bm.fg.rbg(0, 255, 255)\n        self.line = 0\n    def ERROR1( self, string : str ):\n        error = '{}{}. {}line: {}{}'.format( self.m, string, self.w, self.y, self.line)",
        "detail": "BM_ERRORS.errors",
        "documentation": {}
    },
    {
        "label": "action",
        "kind": 2,
        "importPath": "BM_INSTALL.action",
        "description": "BM_INSTALL.action",
        "peekOfCode": "def action( frame1, frame2, root,  main_root, ico_path, license ):\n    List = ['Install BLACK MAMBA', \"Uninstall BLACK MAMBA\", \"Repair BLACK MAMBA\"]\n    frame0 =  LabelFrame(root,  bd = 5, width=390, height=150, relief=FLAT, text=\"BLACK MAMBA PROGRAMM INSTALLATION\",\n                         font=(\"calibri\",10, 'bold'), bg='white')\n    frame1 =  Frame(root,  bd = 5, width=390, height=50, relief=FLAT,  bg='white')\n    frame2 =  Frame(root,  bd = 5, width=390, height=50, relief=FLAT,  bg='white')\n    frame3 =  Frame(root,  bd = 5, width=390, height=50, relief=FLAT,  bg='white')\n    frame0.place(x=0, y=0, width=390, height=150 )\n    frame1.place(x=0, y=150, width=300, height=50  )\n    frame2.place(x=0, y=210, width=300, height=50 )",
        "detail": "BM_INSTALL.action",
        "documentation": {}
    },
    {
        "label": "back",
        "kind": 2,
        "importPath": "BM_INSTALL.action",
        "description": "BM_INSTALL.action",
        "peekOfCode": "def back(frame1, frame2, root, main_root, ico_path, root_path, frame0, license): \n    global check_bnt_int\n    List    = ['Select location']\n    height  = 40\n    FRAME   =  Frame(main_root,  bd = 5, width=400, height=350, relief=RAISED, bg=\"white\")\n    FRAME.place(x=200, y=0)\n    FRAME0  =  Frame(main_root,  bd = 5, width=400, height=50, relief=RAISED, bg=\"white\")\n    FRAME0.place(x=200, y=360)\n    frame0  =  LabelFrame(FRAME, bd=5, width=390, height=height, relief=FLAT, text=\"BLACK MAMBA PROGRAMM INSTALLING\",\n                        font = ('calibri', 10, 'bold'), bg=\"white\")",
        "detail": "BM_INSTALL.action",
        "documentation": {}
    },
    {
        "label": "installation",
        "kind": 2,
        "importPath": "BM_INSTALL.action",
        "description": "BM_INSTALL.action",
        "peekOfCode": "def installation(frame1, frame2, root, main_root, ico_path, frame0, license):\n    _scrooll_bar_ = scroll_bar.scroll_bar(frame0, \"\")\n    root_path    = os.path.abspath(os.curdir)\n    back(frame1, frame2, root, main_root, ico_path, root_path, frame0, license)\ndef uninstall_bm(frame1, frame2, root, main_root, ico_path, license):\n    btn, label, frame = unstall.unstall_new_window(frame1, frame2, root, main_root, ico_path, license)\n    #btn.config(state=DISABLED)\n    \"\"\"\n    try:\n        root_path  = cbm.mamba()",
        "detail": "BM_INSTALL.action",
        "documentation": {}
    },
    {
        "label": "uninstall_bm",
        "kind": 2,
        "importPath": "BM_INSTALL.action",
        "description": "BM_INSTALL.action",
        "peekOfCode": "def uninstall_bm(frame1, frame2, root, main_root, ico_path, license):\n    btn, label, frame = unstall.unstall_new_window(frame1, frame2, root, main_root, ico_path, license)\n    #btn.config(state=DISABLED)\n    \"\"\"\n    try:\n        root_path  = cbm.mamba()\n        if root_path is not None:\n            if type(root_path) == type(str()):\n                shutil.rmtree(root_path) \n                entree = Entry(frame,  font=('arial', 10, 'bold'), foreground='blue', width=50 ) ",
        "detail": "BM_INSTALL.action",
        "documentation": {}
    },
    {
        "label": "dialog",
        "kind": 2,
        "importPath": "BM_INSTALL.action",
        "description": "BM_INSTALL.action",
        "peekOfCode": "def dialog(frame, frame_, data, main_root):   \n    __path__root = filedialog.askdirectory()\n    root_path    = os.path.abspath(os.curdir)\n    name = 'black_mamba_location'\n    if __path__root :\n        ___path___ = __path__root\n        __path__root += \"/BlackMamba\"\n        #list_dir = os.listdir(__path__root+\"/BM_INST/\")\n        if os.path.isdir(__path__root ) is False:\n            os.mkdir(__path__root)",
        "detail": "BM_INSTALL.action",
        "documentation": {}
    },
    {
        "label": "key_activation",
        "kind": 2,
        "importPath": "BM_INSTALL.action",
        "description": "BM_INSTALL.action",
        "peekOfCode": "def key_activation(value, frame, root_path, main_root, path_destination_folder):\n    frame.destroy()\n    frame  =  Frame(main_root,  bd = 5, width=400, height=50, relief=RAISED, bg=\"white\")\n    frame.place(x=200, y=360)\n    if value.get() == 1: \n        install_btn = Button(frame, text='install', state=NORMAL, width=9, relief=GROOVE, \n                             command=lambda : unzip.unzip_file(root_path, read_location(path_destination_folder), main_root))\n        install_btn.place(x=0, y=4)\n    else: \n        install_btn = Button(frame, text='install', state=DISABLED, width=9, relief=GROOVE,",
        "detail": "BM_INSTALL.action",
        "documentation": {}
    },
    {
        "label": "read_location_un",
        "kind": 2,
        "importPath": "BM_INSTALL.action",
        "description": "BM_INSTALL.action",
        "peekOfCode": "def read_location_un(path_destination_folder):\n    name = name = 'black_mamba_location'\n    path = path_destination_folder + f\"/BlackMamba/BM_INSTALL/{name}/path.bm\"\n    with open(path, 'r') as f:\n        line = f.readline().rstrip()\n    f.close()\n    return line\ndef read_location(path_destination_folder):\n    return path_destination_folder",
        "detail": "BM_INSTALL.action",
        "documentation": {}
    },
    {
        "label": "read_location",
        "kind": 2,
        "importPath": "BM_INSTALL.action",
        "description": "BM_INSTALL.action",
        "peekOfCode": "def read_location(path_destination_folder):\n    return path_destination_folder",
        "detail": "BM_INSTALL.action",
        "documentation": {}
    },
    {
        "label": "mamba",
        "kind": 2,
        "importPath": "BM_INSTALL.check_if_bm_is_installed",
        "description": "BM_INSTALL.check_if_bm_is_installed",
        "peekOfCode": "def mamba(path_destination_folder):\n    root_path  = path_destination_folder+\"/BlackMamba\" #os.path.abspath(os.curdir)\n    if os.path.isdir(root_path) is True:\n        name  = 'black_mamba_location'\n        direct_access = root_path+f\"/BM_INSTALL/{name}/path.bm\"\n        indirect_access = root_path+f\"/BM_INSTALL/{name}/install.bm\"\n        list_dir = os.listdir(root_path+\"/BM_INSTALL/\")\n        if name in list_dir:\n            if os.path.isfile(direct_access) is True:\n                __bool__ = os.stat(direct_access)==0",
        "detail": "BM_INSTALL.check_if_bm_is_installed",
        "documentation": {}
    },
    {
        "label": "commands_desactivation",
        "kind": 2,
        "importPath": "BM_INSTALL.commands",
        "description": "BM_INSTALL.commands",
        "peekOfCode": "def commands_desactivation(frame1, frame2, root):     \n    frame1.destroy()\n    frame2.destroy()\n    frame1 = LabelFrame(root, relief=FLAT, bd = 5, width=390, height=350, \n                            text='BLACK MAMBA PROGRAMM INSTALLATION', font=(\"calibri\", 10, 'bold'), bg=\"white\")\n    frame2 =  Frame(root, relief=FLAT, bd = 5, width=390, height=45, bg=\"white\")\n    frame1.place(x=0, y=0, width=390, height=350) \n    frame2.place(x=0, y=360, width=390, height=45)\n    List = ['Select location']\n    height = 40",
        "detail": "BM_INSTALL.commands",
        "documentation": {}
    },
    {
        "label": "configure",
        "kind": 2,
        "importPath": "BM_INSTALL.left_frame",
        "description": "BM_INSTALL.left_frame",
        "peekOfCode": "def configure(root, figure):\n    frame = Frame(root, relief=FLAT, width=190, height=390, bg ='ivory')\n    frame.place(x=0, y=0)\n    path = figure \n    img  = Image.open( path ) \n    img = img.resize((190, 390), Image.ANTIALIAS ) \n    img  = ImageTk.PhotoImage( img ) \n    panel = Label(frame, image=img) \n    panel.image  = img \n    panel.pack()",
        "detail": "BM_INSTALL.left_frame",
        "documentation": {}
    },
    {
        "label": "right",
        "kind": 6,
        "importPath": "BM_INSTALL.right_frame",
        "description": "BM_INSTALL.right_frame",
        "peekOfCode": "class right:\n    def __init__(self, ico_path, main_root) :\n        self.ico_path = ico_path\n        self.main_root = main_root\n    def cancel(self, root):\n        self.cancel = Button(root, width=10, text='cancel', command =  lambda : right(self.ico_path, self.main_root).destroy_root(root, \n                                                        self.main_root), state=NORMAL, relief=GROOVE)\n        self.cancel.place(x=280, y=0)\n    def destroy_root( self, root,  main_root ):    \n        def yes(root1, root2, root3):",
        "detail": "BM_INSTALL.right_frame",
        "documentation": {}
    },
    {
        "label": "sel",
        "kind": 2,
        "importPath": "BM_INSTALL.right_frame",
        "description": "BM_INSTALL.right_frame",
        "peekOfCode": "def sel( value, frame1, frame2, root,  main_root, ico_path, license ):        \n    if value.get() == 1: \n        next_btn = Button(frame2, text='next', state=NORMAL, width=9, relief=GROOVE, \n                command=lambda: nex_section(frame1=frame1, frame2=frame2, root=root, main_root=main_root, ico_path=ico_path, license=license))\n        next_btn.place(x=75, y=0)\n    else:\n        nex_btn = Button(frame2, text='next', state=DISABLED, width=9, relief=GROOVE)\n        nex_btn.place(x=75, y=0)\n    prev_btn = Button(frame2, text='previous', state=DISABLED, width=9, relief=GROOVE)\n    prev_btn.place(x=180, y=0)",
        "detail": "BM_INSTALL.right_frame",
        "documentation": {}
    },
    {
        "label": "nex_section",
        "kind": 2,
        "importPath": "BM_INSTALL.right_frame",
        "description": "BM_INSTALL.right_frame",
        "peekOfCode": "def nex_section(frame1, frame2,  root, main_root, ico_path,license):\n    frame1.destroy()\n    frame2.destroy()\n    frame1 = LabelFrame(root, relief=FLAT, bd = 5, width=390, height=350, \n                            text='BLACK MAMBA PROGRAMM INSTALLATION', font=(\"calibri\", 10, 'bold'), bg='white')\n    frame2 =  Frame(root, relief=FLAT, bd = 5, width=390, height=50,  bg='white')\n    frame1.place(x=0, y=0, width=390, height=350) \n    frame2.place(x=0, y=360, width=390, height=50)\n    action.action(frame1, frame2,  root, main_root, ico_path, license)\n    prev_btn = Button(frame2, text='next', state=DISABLED, width=9, relief=GROOVE)",
        "detail": "BM_INSTALL.right_frame",
        "documentation": {}
    },
    {
        "label": "scrollbar_right",
        "kind": 2,
        "importPath": "BM_INSTALL.right_frame",
        "description": "BM_INSTALL.right_frame",
        "peekOfCode": "def scrollbar_right(frame_right, main_root, ico_path, license):\n    sub_frame_right1 =  LabelFrame(frame_right, relief=FLAT, bd = 5, width=390, height=350, \n                            text='BLACK MAMBA LICENSE', font=(\"calibri\", 10, 'bold'))\n    sub_frame_right2 =  Frame(frame_right, relief=FLAT, bd = 5, width=390, height=40)    \n    sub_frame_right1.place(x=0, y=0, width=390, height=350) \n    sub_frame_right2.place(x=0, y=360, width=390, height=40) \n    scrollbar_v = Scrollbar(sub_frame_right1, orient=VERTICAL)\n    scrollbar_v.pack(side=RIGHT, fill=BOTH, ipady=5)\n    scrollbar_h =  Scrollbar(sub_frame_right1, orient=HORIZONTAL)\n    scrollbar_h.pack(fill=BOTH, side=BOTTOM, ipadx=5)",
        "detail": "BM_INSTALL.right_frame",
        "documentation": {}
    },
    {
        "label": "scroll_bar",
        "kind": 2,
        "importPath": "BM_INSTALL.scroll_bar",
        "description": "BM_INSTALL.scroll_bar",
        "peekOfCode": "def scroll_bar(frame, char):\n    scrollbar_v = Scrollbar(frame, orient=VERTICAL)\n    scrollbar_v.pack(side=RIGHT, fill=BOTH, ipady=5)\n    scrollbar_h = Scrollbar(frame, orient=HORIZONTAL)\n    scrollbar_h.pack(side=BOTTOM, fill=BOTH, ipadx=5)\n    my_list = Listbox(frame, yscrollcommand=scrollbar_v.set, xscrollcommand=scrollbar_h.set)\n    my_list.insert(END, \"   \")\n    my_list.pack(fill=BOTH, expand=YES) \n    scrollbar_v.config(command=my_list.yview)\n    scrollbar_h.config(command=my_list.xview) ",
        "detail": "BM_INSTALL.scroll_bar",
        "documentation": {}
    },
    {
        "label": "unstall_new_window",
        "kind": 2,
        "importPath": "BM_INSTALL.unstall",
        "description": "BM_INSTALL.unstall",
        "peekOfCode": "def unstall_new_window(frame1, frame2, root, main_root, ico_path, license): \n    global check_bnt_int\n    root_path = os.path.abspath(os.curdir)\n    List    = ['Select location']\n    height  = 40\n    FRAME   =  Frame(main_root,  bd = 5, width=400, height=350, relief=RAISED, bg=\"white\")\n    FRAME.place(x=200, y=0)\n    FRAME0  =  Frame(main_root,  bd = 5, width=400, height=50, relief=RAISED, bg=\"white\")\n    FRAME0.place(x=200, y=360)\n    frame0  =  LabelFrame(FRAME, bd=5, width=390, height=height, relief=FLAT, text=\"BLACK MAMBA UNINSTALLATION PROGRAMM\",",
        "detail": "BM_INSTALL.unstall",
        "documentation": {}
    },
    {
        "label": "PATH",
        "kind": 2,
        "importPath": "BM_INSTALL.unstall",
        "description": "BM_INSTALL.unstall",
        "peekOfCode": "def PATH(frame, frame_, btn,  FRAME ):\n    height = 5\n    frame.destroy()\n    frame = Frame(FRAME, bd=5, width=400, height=height, relief=FLAT, bg='white' )\n    __path__root = filedialog.askdirectory()  \n    if __path__root:\n        try:\n            Path1 = __path__root  + \"/BlackMamba\"\n            if \"BlackMamba\" in os.listdir(__path__root):\n                if os.path.isdir(Path1) is True:",
        "detail": "BM_INSTALL.unstall",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 2,
        "importPath": "BM_INSTALL.unstall",
        "description": "BM_INSTALL.unstall",
        "peekOfCode": "def message(frame, m = 'Black Mamba is not already installed !'  ):\n    entree = Entry(frame,  font=('arial', 10, 'bold'), foreground='blue', width=50 ) \n    entree.pack()\n    entree.insert(0, '')\n    entree.delete(0, END)\n    entree.insert(0, f\"{m}\")\n    entree.config(state=DISABLED, bg='ivory')",
        "detail": "BM_INSTALL.unstall",
        "documentation": {}
    },
    {
        "label": "unzip_file",
        "kind": 2,
        "importPath": "BM_INSTALL.unzip_and_compress",
        "description": "BM_INSTALL.unzip_and_compress",
        "peekOfCode": "def unzip_file(path, path_destination_folder,  main_root ): \n    new_path = path+\"/BM_TAR/black-mamba-1.01.01-linux.tar.gz\"\n    _path_   = path+\"/BM_TAR/\"\n    try:\n        base_path = os.environ(\"_MEI9442\", _path_)\n    except Exception:\n        base_path = \"\"\n    os.path.join(_path_)\n    _scroll_bar_, frame  = locked(main_root, path_destination_folder)\n    style = Style()",
        "detail": "BM_INSTALL.unzip_and_compress",
        "documentation": {}
    },
    {
        "label": "progress_bar",
        "kind": 2,
        "importPath": "BM_INSTALL.unzip_and_compress",
        "description": "BM_INSTALL.unzip_and_compress",
        "peekOfCode": "def progress_bar( main_root ):\n    FRAME0 = Frame(main_root, relief=RAISED, bd=4, width=400, height=50, bg='white')\n    FRAME0.place(x=200, y=360)\n    break_button = Button(FRAME0, text='cancel', state=NORMAL, width=10, relief=GROOVE, command= lambda : destroy_root(main_root))\n    break_button.place(x=280, y=4)\ndef locked( main_root, path_destination_folder):\n    height = 40 \n    List = ['Select location']\n    FRAME = Frame(main_root, relief=RAISED, bd=4, width=400, height=350, bg=\"white\")\n    FRAME.place(x=200, y=0)",
        "detail": "BM_INSTALL.unzip_and_compress",
        "documentation": {}
    },
    {
        "label": "locked",
        "kind": 2,
        "importPath": "BM_INSTALL.unzip_and_compress",
        "description": "BM_INSTALL.unzip_and_compress",
        "peekOfCode": "def locked( main_root, path_destination_folder):\n    height = 40 \n    List = ['Select location']\n    FRAME = Frame(main_root, relief=RAISED, bd=4, width=400, height=350, bg=\"white\")\n    FRAME.place(x=200, y=0)\n    FRAME0 = Frame(main_root, relief=RAISED, bd=4, width=400, height=50, bg='white')\n    FRAME0.place(x=200, y=360)\n    frame0 = LabelFrame(FRAME, bd=5, width=400, height=height, relief=FLAT, text=\"BLACK MAMBA PROGRAMM INSTALLING\",\n                        font = ('calibri', 10, 'bold'), bg=\"white\")\n    frame0.place(x=0, y=0, height=150)",
        "detail": "BM_INSTALL.unzip_and_compress",
        "documentation": {}
    },
    {
        "label": "destroy_root",
        "kind": 2,
        "importPath": "BM_INSTALL.unzip_and_compress",
        "description": "BM_INSTALL.unzip_and_compress",
        "peekOfCode": "def destroy_root(root):\n    root.destroy()",
        "detail": "BM_INSTALL.unzip_and_compress",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 6,
        "importPath": "IDE.EDITOR.cursor",
        "description": "IDE.EDITOR.cursor",
        "peekOfCode": "class move:\n\tdef __init__(self):\n\t\tpass \n\tdef move( self, text: str, n : int = 1):\n\t\tsys.stdout.write(bm.save.save)\n\t\tfor i in range(n):\n\t\t\tsys.stdout.write(text+'\\n')\n\t\tsys.stdout.write(bm.save.restore)\n\t\tsys.stdout.flush()",
        "detail": "IDE.EDITOR.cursor",
        "documentation": {}
    },
    {
        "label": "new_windows",
        "kind": 6,
        "importPath": "IDE.EDITOR.cursor_pos",
        "description": "IDE.EDITOR.cursor_pos",
        "peekOfCode": "class new_windows:\n    def __init__(self, srt : str = \"\", line : int = 1):\n        self.left       = bm.init.bold+bm.fg.red_L+'>'\n        self.right      = bm.init.bold+bm.fg.red_L+'<'\n        self.re         = bm.init.reset\n        self.w          = bm.bg.black_L+bm.init.bold+bm.fg.white_L\n        self.ww         = bm.init.bold+bm.fg.white_L\n        self.srt        = \" \" * len(srt) + \"     \"\n        self.r          = bm.init.bold+bm.fg.rbg(255, 0, 0)\n        self.line       = line",
        "detail": "IDE.EDITOR.cursor_pos",
        "documentation": {}
    },
    {
        "label": "Details",
        "kind": 6,
        "importPath": "IDE.EDITOR.details",
        "description": "IDE.EDITOR.details",
        "peekOfCode": "class Details:\n    def __init__(self, srt : str = \"\", line : int = 1):\n        self.left       = bm.init.bold+bm.fg.red_L+'>'\n        self.right      = bm.init.bold+bm.fg.red_L+'<'\n        self.re         = bm.init.reset\n        self.w          = bm.bg.black_L+bm.init.bold+bm.fg.white_L\n        self.ww         = bm.init.bold+bm.fg.white_L\n        self.srt        = \" \" * len(srt) + \"     \"\n        self.r          = bm.init.bold+bm.fg.rbg(255, 0, 0)\n        self.line       = line ",
        "detail": "IDE.EDITOR.details",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 2,
        "importPath": "IDE.EDITOR.drop_box",
        "description": "IDE.EDITOR.drop_box",
        "peekOfCode": "def size(max_x, max_y, pos_x, pos_y):\n    key_max_activation = False\n    if   (int(max_y)-int(pos_y)) > 14 : key_max_activation = True\n    else: key_max_activation = False\n    if key_max_activation  is False: pass\n    else:\n        if (int(max_x)-int(pos_x)) > 20 : key_max_activation = True\n        else: key_max_activation = False\n    return key_max_activation",
        "detail": "IDE.EDITOR.drop_box",
        "documentation": {}
    },
    {
        "label": "code_example",
        "kind": 6,
        "importPath": "IDE.EDITOR.examples",
        "description": "IDE.EDITOR.examples",
        "peekOfCode": "class code_example:\n    def __init__(self, char : str, string : str ):\n        self.char       = char\n        self.string     = string \n    def code(self):\n        self.names  = pe.list_of_keys( self.char , {}).list()\n        if self.char == \"a\":\n            self.List, self.max, self.l = a( self.string )\n        elif self.char == 'b':\n            self.List, self.max, self.l = b( self.string )",
        "detail": "IDE.EDITOR.examples",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "IDE.EDITOR.examples",
        "description": "IDE.EDITOR.examples",
        "peekOfCode": "def a(string: str):\n    List, max_, L = None, 0, []\n    w = bm.bg.black_L+bm.init.bold+bm.fg.rbg(255, 255, 255)\n    if   string == 'add':\n        List = [\"# Only used for lists\", \"[].add( True )\", \"name = [].add( 'Hello World')\"]\n        x_max = 0\n        for i in range(len(List)):\n            if len(List[i]) > x_max : x_max = len(List[i])\n            else: pass \n        max_ = x_max+4",
        "detail": "IDE.EDITOR.examples",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 2,
        "importPath": "IDE.EDITOR.examples",
        "description": "IDE.EDITOR.examples",
        "peekOfCode": "def b( string :str):\n    List, max_, L = None, None, []\n    w = bm.bg.black_L+bm.init.bold+bm.fg.rbg(255, 255, 255)\n    if   string == 'begin':\n        List = [\"# Only used to create comment lines\", \"begin:\", \n                \"    Hello here, my name is Black Mamba\", \n                \"    How can i help you?\", \n                \"save as cmt:\", \n                \"end:\"]\n        x_max = 0",
        "detail": "IDE.EDITOR.examples",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 2,
        "importPath": "IDE.EDITOR.examples",
        "description": "IDE.EDITOR.examples",
        "peekOfCode": "def c(string: str): \n    List, max_, L, index = None, None, [], []\n    w = bm.bg.black_L+bm.init.bold+bm.fg.rbg(255, 255, 255)\n    if     string == 'capitalize':\n        List = [\"# Only used for strings\", \"'Hello World !'.capitalize()\"]\n        x_max = 0\n        for i in range(len(List)):\n            if len(List[i]) > x_max : x_max = len(List[i])\n            else: pass \n        max_ = x_max+4",
        "detail": "IDE.EDITOR.examples",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 2,
        "importPath": "IDE.EDITOR.examples",
        "description": "IDE.EDITOR.examples",
        "peekOfCode": "def d( string :str):\n    List, max_, L = None, None, []\n    if string == \"def\":\n        List = [\"# Only used for creating functions && attributes for classes\", \n                \"def Floor( master : float int bool = 1.0 ) -> integer\",\n                \"    if ? master == ? 1:\",\n                \"        return master\",\n                \"    elif type(master) == type(True):\",\n                \"        return integer(master)\",\n                \"    else:\",",
        "detail": "IDE.EDITOR.examples",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 2,
        "importPath": "IDE.EDITOR.examples",
        "description": "IDE.EDITOR.examples",
        "peekOfCode": "def e(string: str): \n    List, max_, L = None, None, []\n    if   string == 'enumerate':\n        List = [\"# Only used for strings and lists\", \"'Hello World !'.enumerate()\", \"[1, 2, 3, 4].enumerate()\"]\n        for i in range(len(List)):\n            L.append(len(List[i]))\n            List[i] = bm.words(string=List[i], color=bm.init.bold+bm.fg.rbg(255, 255, 255)).final()\n        max_ = max(L)\n        List = [ bm.words(string=\"enumerate\".center(max_), color=bm.init.bold+bm.fg.rbg(255, 255, 255)).final(n=1)]+List\n        L.insert(0, max_)",
        "detail": "IDE.EDITOR.examples",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "IDE.EDITOR.examples",
        "description": "IDE.EDITOR.examples",
        "peekOfCode": "def f( string :str):\n    List, max_, L = None, None, []\n    if string == \"func\":\n        List = [\"# Only used for creating functions && attributes for classes\", \n                \"Floor func( master : float int bool = 1.0 ) -> integer\",\n                \"    if ? master == ? 1:\",\n                \"        return master\",\n                \"    elif type(master) == type(True):\",\n                \"        return integer(master)\",\n                \"    else:\",",
        "detail": "IDE.EDITOR.examples",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "IDE.EDITOR.examples",
        "description": "IDE.EDITOR.examples",
        "peekOfCode": "def g(string: str):\n    List, max_, L = None, 0, []\n    if   string == 'global':\n        List = [\"# Only used to make variables global\", \n                \"global color, names\",\n                \"color, name = 'green', 'versicolor'\",\n                \" \",\n                \"# using global variables in functions\",\n                \"setosa = func() -> string:\",\n                \"    return name[0]\",",
        "detail": "IDE.EDITOR.examples",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 2,
        "importPath": "IDE.EDITOR.examples",
        "description": "IDE.EDITOR.examples",
        "peekOfCode": "def i(string: str):\n    List, max_, L = None, 0, []\n    if   string == 'in':\n        List = [\" \", \n                \"'e' in 'house' \",\n                \"1 in [1, 5, 6, 7]\",\n                \" \",\n                \"for i in [1, 9, 7, 2]:\",\n                \"    print * i\",\n                \"end:\"",
        "detail": "IDE.EDITOR.examples",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 2,
        "importPath": "IDE.EDITOR.examples",
        "description": "IDE.EDITOR.examples",
        "peekOfCode": "def j(string: str):\n    List, max_, L = None, 0, []\n    if   string == 'join':\n        List = [\"# Only used for strings\", \"''.join('H')\", \n                \" \",\n                \"'--'.join( ['Python', 'BMamba', 'R', 'C', 'Ruby'] )\",\n                \"'**'.join( master = ('Python', 'BMamba', 'Ruby') )\",\n                \"'_'.join( {Python : True, BMamba : True, Ruby : None] )\"\n                ]\n        for i in range(len(List)):",
        "detail": "IDE.EDITOR.examples",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 2,
        "importPath": "IDE.EDITOR.examples",
        "description": "IDE.EDITOR.examples",
        "peekOfCode": "def l(string: str):\n    List, max_, L = None, 0, []\n    if   string == 'lambda':\n        List = [\"# Only used for creating anonymous functions\",\n                \" \", \n                \"sum = lambda a b : a+b\",\n                \"sum = lambda array max : array[array .gt. max] -> list\"\n                ]\n        for i in range(len(List)):\n            L.append(len(List[i]))",
        "detail": "IDE.EDITOR.examples",
        "documentation": {}
    },
    {
        "label": "F_C",
        "kind": 6,
        "importPath": "IDE.EDITOR.func_class",
        "description": "IDE.EDITOR.func_class",
        "peekOfCode": "class F_C:\n    def __init__(self, data_base : dict):\n        self.data_base      = data_base \n        self.global_vars    = self.data_base['global_vars']['vars']\n        self.func_names     = self.data_base['func_names' ]  \n        self.vars           = self.data_base['variables']['vars']\n        self.class_names    = self.data_base['class_names']\n        self.lib            = self.data_base['LIB']\n    def F_C(self, my_list : list, char: str, idd: int):\n        self.c,self.f, self.v = [], [], []",
        "detail": "IDE.EDITOR.func_class",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 2,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "def header(string : str = 'Linux Version', terminal = 'orion terminal'):\n    #Linux\n\t#max_x, max_y      = test.get_win_ter()\n\tw \t\t= bm.fg.rbg(255,255,255)\n\tbold \t= bm.init.bold\n\tblink \t= bm.init.blink\n\tre \t\t= bm.init.reset\n\tg \t\t= bm.fg.rbg(0, 255, 0)\n\tc \t\t= bm.fg.rbg(0, 255, 255)\n\ty \t\t= bm.fg.rbg(255, 255, 0)",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "bottom",
        "kind": 2,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "def bottom(max_x: int, x ):\n\tc = bm.init.bold+bm.fg.rbg(255, 255, 255)\n\tr = bm.init.reset\n\tb = bm.bg.rgb(0, 0, 0)\n\tstring  = \"Ctrl+c = code exit()    Ctrl+z = EOFError    Ctrl+n = auto selection    Ctrl+s = clear entire screnn    Ctrl+l = erase entire line\".center(max_x-2 )\n\tstring_ = \"Ctrl+d = move cursor at the beginning of string    Ctrl+a = move cursor at the end of string   Ctrl+g = more info about each keyword\".center(max_x-2 )\n\ta = ascii.frame(True)\n\ts1 = a['ul'] + b+a['h'] *( max_x-2 )+r + a['ur']\n\ts2 = a['v']  + b+c+string+r + a['v']\n\ts4 = a['v']  + b+c+string_+r + a['v']",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\tsize[0]",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\tsize[0] = int( size[0] / 2.0)\n\tn \t\t= 50\n\tm\t\t= int(n/2.0)\n\ta \t\t= chr(9607) * n\n\tb \t\t= chr(9608)\n\te \t\t= \" \" * (n-2)\n\tdot \t= chr(9899)\n\tcopyright=chr(169)\n\tws \t\t= 10\n\tpush \t= \" \" * ws# * ((size[0] - int(n/2))-20)",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\tnumeric",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\tnumeric = [chr(j) for j in range(9461, 9471)]\n\tshaka   = [chr(i) for i in range(9800, 9812)]\n\ttop \t= f\"{a}\"\n\tmid \t= f\"{b}{e}{b}\"\n\tbot \t= b+chr(9607)*(n-2)+b\n\tbox \t= [f'{shaka[3]} BLACK MAMBA {shaka[3]}', 'Version 23.03.11']\n\tl1 \t\t= m-int( len(box[0])/2.0 )\n\tl2 \t\t= m-len(string)+len(terminal)-11\n\tl3 \t\t= m-len('-version -1.01.01-')+len('MIT License')+3\n\tl4 \t\t= m-len(\"For more informations run:\")",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\t_",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\t_ = \"  \"+\" \"*14+push+top\n\tprint(_)\n\t_ = \"  \"+\" \"*14+push+mid\n\tprint(_)\n\t_ = s5555a+s15+\" \"*s555a+\"  \"+b+bold+y+ \" \"*(l1-2)+bold+box[0]+re+\" \"*(l1-3)+b+\"  \"+s15\n\tprint(_)\n\tif terminal.split()[0] == 'orion' : print(s3333a+s14+\" \"*s333a+\"  \"+b+ \" \"*(l2-13) +sec1+\" \"*(l2-9)+b+\"  \"+s14)\n\telse:  print(s3333a+s14+\" \"*s333a+\"  \"+b+ \" \"*(l2-15) +sec1+\" \"*(l2-13)+b+\"  \"+s14)\n\tprint(s2222+s13+\" \"*s222+ \"  \"+b+ \" \"*(l3-14)+sec2+\" \" * (l3-13)+b+\"  \"+s13)\n\tprint(s1111+s12+\" \"*s111+\"  \"+b+\" \"*(l1-2)+ \" \"*len(box[0])+\" \"*(l1-1)+b+\"  \"+s12)",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\t_",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\t_ = \"  \"+\" \"*14+push+mid\n\tprint(_)\n\t_ = s5555a+s15+\" \"*s555a+\"  \"+b+bold+y+ \" \"*(l1-2)+bold+box[0]+re+\" \"*(l1-3)+b+\"  \"+s15\n\tprint(_)\n\tif terminal.split()[0] == 'orion' : print(s3333a+s14+\" \"*s333a+\"  \"+b+ \" \"*(l2-13) +sec1+\" \"*(l2-9)+b+\"  \"+s14)\n\telse:  print(s3333a+s14+\" \"*s333a+\"  \"+b+ \" \"*(l2-15) +sec1+\" \"*(l2-13)+b+\"  \"+s14)\n\tprint(s2222+s13+\" \"*s222+ \"  \"+b+ \" \"*(l3-14)+sec2+\" \" * (l3-13)+b+\"  \"+s13)\n\tprint(s1111+s12+\" \"*s111+\"  \"+b+\" \"*(l1-2)+ \" \"*len(box[0])+\" \"*(l1-1)+b+\"  \"+s12)\n\tprint(s1000+s10+\" \"*s100+\"  \"+b+\" \"+sec3+ \" \"*18+b, \" \"+s10)\n\tprint(s999+s9+\" \"*s99+\"   \"+b+\"    \"+sec4+ \" \"*31+b+\"  \"+s9)",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\t_",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\t_ = s5555a+s15+\" \"*s555a+\"  \"+b+bold+y+ \" \"*(l1-2)+bold+box[0]+re+\" \"*(l1-3)+b+\"  \"+s15\n\tprint(_)\n\tif terminal.split()[0] == 'orion' : print(s3333a+s14+\" \"*s333a+\"  \"+b+ \" \"*(l2-13) +sec1+\" \"*(l2-9)+b+\"  \"+s14)\n\telse:  print(s3333a+s14+\" \"*s333a+\"  \"+b+ \" \"*(l2-15) +sec1+\" \"*(l2-13)+b+\"  \"+s14)\n\tprint(s2222+s13+\" \"*s222+ \"  \"+b+ \" \"*(l3-14)+sec2+\" \" * (l3-13)+b+\"  \"+s13)\n\tprint(s1111+s12+\" \"*s111+\"  \"+b+\" \"*(l1-2)+ \" \"*len(box[0])+\" \"*(l1-1)+b+\"  \"+s12)\n\tprint(s1000+s10+\" \"*s100+\"  \"+b+\" \"+sec3+ \" \"*18+b, \" \"+s10)\n\tprint(s999+s9+\" \"*s99+\"   \"+b+\"    \"+sec4+ \" \"*31+b+\"  \"+s9)\n\tprint(s888+s8+\" \"*(s88-1)+b+\"    \"+sec5+ \" \"*32+b, \" \"+s8)\n\tprint(s777+s7+\" \"*(s77-1)+b+\" \"*(l1-2)+ \" \"*len(box[0])+\" \"*(l1-1)+b+ \"  \"+s7)",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\tc",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\tc = bm.init.bold+bm.fg.rbg(255, 255, 255)\n\tr = bm.init.reset\n\tb = bm.bg.rgb(0, 0, 0)\n\tstring  = \"Ctrl+c = code exit()    Ctrl+z = EOFError    Ctrl+n = auto selection    Ctrl+s = clear entire screnn    Ctrl+l = erase entire line\".center(max_x-2 )\n\tstring_ = \"Ctrl+d = move cursor at the beginning of string    Ctrl+a = move cursor at the end of string   Ctrl+g = more info about each keyword\".center(max_x-2 )\n\ta = ascii.frame(True)\n\ts1 = a['ul'] + b+a['h'] *( max_x-2 )+r + a['ur']\n\ts2 = a['v']  + b+c+string+r + a['v']\n\ts4 = a['v']  + b+c+string_+r + a['v']\n\ts3 = a['dl'] + b+a['h'] *( max_x-2 )+r + a['dr']",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\tr",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\tr = bm.init.reset\n\tb = bm.bg.rgb(0, 0, 0)\n\tstring  = \"Ctrl+c = code exit()    Ctrl+z = EOFError    Ctrl+n = auto selection    Ctrl+s = clear entire screnn    Ctrl+l = erase entire line\".center(max_x-2 )\n\tstring_ = \"Ctrl+d = move cursor at the beginning of string    Ctrl+a = move cursor at the end of string   Ctrl+g = more info about each keyword\".center(max_x-2 )\n\ta = ascii.frame(True)\n\ts1 = a['ul'] + b+a['h'] *( max_x-2 )+r + a['ur']\n\ts2 = a['v']  + b+c+string+r + a['v']\n\ts4 = a['v']  + b+c+string_+r + a['v']\n\ts3 = a['dl'] + b+a['h'] *( max_x-2 )+r + a['dr']\n\tsys.stdout.write(s1+\"\\n\")",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\tb",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\tb = bm.bg.rgb(0, 0, 0)\n\tstring  = \"Ctrl+c = code exit()    Ctrl+z = EOFError    Ctrl+n = auto selection    Ctrl+s = clear entire screnn    Ctrl+l = erase entire line\".center(max_x-2 )\n\tstring_ = \"Ctrl+d = move cursor at the beginning of string    Ctrl+a = move cursor at the end of string   Ctrl+g = more info about each keyword\".center(max_x-2 )\n\ta = ascii.frame(True)\n\ts1 = a['ul'] + b+a['h'] *( max_x-2 )+r + a['ur']\n\ts2 = a['v']  + b+c+string+r + a['v']\n\ts4 = a['v']  + b+c+string_+r + a['v']\n\ts3 = a['dl'] + b+a['h'] *( max_x-2 )+r + a['dr']\n\tsys.stdout.write(s1+\"\\n\")\n\tsys.stdout.write(s2+\"\\n\")",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\tstring_",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\tstring_ = \"Ctrl+d = move cursor at the beginning of string    Ctrl+a = move cursor at the end of string   Ctrl+g = more info about each keyword\".center(max_x-2 )\n\ta = ascii.frame(True)\n\ts1 = a['ul'] + b+a['h'] *( max_x-2 )+r + a['ur']\n\ts2 = a['v']  + b+c+string+r + a['v']\n\ts4 = a['v']  + b+c+string_+r + a['v']\n\ts3 = a['dl'] + b+a['h'] *( max_x-2 )+r + a['dr']\n\tsys.stdout.write(s1+\"\\n\")\n\tsys.stdout.write(s2+\"\\n\")\n\tsys.stdout.write(s4+\"\\n\")\n\tsys.stdout.write(s3+\"\\n\")",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\ta",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\ta = ascii.frame(True)\n\ts1 = a['ul'] + b+a['h'] *( max_x-2 )+r + a['ur']\n\ts2 = a['v']  + b+c+string+r + a['v']\n\ts4 = a['v']  + b+c+string_+r + a['v']\n\ts3 = a['dl'] + b+a['h'] *( max_x-2 )+r + a['dr']\n\tsys.stdout.write(s1+\"\\n\")\n\tsys.stdout.write(s2+\"\\n\")\n\tsys.stdout.write(s4+\"\\n\")\n\tsys.stdout.write(s3+\"\\n\")\n\tsys.stdout.flush()",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\ts1",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\ts1 = a['ul'] + b+a['h'] *( max_x-2 )+r + a['ur']\n\ts2 = a['v']  + b+c+string+r + a['v']\n\ts4 = a['v']  + b+c+string_+r + a['v']\n\ts3 = a['dl'] + b+a['h'] *( max_x-2 )+r + a['dr']\n\tsys.stdout.write(s1+\"\\n\")\n\tsys.stdout.write(s2+\"\\n\")\n\tsys.stdout.write(s4+\"\\n\")\n\tsys.stdout.write(s3+\"\\n\")\n\tsys.stdout.flush()",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\ts2",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\ts2 = a['v']  + b+c+string+r + a['v']\n\ts4 = a['v']  + b+c+string_+r + a['v']\n\ts3 = a['dl'] + b+a['h'] *( max_x-2 )+r + a['dr']\n\tsys.stdout.write(s1+\"\\n\")\n\tsys.stdout.write(s2+\"\\n\")\n\tsys.stdout.write(s4+\"\\n\")\n\tsys.stdout.write(s3+\"\\n\")\n\tsys.stdout.flush()",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\ts4",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\ts4 = a['v']  + b+c+string_+r + a['v']\n\ts3 = a['dl'] + b+a['h'] *( max_x-2 )+r + a['dr']\n\tsys.stdout.write(s1+\"\\n\")\n\tsys.stdout.write(s2+\"\\n\")\n\tsys.stdout.write(s4+\"\\n\")\n\tsys.stdout.write(s3+\"\\n\")\n\tsys.stdout.flush()",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "\ts3",
        "kind": 5,
        "importPath": "IDE.EDITOR.header",
        "description": "IDE.EDITOR.header",
        "peekOfCode": "\ts3 = a['dl'] + b+a['h'] *( max_x-2 )+r + a['dr']\n\tsys.stdout.write(s1+\"\\n\")\n\tsys.stdout.write(s2+\"\\n\")\n\tsys.stdout.write(s4+\"\\n\")\n\tsys.stdout.write(s3+\"\\n\")\n\tsys.stdout.flush()",
        "detail": "IDE.EDITOR.header",
        "documentation": {}
    },
    {
        "label": "String",
        "kind": 2,
        "importPath": "IDE.EDITOR.left_right",
        "description": "IDE.EDITOR.left_right",
        "peekOfCode": "def String( string : str, index : int=0, char : list=[], key = 'left'):\n    new_str = \"\"\n    left, right = \"\", \"\"\n    if string: \n        if string[index] in char:\n            for s in string[ : index]:\n                if s in char: left += s\n                else: break \n            for s in string[ index : ]:\n                if s in char: right += s",
        "detail": "IDE.EDITOR.left_right",
        "documentation": {}
    },
    {
        "label": "CursorPos",
        "kind": 2,
        "importPath": "IDE.EDITOR.pos_of_cursor",
        "description": "IDE.EDITOR.pos_of_cursor",
        "peekOfCode": "def CursorPos():\n\ttext=\"\"\n\tpos = u\"\\u001b[6n\"\n\t#sys.stdout.write(pos)\n\t#sys.stdout.flush()\n\t#text =  sys.stdin.read(1).endswith(\"R\")\n\tres = re.match(r\".*\\[(?P<y>\\d*);(?P<x>\\d*)R\", 'hello'+pos)\n\tif res:\t\n\t\treturn (res.group(\"x\"), res.group(\"y\"))\n\telse: return (-1 -1)",
        "detail": "IDE.EDITOR.pos_of_cursor",
        "documentation": {}
    },
    {
        "label": "\tpos",
        "kind": 5,
        "importPath": "IDE.EDITOR.pos_of_cursor",
        "description": "IDE.EDITOR.pos_of_cursor",
        "peekOfCode": "\tpos = u\"\\u001b[6n\"\n\t#sys.stdout.write(pos)\n\t#sys.stdout.flush()\n\t#text =  sys.stdin.read(1).endswith(\"R\")\n\tres = re.match(r\".*\\[(?P<y>\\d*);(?P<x>\\d*)R\", 'hello'+pos)\n\tif res:\t\n\t\treturn (res.group(\"x\"), res.group(\"y\"))\n\telse: return (-1 -1)",
        "detail": "IDE.EDITOR.pos_of_cursor",
        "documentation": {}
    },
    {
        "label": "\t#text",
        "kind": 5,
        "importPath": "IDE.EDITOR.pos_of_cursor",
        "description": "IDE.EDITOR.pos_of_cursor",
        "peekOfCode": "\t#text =  sys.stdin.read(1).endswith(\"R\")\n\tres = re.match(r\".*\\[(?P<y>\\d*);(?P<x>\\d*)R\", 'hello'+pos)\n\tif res:\t\n\t\treturn (res.group(\"x\"), res.group(\"y\"))\n\telse: return (-1 -1)",
        "detail": "IDE.EDITOR.pos_of_cursor",
        "documentation": {}
    },
    {
        "label": "\tres",
        "kind": 5,
        "importPath": "IDE.EDITOR.pos_of_cursor",
        "description": "IDE.EDITOR.pos_of_cursor",
        "peekOfCode": "\tres = re.match(r\".*\\[(?P<y>\\d*);(?P<x>\\d*)R\", 'hello'+pos)\n\tif res:\t\n\t\treturn (res.group(\"x\"), res.group(\"y\"))\n\telse: return (-1 -1)",
        "detail": "IDE.EDITOR.pos_of_cursor",
        "documentation": {}
    },
    {
        "label": "list_of_keys",
        "kind": 6,
        "importPath": "IDE.EDITOR.pull_editor",
        "description": "IDE.EDITOR.pull_editor",
        "peekOfCode": "class list_of_keys:\n    def __init__(self, firstChar : str, data_base : dict):\n        self.firstChar = firstChar \n        self.data_base = data_base \n    def list(self):\n        #self.global_vars        = self.data_base['global_vars']['vars']\n        #self.list_of_vars       = self.data_base['variables']['vars'] + self.global_vars\n        self.a = ['as', 'add', 'any', 'anonymous']\n        self.b = ['begin', 'bool', 'break']\n        self.c = ['class', 'cplx', 'close', 'case', 'continue', 'count', 'capitalize', 'clear', 'copy', 'conj', 'choice']",
        "detail": "IDE.EDITOR.pull_editor",
        "documentation": {}
    },
    {
        "label": "IDE",
        "kind": 6,
        "importPath": "IDE.EDITOR.pull_editor",
        "description": "IDE.EDITOR.pull_editor",
        "peekOfCode": "class IDE:\n    def __init__(self, idd : int, firstChar : str, data_base: dict):\n        self.data_base  = data_base\n        self.idd        = idd\n        self.firstChar  = firstChar\n        self.w          = bm.bg.black_L+ bm.init.bold+bm.fg.rbg(255,255,255)\n        self.re         = bm.init.reset\n        self.cursor     = bm.init.bold+bm.fg.rbg(255,0,0) + chr(9654)+self.re\n        self.cursor_inv = ' '+bm.init.bold+bm.fg.rbg(255,0,0) +self.re   # + chr(9658)+self.re\n        self.r          = bm.fg.rbg(255,0,0)",
        "detail": "IDE.EDITOR.pull_editor",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  DropDown:\n    def __init__(self, data_base: dict, line: int, key:bool=True):\n        self.line               = line\n        self.data_base          = data_base\n        self.key \t\t\t\t= key\n    def MENU(self, string : str = 'r', true_chaine : str = \"\", indicator = None, pos : int = 0, d_max_x : int = 1) :\n        ouput               = \"\"\n        np                  = 1\n        self.max_size       = 6\n        self.new            = []"
        },
        "kind": 6,
        "importPath": "IDE.EDITOR.pull_editor",
        "description": "IDE.EDITOR.pull_editor",
        "peekOfCode": "class  DropDown:\n    def __init__(self, data_base: dict, line: int, key:bool=True):\n        self.line               = line\n        self.data_base          = data_base\n        self.key \t\t\t\t= key\n    def MENU(self, string : str = 'r', true_chaine : str = \"\", indicator = None, pos : int = 0, d_max_x : int = 1) :\n        ouput               = \"\"\n        np                  = 1\n        self.max_size       = 6\n        self.new            = []",
        "detail": "IDE.EDITOR.pull_editor",
        "documentation": {}
    },
    {
        "label": "scan",
        "kind": 6,
        "importPath": "IDE.EDITOR.scan",
        "description": "IDE.EDITOR.scan",
        "peekOfCode": "class scan:\n    def __init__(self, data_base: dict, line: int):\n        # main data base\n        self.data_base  = data_base\n        #current line\n        self.line = line\n        # contriling string\n        self.analyse    = control_string.STRING_ANALYSE(self.data_base, 1)\n    def STR(self, c: str = '', terminal_name : str = 'pegasus', key: str = '', blink: bool = False, hide:bool=False):\n        # set color on yellow",
        "detail": "IDE.EDITOR.scan",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 6,
        "importPath": "IDE.EDITOR.scan",
        "description": "IDE.EDITOR.scan",
        "peekOfCode": "class colors:\n    def __init__(self, cc: str, blink : bool = False):\n        self.string  = cc\n        self.blink   = blink\n    def color(self):\n        c = \"\"\n        if   self.string == 'white'     : c = bm.fg.rbg(255, 255, 255)\n        elif self.string == 'yellow'    : c = bm.fg.rbg(255, 255, 0)\n        elif self.string == 'red'       : c = bm.fg.rbg(255, 0, 0)\n        elif self.string == 'blue'      : c = bm.fg.rbg(0, 0, 255)",
        "detail": "IDE.EDITOR.scan",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "importPath": "IDE.EDITOR.string_buid",
        "description": "IDE.EDITOR.string_buid",
        "peekOfCode": "class string:\n    def __init__(self, data_storage : str ):\n        self.data_storage = data_storage\n    def build(self, c: str = ''):\n        # set color on yellow\n        self.c              = bm.fg.rbg(255, 255, 0)\n        # reset color\n        self.reset          = bm.init.reset\n        self.input               = '{}>>> {}'.format(self.c, self.reset)\n        # input main used to build the final string s",
        "detail": "IDE.EDITOR.string_buid",
        "documentation": {}
    },
    {
        "label": "get_win_ter",
        "kind": 2,
        "importPath": "IDE.EDITOR.test",
        "description": "IDE.EDITOR.test",
        "peekOfCode": "def get_win_ter():\n\tfrom ctypes import windll, create_string_buffer\n\th = windll.kernel32.GetStdHandle(-12)\n\tcsbi = create_string_buffer(22)\n\tres = windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)\n\tif not res: return 80, 25\n\timport struct\n\t(bufx, bufy, curx, cury, wattr, left, top, right, bottom, maxx, maxy)=struct.unpack(\"hhhhhhh\", csbi.raw)\n\twidth = right-left+1\n\theight=bottom-top+1",
        "detail": "IDE.EDITOR.test",
        "documentation": {}
    },
    {
        "label": "get_linux_ter",
        "kind": 2,
        "importPath": "IDE.EDITOR.test",
        "description": "IDE.EDITOR.test",
        "peekOfCode": "def get_linux_ter():\n\twidth = os.popen('tput cols', 'r').readline()\n\theight= os.popen('tput lines', 'r').readline()\t\n\treturn int(width), int(height)",
        "detail": "IDE.EDITOR.test",
        "documentation": {}
    },
    {
        "label": "\th",
        "kind": 5,
        "importPath": "IDE.EDITOR.test",
        "description": "IDE.EDITOR.test",
        "peekOfCode": "\th = windll.kernel32.GetStdHandle(-12)\n\tcsbi = create_string_buffer(22)\n\tres = windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)\n\tif not res: return 80, 25\n\timport struct\n\t(bufx, bufy, curx, cury, wattr, left, top, right, bottom, maxx, maxy)=struct.unpack(\"hhhhhhh\", csbi.raw)\n\twidth = right-left+1\n\theight=bottom-top+1\n\treturn width, height\ndef get_linux_ter():",
        "detail": "IDE.EDITOR.test",
        "documentation": {}
    },
    {
        "label": "\tcsbi",
        "kind": 5,
        "importPath": "IDE.EDITOR.test",
        "description": "IDE.EDITOR.test",
        "peekOfCode": "\tcsbi = create_string_buffer(22)\n\tres = windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)\n\tif not res: return 80, 25\n\timport struct\n\t(bufx, bufy, curx, cury, wattr, left, top, right, bottom, maxx, maxy)=struct.unpack(\"hhhhhhh\", csbi.raw)\n\twidth = right-left+1\n\theight=bottom-top+1\n\treturn width, height\ndef get_linux_ter():\n\twidth = os.popen('tput cols', 'r').readline()",
        "detail": "IDE.EDITOR.test",
        "documentation": {}
    },
    {
        "label": "\tres",
        "kind": 5,
        "importPath": "IDE.EDITOR.test",
        "description": "IDE.EDITOR.test",
        "peekOfCode": "\tres = windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)\n\tif not res: return 80, 25\n\timport struct\n\t(bufx, bufy, curx, cury, wattr, left, top, right, bottom, maxx, maxy)=struct.unpack(\"hhhhhhh\", csbi.raw)\n\twidth = right-left+1\n\theight=bottom-top+1\n\treturn width, height\ndef get_linux_ter():\n\twidth = os.popen('tput cols', 'r').readline()\n\theight= os.popen('tput lines', 'r').readline()\t",
        "detail": "IDE.EDITOR.test",
        "documentation": {}
    },
    {
        "label": "\twidth",
        "kind": 5,
        "importPath": "IDE.EDITOR.test",
        "description": "IDE.EDITOR.test",
        "peekOfCode": "\twidth = right-left+1\n\theight=bottom-top+1\n\treturn width, height\ndef get_linux_ter():\n\twidth = os.popen('tput cols', 'r').readline()\n\theight= os.popen('tput lines', 'r').readline()\t\n\treturn int(width), int(height)",
        "detail": "IDE.EDITOR.test",
        "documentation": {}
    },
    {
        "label": "\twidth",
        "kind": 5,
        "importPath": "IDE.EDITOR.test",
        "description": "IDE.EDITOR.test",
        "peekOfCode": "\twidth = os.popen('tput cols', 'r').readline()\n\theight= os.popen('tput lines', 'r').readline()\t\n\treturn int(width), int(height)",
        "detail": "IDE.EDITOR.test",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 2,
        "importPath": "IDE.EDITOR.true_cursor_pos",
        "description": "IDE.EDITOR.true_cursor_pos",
        "peekOfCode": "def cursor():\n\tOldStdinMode = termios.tcgetattr(sys.stdin)\n\t_ = termios.tcgetattr(sys.stdin)\n\t_[3] = _[3] & ~(termios.ECHO | termios.ICANON)\n\ttermios.tcsetattr(sys.stdin, termios.TCSAFLUSH, _)\n\ttry:\n\t\t_ = \"\"\n\t\tsys.stdout.write(\"\\x1b[6n\")\n\t\tsys.stdout.flush()\n\t\twhile not (_ := _+sys.stdin.read(1)).endswith('R'):",
        "detail": "IDE.EDITOR.true_cursor_pos",
        "documentation": {}
    },
    {
        "label": "\tOldStdinMode",
        "kind": 5,
        "importPath": "IDE.EDITOR.true_cursor_pos",
        "description": "IDE.EDITOR.true_cursor_pos",
        "peekOfCode": "\tOldStdinMode = termios.tcgetattr(sys.stdin)\n\t_ = termios.tcgetattr(sys.stdin)\n\t_[3] = _[3] & ~(termios.ECHO | termios.ICANON)\n\ttermios.tcsetattr(sys.stdin, termios.TCSAFLUSH, _)\n\ttry:\n\t\t_ = \"\"\n\t\tsys.stdout.write(\"\\x1b[6n\")\n\t\tsys.stdout.flush()\n\t\twhile not (_ := _+sys.stdin.read(1)).endswith('R'):\n\t\t\tTrue",
        "detail": "IDE.EDITOR.true_cursor_pos",
        "documentation": {}
    },
    {
        "label": "\t_",
        "kind": 5,
        "importPath": "IDE.EDITOR.true_cursor_pos",
        "description": "IDE.EDITOR.true_cursor_pos",
        "peekOfCode": "\t_ = termios.tcgetattr(sys.stdin)\n\t_[3] = _[3] & ~(termios.ECHO | termios.ICANON)\n\ttermios.tcsetattr(sys.stdin, termios.TCSAFLUSH, _)\n\ttry:\n\t\t_ = \"\"\n\t\tsys.stdout.write(\"\\x1b[6n\")\n\t\tsys.stdout.flush()\n\t\twhile not (_ := _+sys.stdin.read(1)).endswith('R'):\n\t\t\tTrue\n\t\tres = re.match(r\".*\\[(?P<y>\\d*);(?P<x>\\d*)R\",_)",
        "detail": "IDE.EDITOR.true_cursor_pos",
        "documentation": {}
    },
    {
        "label": "\t_[3]",
        "kind": 5,
        "importPath": "IDE.EDITOR.true_cursor_pos",
        "description": "IDE.EDITOR.true_cursor_pos",
        "peekOfCode": "\t_[3] = _[3] & ~(termios.ECHO | termios.ICANON)\n\ttermios.tcsetattr(sys.stdin, termios.TCSAFLUSH, _)\n\ttry:\n\t\t_ = \"\"\n\t\tsys.stdout.write(\"\\x1b[6n\")\n\t\tsys.stdout.flush()\n\t\twhile not (_ := _+sys.stdin.read(1)).endswith('R'):\n\t\t\tTrue\n\t\tres = re.match(r\".*\\[(?P<y>\\d*);(?P<x>\\d*)R\",_)\n\tfinally:",
        "detail": "IDE.EDITOR.true_cursor_pos",
        "documentation": {}
    },
    {
        "label": "\t\t_",
        "kind": 5,
        "importPath": "IDE.EDITOR.true_cursor_pos",
        "description": "IDE.EDITOR.true_cursor_pos",
        "peekOfCode": "\t\t_ = \"\"\n\t\tsys.stdout.write(\"\\x1b[6n\")\n\t\tsys.stdout.flush()\n\t\twhile not (_ := _+sys.stdin.read(1)).endswith('R'):\n\t\t\tTrue\n\t\tres = re.match(r\".*\\[(?P<y>\\d*);(?P<x>\\d*)R\",_)\n\tfinally:\n\t\ttermios.tcsetattr(sys.stdin, termios.TCSAFLUSH, OldStdinMode)\n\tif (res):\n\t\treturn (res.group(\"x\"), res.group(\"y\"))",
        "detail": "IDE.EDITOR.true_cursor_pos",
        "documentation": {}
    },
    {
        "label": "\t\tres",
        "kind": 5,
        "importPath": "IDE.EDITOR.true_cursor_pos",
        "description": "IDE.EDITOR.true_cursor_pos",
        "peekOfCode": "\t\tres = re.match(r\".*\\[(?P<y>\\d*);(?P<x>\\d*)R\",_)\n\tfinally:\n\t\ttermios.tcsetattr(sys.stdin, termios.TCSAFLUSH, OldStdinMode)\n\tif (res):\n\t\treturn (res.group(\"x\"), res.group(\"y\"))\n\telse: return (-1, -1)",
        "detail": "IDE.EDITOR.true_cursor_pos",
        "documentation": {}
    },
    {
        "label": "linux",
        "kind": 6,
        "importPath": "IDE.LinuxMain",
        "description": "IDE.LinuxMain",
        "peekOfCode": "class linux:\n    def __init__(self, data_base: dict):\n        # main data base\n        self.data_base  = data_base\n        # contriling string\n        self.analyse    = control_string.STRING_ANALYSE(self.data_base, 1)\n    def terminal(self, c: str = '', terminal_name : str = 'pegasus'):\n        # set color on yellow\n        self.bold           = bm.init.bold\n        self.c              = bm.fg.rbg(255, 255, 0)",
        "detail": "IDE.LinuxMain",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "classes.ClassError",
        "description": "classes.ClassError",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line           = line\n        self.cyan           = bm.fg.cyan_L\n        self.red            = bm.fg.red_L\n        self.green          = bm.fg.green_L\n        self.yellow         = bm.fg.yellow_L\n        self.magenta        = bm.fg.magenta_M\n        self.white          = bm.fg.white_L\n        self.blue           = bm.fg.blue_L",
        "detail": "classes.ClassError",
        "documentation": {}
    },
    {
        "label": "INTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "classes.internalClass",
        "description": "classes.internalClass",
        "peekOfCode": "class INTERNAL_BLOCKS:\n    def __init__(self,\n                 normal_string  : str,          # main string\n                 data_base      : dict,         # data base\n                 line           : int           # current line\n                 ):\n        self.line               = line\n        self.normal_string      = normal_string\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "classes.internalClass",
        "documentation": {}
    },
    {
        "label": "decompressed",
        "kind": 2,
        "importPath": "com_and_decom.com_and_decom",
        "description": "com_and_decom.com_and_decom",
        "peekOfCode": "def decompressed(tar_file, path, members=None):\n    tar = tarfile.open(tar_file, mode=\"r:gz\")\n    progress = tqdm(members)\n    if members is None: members = tar.getmembers()\n    else: pass\n    for member in members:\n        tar.extract(member, path=path)\n        progress.set_description(f\"EXTRACTING {member.name}\")\n    tar.close() \ndef compressed(tar_file, members):",
        "detail": "com_and_decom.com_and_decom",
        "documentation": {}
    },
    {
        "label": "compressed",
        "kind": 2,
        "importPath": "com_and_decom.com_and_decom",
        "description": "com_and_decom.com_and_decom",
        "peekOfCode": "def compressed(tar_file, members):\n    tar = tarfile.open(tar_file, mode=\"w:gz\")\n    progress = tqdm(members)\n    for member in members:\n        tar.add(member)\n        progress.set_description(f'COMPRESSING {member}')\n    tar.close()\n# compressed(\"my_tar.tar.gz\", [\"test.txt, \"test_folder\"])\n# decompressed(\"my_tar.tar.gz\", \"extracted\", None)",
        "detail": "com_and_decom.com_and_decom",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "functions.errorDef",
        "description": "functions.errorDef",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line           = line\n        self.cyan           = bm.fg.cyan_L\n        self.red            = bm.fg.red_L\n        self.green          = bm.fg.green_L\n        self.yellow         = bm.fg.yellow_L\n        self.magenta        = bm.fg.magenta_M\n        self.white          = bm.fg.white_L\n        self.blue           = bm.fg.blue_L",
        "detail": "functions.errorDef",
        "documentation": {}
    },
    {
        "label": "INTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "functions.internalDef",
        "description": "functions.internalDef",
        "peekOfCode": "class INTERNAL_BLOCKS:\n    def __init__(self,\n                 string         : str,          # concatenated string\n                 normal_string  : str,          # normal string\n                 data_base      : dict,         # data base\n                 line           : int           # current line\n                 ):\n        self.line               = line\n        self.string             = string\n        self.normal_string      = normal_string",
        "detail": "functions.internalDef",
        "documentation": {}
    },
    {
        "label": "SELF_METHOD",
        "kind": 6,
        "importPath": "functions.internalDef",
        "description": "functions.internalDef",
        "peekOfCode": "class SELF_METHOD:\n    def __init__(self,\n                 master     : str,      # string\n                 data_base  : dict,     # data base\n                 line       : int       # current line\n                 ):\n        self.master         = master\n        self.line           = line\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE(self.data_base, self.line)",
        "detail": "functions.internalDef",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "loop.error",
        "description": "loop.error",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "loop.error",
        "documentation": {}
    },
    {
        "label": "MAIN_FO",
        "kind": 6,
        "importPath": "loop.mainFor",
        "description": "loop.mainFor",
        "peekOfCode": "class MAIN_FOR          :\n    def __init__(self,\n        master         : dict,             #\n        data_base      : dict,             #\n        line           : int               #\n        ):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.num_lex        = numeric_lexer",
        "detail": "loop.mainFor",
        "documentation": {}
    },
    {
        "label": "VARIABLE_CHECKIN",
        "kind": 6,
        "importPath": "loop.mainFor",
        "description": "loop.mainFor",
        "peekOfCode": "class VARIABLE_CHECKING :\n    def __init__(self,\n                 master         : any,              #\n                 data_base      : dict,             #\n                 line           : int               #\n                 ):\n        self.master             = master\n        self.line               = line\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "loop.mainFor",
        "documentation": {}
    },
    {
        "label": "FOR_BLOC",
        "kind": 6,
        "importPath": "loop.mainFor",
        "description": "loop.mainFor",
        "peekOfCode": "class FOR_BLOCK         :\n    def __init__(self,\n                data_base      : dict,             #\n                line           : int ,             #\n                normal_string  : str               #\n                ):\n        self.data_base          = data_base\n        self.line               = line\n        self.normal_string      = normal_string\n        self.control            = control_string.STRING_ANALYSE(self.data_base, self.line)",
        "detail": "loop.mainFor",
        "documentation": {}
    },
    {
        "label": "fg",
        "kind": 6,
        "importPath": "script.DATA_BASE.ansi",
        "description": "script.DATA_BASE.ansi",
        "peekOfCode": "class fg:\n    def __init__(self, char: str, line: int):\n        self.char                   = char\n        self.line                   = line\n    def fg(self):\n        self.error                  = None\n        self.ansi                   = ''\n        self.num, self.error        = number( self.char, self.line ).get_number(  )\n        if self.error is None:\n            self.num                = self.num[ 0 ]",
        "detail": "script.DATA_BASE.ansi",
        "documentation": {}
    },
    {
        "label": "bg",
        "kind": 6,
        "importPath": "script.DATA_BASE.ansi",
        "description": "script.DATA_BASE.ansi",
        "peekOfCode": "class bg:\n    def __init__(self, char, line: int):\n        self.char                   = char\n        self.line                   = line\n    def bg(self):\n        self.error                  = None\n        self.ansi                   = ''\n        self.num, self.error        = number( self.char, self.line ).get_number(  )\n        if self.error is None:\n            self.num                = self.num[ 1 ]",
        "detail": "script.DATA_BASE.ansi",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 6,
        "importPath": "script.DATA_BASE.ansi",
        "description": "script.DATA_BASE.ansi",
        "peekOfCode": "class reset:\n    def __init__(self, char: str, line :int):\n        self.char               = char\n        self.line               = line\n    def reset(self):\n        self.error              = None\n        self.ansi               = ''\n        self.num, self.error    = number( self.char, self.line ).get_number( )\n        if self.error is None:\n            self.num            = self.num[ 0 ]",
        "detail": "script.DATA_BASE.ansi",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "importPath": "script.DATA_BASE.ansi",
        "description": "script.DATA_BASE.ansi",
        "peekOfCode": "class config:\n    def __init__(self, char: str, line: int):\n        self.char               = char\n        self.line               = line\n    def bold(self):\n        self.error              = None\n        self.ansi               = ''\n        self.num, self.error    = number( self.char, self.line ).get_number()\n        if self.error is None:\n            self.num            = self.num[ 0 ]",
        "detail": "script.DATA_BASE.ansi",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 6,
        "importPath": "script.DATA_BASE.ansi",
        "description": "script.DATA_BASE.ansi",
        "peekOfCode": "class output:\n    def __init__(self, char: int, line: int, _type_:str):\n        self.line       = line\n        self.char       = char\n        self._type_     = _type_\n    def output(self):\n        self.ansi       = ''\n        self.error      = None\n        if   self._type_ in [ 'fg']:\n            self.ansi, self.error = fg( self.char, self.line ).fg()",
        "detail": "script.DATA_BASE.ansi",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 6,
        "importPath": "script.DATA_BASE.ansi",
        "description": "script.DATA_BASE.ansi",
        "peekOfCode": "class number:\n    def __init__(self, char: str, line : int):\n        self.char           = char\n        self.line           = line\n    def get_number(self):\n        self.error = None\n        if   self.char == 'R'    :      return (31, 41), None\n        elif self.char == 'G'    :      return (32, 42), None\n        elif self.char == 'Y'    :      return (33, 43), None\n        elif self.char == 'B'    :      return (34, 44), None",
        "detail": "script.DATA_BASE.ansi",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "kind": 6,
        "importPath": "script.DATA_BASE.ansi",
        "description": "script.DATA_BASE.ansi",
        "peekOfCode": "class ERROR:\n    def __init__(self, line: int):\n        self.line           = line\n        self.ve             = u\"\\u001b[32;1m\"\n        self.ae             = u\"\\u001b[36;1m\"\n        self.ne             = u\"\\u001b[31;1m\"\n        self.we             = u\"\\u001b[37;1m\"\n        self.ke             = u\"\\u001b[33;1m\"\n        self.reset          = u\"\\u001b[0m\"\n        self.func           = '{}in {}ansi( ) function. '.format(self.ae, self.ve)",
        "detail": "script.DATA_BASE.ansi",
        "documentation": {}
    },
    {
        "label": "DATA_BASE",
        "kind": 6,
        "importPath": "script.DATA_BASE.data_base",
        "description": "script.DATA_BASE.data_base",
        "peekOfCode": "class DATA_BASE:\n    def __init__(self):\n        pass\n    def STORAGE(self):\n        self.function_name, self.function_expressions = DATA_BASE().FUNCTIONS()\n        self.data_base      = {\n        'global_vars'       : {             # dict for variables and theirs values \n            'vars'          : [],           # variables\n            'values'        : []            # values\n            },",
        "detail": "script.DATA_BASE.data_base",
        "documentation": {}
    },
    {
        "label": "CLASS",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.class_",
        "description": "script.LEXER.FUNCTION.class_",
        "peekOfCode": "class CLASS:\n    def __init__(self, master: list, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.accepted_chars = self.control.LOWER_CASE()+self.control.LOWER_CASE()+['_']\n        self.selection      = particular_str_selection\n    def CLASS_INIT(self, main_string: str):\n        self.master         = self.master[ 0 ]",
        "detail": "script.LEXER.FUNCTION.class_",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.class_",
        "description": "script.LEXER.FUNCTION.class_",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line           = line\n    def ERROR0(self, string: str):\n        error = '{}line: {}{}'.format(we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >>. '.format(ke, 'SyntaxError', ae, string) + error\n        return self.error\n    def ERROR1(self, string: str):\n        self._str_ = '{}type {}help( {}class_name{} ) {} for more informations. '.format(we, te, ke, te, we)\n        error = '{}in {}<< {} >> .{}line: {}{}.\\n{}'.format(ne, ve, string, we, ke, self.line, self._str_)",
        "detail": "script.LEXER.FUNCTION.class_",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.class_",
        "description": "script.LEXER.FUNCTION.class_",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass CLASS:\n    def __init__(self, master: list, data_base: dict, line: int):",
        "detail": "script.LEXER.FUNCTION.class_",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.class_",
        "description": "script.LEXER.FUNCTION.class_",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass CLASS:\n    def __init__(self, master: list, data_base: dict, line: int):\n        self.line           = line",
        "detail": "script.LEXER.FUNCTION.class_",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.class_",
        "description": "script.LEXER.FUNCTION.class_",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass CLASS:\n    def __init__(self, master: list, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master",
        "detail": "script.LEXER.FUNCTION.class_",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.class_",
        "description": "script.LEXER.FUNCTION.class_",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass CLASS:\n    def __init__(self, master: list, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.LEXER.FUNCTION.class_",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.class_",
        "description": "script.LEXER.FUNCTION.class_",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass CLASS:\n    def __init__(self, master: list, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.LEXER.FUNCTION.class_",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.class_",
        "description": "script.LEXER.FUNCTION.class_",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass CLASS:\n    def __init__(self, master: list, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.accepted_chars = self.control.LOWER_CASE()+self.control.LOWER_CASE()+['_']",
        "detail": "script.LEXER.FUNCTION.class_",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.class_",
        "description": "script.LEXER.FUNCTION.class_",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass CLASS:\n    def __init__(self, master: list, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.accepted_chars = self.control.LOWER_CASE()+self.control.LOWER_CASE()+['_']\n        self.selection      = particular_str_selection",
        "detail": "script.LEXER.FUNCTION.class_",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.class_",
        "description": "script.LEXER.FUNCTION.class_",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass CLASS:\n    def __init__(self, master: list, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.accepted_chars = self.control.LOWER_CASE()+self.control.LOWER_CASE()+['_']\n        self.selection      = particular_str_selection\n    def CLASS_INIT(self, main_string: str):",
        "detail": "script.LEXER.FUNCTION.class_",
        "documentation": {}
    },
    {
        "label": "DELETE",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "class DELETE:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.selection          = particular_str_selection\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.get_val            = get_var_name\n        self.variables          = self.data_base[ 'variables' ][ 'vars' ]\n        self._values_           = self.data_base[ 'variables' ][ 'values' ]",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "FIRST_CASE",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "class FIRST_CASE:\n    def __init__(self, master: any, data_base:dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n    def FIRST(self, value: any):\n        self.error              = None\n        self.value              = value\n        self.type               = type( self.value )\n        if type( self.master ) == type( int() ):",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "SECOND_CASE",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "class SECOND_CASE:\n    def __init__(self, master: any, data_base:dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n    def SECOND_CASE(self, value: any):\n        self.error              = None\n        self.value              = value\n        self.type               = type( self.value )\n        self.master1            = self.master[ 0 ]",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n    def ERROR0(self, string: str):\n        error = '{}line: {}{}'.format(we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >> '.format(ke, 'SyntaxError', ae, string) + error\n        return self.error\n    def ERROR1(self, string: str, _char_ = 'an integer()' ):\n        error = '{}is not {}{} {}type. {}line: {}{}'.format(te, ie, _char_, te, we, ke, self.line)\n        self.error = '{}{} : {}<< {} >> '.format(te, 'TypeError', ae, string) + error",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass DELETE:",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass DELETE:\n    def __init__(self, master: str, data_base: dict, line: int):",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass DELETE:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line               = line",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass DELETE:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass DELETE:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass DELETE:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.selection          = particular_str_selection",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass DELETE:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.selection          = particular_str_selection\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "me",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "me = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass DELETE:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.selection          = particular_str_selection\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.get_val            = get_var_name",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "le",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.delete",
        "description": "script.LEXER.FUNCTION.delete",
        "peekOfCode": "le = Fore.RED\nclass DELETE:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.selection          = particular_str_selection\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.get_val            = get_var_name\n        self.variables          = self.data_base[ 'variables' ][ 'vars' ]",
        "detail": "script.LEXER.FUNCTION.delete",
        "documentation": {}
    },
    {
        "label": "FUNCTION",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.function",
        "description": "script.LEXER.FUNCTION.function",
        "peekOfCode": "class FUNCTION:\n    def __init__(self, master: list, data_base: dict, line: int):\n        self.__str          = particular_str_selection\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.accepted_chars = self.control.LOWER_CASE()+self.control.LOWER_CASE()+['_']\n    def FUNCTION_INIT(self, main_string: str, method = '1st', _type_ = 'direct'):\n        self.type           = ['none', 'integer', 'float', 'boolean', 'complex', 'list', 'tuple', ",
        "detail": "script.LEXER.FUNCTION.function",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.function",
        "description": "script.LEXER.FUNCTION.function",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.LEXER.FUNCTION.function",
        "documentation": {}
    },
    {
        "label": "FUNCTION",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.function_rebuild",
        "description": "script.LEXER.FUNCTION.function_rebuild",
        "peekOfCode": "class FUNCTION:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.function       = looking_for_init_function\n    def FUNCTION(self, main_string: str):\n        self.master         = self.master[ 'value' ]\n        self.error          = None",
        "detail": "script.LEXER.FUNCTION.function_rebuild",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.function_rebuild",
        "description": "script.LEXER.FUNCTION.function_rebuild",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line           = line\n    def ERROR0(self, string: str):\n        error = '{}line: {}{}'.format(we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >>. '.format(ke, 'SyntaxError', ae, string) + error\n        return self.error",
        "detail": "script.LEXER.FUNCTION.function_rebuild",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.function_rebuild",
        "description": "script.LEXER.FUNCTION.function_rebuild",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION:\n    def __init__(self, master: dict, data_base: dict, line: int):",
        "detail": "script.LEXER.FUNCTION.function_rebuild",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.function_rebuild",
        "description": "script.LEXER.FUNCTION.function_rebuild",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line           = line",
        "detail": "script.LEXER.FUNCTION.function_rebuild",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.function_rebuild",
        "description": "script.LEXER.FUNCTION.function_rebuild",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master",
        "detail": "script.LEXER.FUNCTION.function_rebuild",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.function_rebuild",
        "description": "script.LEXER.FUNCTION.function_rebuild",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.LEXER.FUNCTION.function_rebuild",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.function_rebuild",
        "description": "script.LEXER.FUNCTION.function_rebuild",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.LEXER.FUNCTION.function_rebuild",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.function_rebuild",
        "description": "script.LEXER.FUNCTION.function_rebuild",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.function       = looking_for_init_function",
        "detail": "script.LEXER.FUNCTION.function_rebuild",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.function_rebuild",
        "description": "script.LEXER.FUNCTION.function_rebuild",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.function       = looking_for_init_function\n    def FUNCTION(self, main_string: str):",
        "detail": "script.LEXER.FUNCTION.function_rebuild",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.function_rebuild",
        "description": "script.LEXER.FUNCTION.function_rebuild",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass FUNCTION:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.function       = looking_for_init_function\n    def FUNCTION(self, main_string: str):\n        self.master         = self.master[ 'value' ]",
        "detail": "script.LEXER.FUNCTION.function_rebuild",
        "documentation": {}
    },
    {
        "label": "GLOBAL",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.global_",
        "description": "script.LEXER.FUNCTION.global_",
        "peekOfCode": "class GLOBAL:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line)\n    def GLOBAL(self, value: str):\n        self.main_string    = ''\n        self.string         = ''\n        self.error          = None",
        "detail": "script.LEXER.FUNCTION.global_",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.global_",
        "description": "script.LEXER.FUNCTION.global_",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n    def ERROR0(self, string: str):\n        error = '{}line: {}{}'.format(we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >>. '.format(ke, 'SyntaxError', ae, string) + error\n        return self.error\n    def ERROR1(self, string: str):\n        self._str_ = '{}type {}help( {}var_name{} ) {} for more informations. '.format(we, te, ke, te, we)\n        error = '{}in {}<< {} >> .{}line: {}{}.\\n{}'.format(ne, ve, string, we, ke, self.line, self._str_)",
        "detail": "script.LEXER.FUNCTION.global_",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.global_",
        "description": "script.LEXER.FUNCTION.global_",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass GLOBAL:\n    def __init__(self, master: str, data_base: dict, line: int):",
        "detail": "script.LEXER.FUNCTION.global_",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.global_",
        "description": "script.LEXER.FUNCTION.global_",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass GLOBAL:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master",
        "detail": "script.LEXER.FUNCTION.global_",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.global_",
        "description": "script.LEXER.FUNCTION.global_",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass GLOBAL:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.LEXER.FUNCTION.global_",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.global_",
        "description": "script.LEXER.FUNCTION.global_",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass GLOBAL:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line",
        "detail": "script.LEXER.FUNCTION.global_",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.global_",
        "description": "script.LEXER.FUNCTION.global_",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass GLOBAL:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line)",
        "detail": "script.LEXER.FUNCTION.global_",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.global_",
        "description": "script.LEXER.FUNCTION.global_",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass GLOBAL:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line)\n    def GLOBAL(self, value: str):",
        "detail": "script.LEXER.FUNCTION.global_",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.global_",
        "description": "script.LEXER.FUNCTION.global_",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass GLOBAL:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line)\n    def GLOBAL(self, value: str):\n        self.main_string    = ''",
        "detail": "script.LEXER.FUNCTION.global_",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.global_",
        "description": "script.LEXER.FUNCTION.global_",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass GLOBAL:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line)\n    def GLOBAL(self, value: str):\n        self.main_string    = ''\n        self.string         = ''",
        "detail": "script.LEXER.FUNCTION.global_",
        "documentation": {}
    },
    {
        "label": "LAMBDA",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.lambda_",
        "description": "script.LEXER.FUNCTION.lambda_",
        "peekOfCode": "class LAMBDA:\n    def __init__(self, data_base, line):\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line)\n        self.selection      = particular_str_selection\n    def LAMBDA(self, value: str = \"\"):\n        self.error          = None\n        self.main_string    = value\n        self.long_string    = 'lambda ' + self.main_string",
        "detail": "script.LEXER.FUNCTION.lambda_",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.lambda_",
        "description": "script.LEXER.FUNCTION.lambda_",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.LEXER.FUNCTION.lambda_",
        "documentation": {}
    },
    {
        "label": "LIST",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.list_access",
        "description": "script.LEXER.FUNCTION.list_access",
        "peekOfCode": "class LIST:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def",
        "detail": "script.LEXER.FUNCTION.list_access",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.list_access",
        "description": "script.LEXER.FUNCTION.list_access",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass LIST:\n    def __init__(self, master: str, data_base: dict, line: int):",
        "detail": "script.LEXER.FUNCTION.list_access",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.list_access",
        "description": "script.LEXER.FUNCTION.list_access",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass LIST:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line",
        "detail": "script.LEXER.FUNCTION.list_access",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.list_access",
        "description": "script.LEXER.FUNCTION.list_access",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass LIST:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master",
        "detail": "script.LEXER.FUNCTION.list_access",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.list_access",
        "description": "script.LEXER.FUNCTION.list_access",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass LIST:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.LEXER.FUNCTION.list_access",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.list_access",
        "description": "script.LEXER.FUNCTION.list_access",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass LIST:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.LEXER.FUNCTION.list_access",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.list_access",
        "description": "script.LEXER.FUNCTION.list_access",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass LIST:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def",
        "detail": "script.LEXER.FUNCTION.list_access",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.list_access",
        "description": "script.LEXER.FUNCTION.list_access",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass LIST:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def",
        "detail": "script.LEXER.FUNCTION.list_access",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.LEXER.FUNCTION.list_access",
        "description": "script.LEXER.FUNCTION.list_access",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass LIST:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def",
        "detail": "script.LEXER.FUNCTION.list_access",
        "documentation": {}
    },
    {
        "label": "MAIN",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.main",
        "description": "script.LEXER.FUNCTION.main",
        "peekOfCode": "class MAIN:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.line           = line\n        self.data_base      = data_base\n        self.lex            = main_lexer\n        self.tab            = checking_tabulation\n        self.affectation    = check_if_affectation\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def MAIN(self, _id_: int = 1, _type_ : any = None, _key_:bool = False, def_key:str = 'direct', ",
        "detail": "script.LEXER.FUNCTION.main",
        "documentation": {}
    },
    {
        "label": "SCANNER",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.main",
        "description": "script.LEXER.FUNCTION.main",
        "peekOfCode": "class SCANNER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.line           = line\n        self.data_base      = data_base\n        self.lex            = main_lexer\n        self.tab            = checking_tabulation\n        self.affectation    = check_if_affectation\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def SCANNER(self, _id_: int = 1, _type_ : any = None, _key_:bool = False):",
        "detail": "script.LEXER.FUNCTION.main",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.main",
        "description": "script.LEXER.FUNCTION.main",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.LEXER.FUNCTION.main",
        "documentation": {}
    },
    {
        "label": "PRINT",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.print_value",
        "description": "script.LEXER.FUNCTION.print_value",
        "peekOfCode": "class PRINT:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.selection          = particular_str_selection\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.lex_par            = numeric_lexer\n    def PRINT(self, key : bool = False, term : str = 'orion'):\n        self.error              = None",
        "detail": "script.LEXER.FUNCTION.print_value",
        "documentation": {}
    },
    {
        "label": "PRINT_PRINT",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.print_value",
        "description": "script.LEXER.FUNCTION.print_value",
        "peekOfCode": "class PRINT_PRINT:\n    def __init__(self, master: any, data_base: dict, line: int=1,  normal_string: str = \"\"):\n        self.master         = master\n        self.data_base      = data_base\n        self.normal_string  = normal_string\n        self.line           = line\n        self.orange         = bm.fg.rbg(252, 127, 0 )\n        self.cyan           = bm.fg.cyan_L\n        self.red            = bm.fg.red_L\n        self.green          = bm.fg.green_L",
        "detail": "script.LEXER.FUNCTION.print_value",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.print_value",
        "description": "script.LEXER.FUNCTION.print_value",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line           = line\n        self.cyan           = bm.fg.cyan_L\n        self.red            = bm.fg.red_L\n        self.green          = bm.fg.green_L\n        self.yellow         = bm.fg.yellow_L\n        self.magenta        = bm.fg.magenta_M\n        self.white          = bm.fg.white_L\n        self.blue           = bm.fg.blue_L",
        "detail": "script.LEXER.FUNCTION.print_value",
        "documentation": {}
    },
    {
        "label": "RETURN",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.return_",
        "description": "script.LEXER.FUNCTION.return_",
        "peekOfCode": "class RETURN:\n    def __init__(self, master, data_base, line):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line)\n        self.selection      = particular_str_selection\n    def RETURN(self, value: str):\n        self.error          = None\n        self.main_string    = value",
        "detail": "script.LEXER.FUNCTION.return_",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.return_",
        "description": "script.LEXER.FUNCTION.return_",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.LEXER.FUNCTION.return_",
        "documentation": {}
    },
    {
        "label": "C_F_I_S",
        "kind": 6,
        "importPath": "script.LEXER.FUNCTION.transformation",
        "description": "script.LEXER.FUNCTION.transformation",
        "peekOfCode": "class C_F_I_S:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.selection          = particular_str_selection\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.lex_par            = numeric_lexer\n    def FUNCTION(self, function = '_int_', term : str = 'orion'):\n        self.error              = None",
        "detail": "script.LEXER.FUNCTION.transformation",
        "documentation": {}
    },
    {
        "label": "color_ansi",
        "kind": 2,
        "importPath": "script.LEXER.FUNCTION.transformation",
        "description": "script.LEXER.FUNCTION.transformation",
        "peekOfCode": "def color_ansi( master, func, line):\n    err = None\n    list_ = ['r', 'g', 'b']\n    for i, j in enumerate(master):\n        if 0 <= j <= 256: pass \n        else: \n            err = er.ERRORS( line ).ERROR40( func, list_[i] )\n            break \n    return err\nclass C_F_I_S:",
        "detail": "script.LEXER.FUNCTION.transformation",
        "documentation": {}
    },
    {
        "label": "AFFECTATION",
        "kind": 6,
        "importPath": "script.LEXER.check_if_affectation",
        "description": "script.LEXER.check_if_affectation",
        "peekOfCode": "class AFFECTATION:\n    def __init__(self, \n            master          : str, \n            long_chaine     : str, \n            data_base       : dict, \n            line            : int\n            ):\n        # main string\n        self.master         = master\n        # main string",
        "detail": "script.LEXER.check_if_affectation",
        "documentation": {}
    },
    {
        "label": "BACKSSLASH",
        "kind": 6,
        "importPath": "script.LEXER.checking_if_backslash",
        "description": "script.LEXER.checking_if_backslash",
        "peekOfCode": "class BACKSSLASH:\n    def __init__(self, master, data_base, line):\n        self.master             = master\n        self.data_base          = data_base\n        self.line               = line\n        self.analyze            = control_string.STRING_ANALYSE(self.data_base, self.line)\n    def BACKSLASH(self, _id_: int = 1):\n        self.error              = None\n        self.string_line        = 0\n        self.space              = 0",
        "detail": "script.LEXER.checking_if_backslash",
        "documentation": {}
    },
    {
        "label": "DEEP_CHECKING",
        "kind": 6,
        "importPath": "script.LEXER.checking_if_backslash",
        "description": "script.LEXER.checking_if_backslash",
        "peekOfCode": "class DEEP_CHECKING:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n    def BACKSLASH(self, main_string: str):\n        self.error              = None\n        self.backend            = 0\n        self.frontend            = 0\n        self.line               = None",
        "detail": "script.LEXER.checking_if_backslash",
        "documentation": {}
    },
    {
        "label": "BACKSSLASH_FOR_INTERPRETER",
        "kind": 6,
        "importPath": "script.LEXER.checking_if_backslash",
        "description": "script.LEXER.checking_if_backslash",
        "peekOfCode": "class BACKSSLASH_FOR_INTERPRETER:\n    def __init__(self, master, data_base, line):\n        self.master             = master\n        self.data_base          = data_base\n        self.line               = line\n        self.analyze            = control_string.STRING_ANALYSE(self.data_base, self.line)\n    def BACKSLASH(self, _id_: int , MainList : list = []):\n        self.error              = None\n        self.string_line        = 0\n        self.space              = 0",
        "detail": "script.LEXER.checking_if_backslash",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.LEXER.checking_if_backslash",
        "description": "script.LEXER.checking_if_backslash",
        "peekOfCode": "ie = bm.fg.blue_L\nve = bm.fg.rbg(0, 255, 0)\nte = bm.fg.magenta_M\nclass BACKSSLASH:\n    def __init__(self, master, data_base, line):\n        self.master             = master\n        self.data_base          = data_base\n        self.line               = line\n        self.analyze            = control_string.STRING_ANALYSE(self.data_base, self.line)\n    def BACKSLASH(self, _id_: int = 1):",
        "detail": "script.LEXER.checking_if_backslash",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.LEXER.checking_if_backslash",
        "description": "script.LEXER.checking_if_backslash",
        "peekOfCode": "ve = bm.fg.rbg(0, 255, 0)\nte = bm.fg.magenta_M\nclass BACKSSLASH:\n    def __init__(self, master, data_base, line):\n        self.master             = master\n        self.data_base          = data_base\n        self.line               = line\n        self.analyze            = control_string.STRING_ANALYSE(self.data_base, self.line)\n    def BACKSLASH(self, _id_: int = 1):\n        self.error              = None",
        "detail": "script.LEXER.checking_if_backslash",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.LEXER.checking_if_backslash",
        "description": "script.LEXER.checking_if_backslash",
        "peekOfCode": "te = bm.fg.magenta_M\nclass BACKSSLASH:\n    def __init__(self, master, data_base, line):\n        self.master             = master\n        self.data_base          = data_base\n        self.line               = line\n        self.analyze            = control_string.STRING_ANALYSE(self.data_base, self.line)\n    def BACKSLASH(self, _id_: int = 1):\n        self.error              = None\n        self.string_line        = 0",
        "detail": "script.LEXER.checking_if_backslash",
        "documentation": {}
    },
    {
        "label": "CHECK_TAB",
        "kind": 6,
        "importPath": "script.LEXER.checking_tabulation",
        "description": "script.LEXER.checking_tabulation",
        "peekOfCode": "class CHECK_TAB:\n    def __init__(self,\n                master      : str,      #   that's the concatenate main string\n                long_chaine : str,      #   non-concatenate main string\n                data_base   : dict,     #   the data base containing all informations that will be used by the parxer\n                line        : int       #   current line number\n                ):\n        self.master         = master                                                                                    # concatenate main string\n        self.long_chaine    = long_chaine                                                                               # non-concatenate main string\n        self.line           = line                                                                                      # currently line",
        "detail": "script.LEXER.checking_tabulation",
        "documentation": {}
    },
    {
        "label": "CHECK_TAB_FOR_INTERPRETER",
        "kind": 6,
        "importPath": "script.LEXER.checking_tabulation",
        "description": "script.LEXER.checking_tabulation",
        "peekOfCode": "class CHECK_TAB_FOR_INTERPRETER:\n    def __init__(self,\n                        master      : str,      #   that's the concatenate main string\n                        long_chaine : str,      #   non-concatenate main string\n                        data_base   : dict,     #   the data base containing all informations that will be used by the parxer\n                        line        : int       #   current line number\n                ):\n        self.master         = master                                                                                    # concatenate main string\n        self.long_chaine    = long_chaine                                                                               # non-concatenate main string\n        self.line           = line                                                                                      # currently line",
        "detail": "script.LEXER.checking_tabulation",
        "documentation": {}
    },
    {
        "label": "COMMENT_LINE",
        "kind": 6,
        "importPath": "script.LEXER.comment_line",
        "description": "script.LEXER.comment_line",
        "peekOfCode": "class COMMENT_LINE:\n    def __init__(self,\n                    master      : str,      # concatenate main string\n                    data_base   : dict,     # the data base\n                    line        : int       # current line\n                 ):\n        self.master             = master\n        self.line               = line\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.LEXER.comment_line",
        "documentation": {}
    },
    {
        "label": "DICTIONNARY",
        "kind": 6,
        "importPath": "script.LEXER.dictionnary_analysis",
        "description": "script.LEXER.dictionnary_analysis",
        "peekOfCode": "class DICTIONNARY:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection      = particular_str_selection\n        self.float_or_func  = float_or_function\n    def ANALYSES(self, main_string: str):\n        self.error          = None",
        "detail": "script.LEXER.dictionnary_analysis",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.dictionnary_analysis",
        "description": "script.LEXER.dictionnary_analysis",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n    def ERROR0(self, string: str):\n        error = '{}line: {}{}'.format(we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >>. '.format(ke, 'SyntaxError', ae, string) + error\n        return self.error\n    def ERROR1(self, string: str):\n        error = '{}due to bad {}<< $ >> {}position. {}line: {}{}'.format(ke, ie, ke, we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >>. '.format(ke, 'SyntaxError', ae, string) + error",
        "detail": "script.LEXER.dictionnary_analysis",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.LEXER.dictionnary_analysis",
        "description": "script.LEXER.dictionnary_analysis",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass DICTIONNARY:\n    def __init__(self, master: str, data_base: dict, line: int):",
        "detail": "script.LEXER.dictionnary_analysis",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.LEXER.dictionnary_analysis",
        "description": "script.LEXER.dictionnary_analysis",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass DICTIONNARY:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line",
        "detail": "script.LEXER.dictionnary_analysis",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.LEXER.dictionnary_analysis",
        "description": "script.LEXER.dictionnary_analysis",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass DICTIONNARY:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master",
        "detail": "script.LEXER.dictionnary_analysis",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.LEXER.dictionnary_analysis",
        "description": "script.LEXER.dictionnary_analysis",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass DICTIONNARY:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.LEXER.dictionnary_analysis",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.LEXER.dictionnary_analysis",
        "description": "script.LEXER.dictionnary_analysis",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass DICTIONNARY:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.LEXER.dictionnary_analysis",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.LEXER.dictionnary_analysis",
        "description": "script.LEXER.dictionnary_analysis",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass DICTIONNARY:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection      = particular_str_selection",
        "detail": "script.LEXER.dictionnary_analysis",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.LEXER.dictionnary_analysis",
        "description": "script.LEXER.dictionnary_analysis",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass DICTIONNARY:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection      = particular_str_selection\n        self.float_or_func  = float_or_function",
        "detail": "script.LEXER.dictionnary_analysis",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.LEXER.dictionnary_analysis",
        "description": "script.LEXER.dictionnary_analysis",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass DICTIONNARY:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection      = particular_str_selection\n        self.float_or_func  = float_or_function\n    def ANALYSES(self, main_string: str):",
        "detail": "script.LEXER.dictionnary_analysis",
        "documentation": {}
    },
    {
        "label": "DOT",
        "kind": 6,
        "importPath": "script.LEXER.float_or_function",
        "description": "script.LEXER.float_or_function",
        "peekOfCode": "class DOT:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.long_chaine    = master\n        self.number         = segmentation.NUMBER()\n        self.string_error   = segmentation.ERROR( self.line )\n        self.str_control    = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.accepted_chars = self.str_control.UPPER_CASE() + self.str_control.LOWER_CASE()",
        "detail": "script.LEXER.float_or_function",
        "documentation": {}
    },
    {
        "label": "FINAL_TREATMENT",
        "kind": 6,
        "importPath": "script.LEXER.float_or_function",
        "description": "script.LEXER.float_or_function",
        "peekOfCode": "class FINAL_TREATMENT:\n    def __init__(self, master: list, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.class_             = class_\n        self.function           = function\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.accepted_chars     = self.control.UPPER_CASE()+self.control.LOWER_CASE()\n    def FINAL(self, main_string: str):",
        "detail": "script.LEXER.float_or_function",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.float_or_function",
        "description": "script.LEXER.float_or_function",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.LEXER.float_or_function",
        "documentation": {}
    },
    {
        "label": "ARITHMETIC_OPERATORS",
        "kind": 6,
        "importPath": "script.LEXER.looking_for_arithmetic_operators",
        "description": "script.LEXER.looking_for_arithmetic_operators",
        "peekOfCode": "class ARITHMETIC_OPERATORS:\n    def __init__(self, master: str , data_base:dict, line: int):\n        self.line                   = line\n        self.master                 = master\n        self.long_chaine            = master\n        self.data_base              = data_base\n        self.dict                   = dictionnary_analysis\n        self.number                 = segmentation.NUMBER()\n        self.string_error           = segmentation.ERROR( self.line )\n        self.all_chars              = segmentation.CHARS()",
        "detail": "script.LEXER.looking_for_arithmetic_operators",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.looking_for_arithmetic_operators",
        "description": "script.LEXER.looking_for_arithmetic_operators",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.LEXER.looking_for_arithmetic_operators",
        "documentation": {}
    },
    {
        "label": "BOOLEAN_OPERATORS",
        "kind": 6,
        "importPath": "script.LEXER.looking_for_bool_operators",
        "description": "script.LEXER.looking_for_bool_operators",
        "peekOfCode": "class BOOLEAN_OPERATORS:\n    def __init__(self, master, data_base, line):\n        self.master                 = master\n        self.long_chaine            = master\n        self.data_base              = data_base\n        self.line                   = line\n        self.number                 = segmentation.NUMBER()\n        self.string_error           = segmentation.ERROR( self.line )\n        self.all_chars              = segmentation.CHARS()\n        self.control                = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.LEXER.looking_for_bool_operators",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.looking_for_bool_operators",
        "description": "script.LEXER.looking_for_bool_operators",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n    def ERROR0(self, string: str):\n        error = '{}line: {}{}'.format(we,ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >>. '.format(ke, 'SyntaxError', ae, string) + error\n        return self.error\n    def ERROR1(self, string1: str, string2: str, char: str):\n        error = '{}due to {}undefined {}space between {}<< {} >> {}and {}<< {} >>. {}line: {}{}'.format(ke, ve, ke,\n                                                                            ne, string2, ke, ie, char, we, ke, self.line)",
        "detail": "script.LEXER.looking_for_bool_operators",
        "documentation": {}
    },
    {
        "label": "INV",
        "kind": 6,
        "importPath": "script.LEXER.looking_for_bool_operators",
        "description": "script.LEXER.looking_for_bool_operators",
        "peekOfCode": "class INV:\n    def INV_TRANSFORM(self, string):\n        if string == '||':\n            string = 'or'\n        elif string == '&&':\n            string = 'and'\n        elif string == '|&|':\n            string = 'only'\n        else:\n            pass",
        "detail": "script.LEXER.looking_for_bool_operators",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_bool_operators",
        "description": "script.LEXER.looking_for_bool_operators",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN_OPERATORS:\n    def __init__(self, master, data_base, line):",
        "detail": "script.LEXER.looking_for_bool_operators",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_bool_operators",
        "description": "script.LEXER.looking_for_bool_operators",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN_OPERATORS:\n    def __init__(self, master, data_base, line):\n        self.master                 = master",
        "detail": "script.LEXER.looking_for_bool_operators",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_bool_operators",
        "description": "script.LEXER.looking_for_bool_operators",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN_OPERATORS:\n    def __init__(self, master, data_base, line):\n        self.master                 = master\n        self.long_chaine            = master",
        "detail": "script.LEXER.looking_for_bool_operators",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_bool_operators",
        "description": "script.LEXER.looking_for_bool_operators",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN_OPERATORS:\n    def __init__(self, master, data_base, line):\n        self.master                 = master\n        self.long_chaine            = master\n        self.data_base              = data_base",
        "detail": "script.LEXER.looking_for_bool_operators",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_bool_operators",
        "description": "script.LEXER.looking_for_bool_operators",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN_OPERATORS:\n    def __init__(self, master, data_base, line):\n        self.master                 = master\n        self.long_chaine            = master\n        self.data_base              = data_base\n        self.line                   = line",
        "detail": "script.LEXER.looking_for_bool_operators",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_bool_operators",
        "description": "script.LEXER.looking_for_bool_operators",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN_OPERATORS:\n    def __init__(self, master, data_base, line):\n        self.master                 = master\n        self.long_chaine            = master\n        self.data_base              = data_base\n        self.line                   = line\n        self.number                 = segmentation.NUMBER()",
        "detail": "script.LEXER.looking_for_bool_operators",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_bool_operators",
        "description": "script.LEXER.looking_for_bool_operators",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN_OPERATORS:\n    def __init__(self, master, data_base, line):\n        self.master                 = master\n        self.long_chaine            = master\n        self.data_base              = data_base\n        self.line                   = line\n        self.number                 = segmentation.NUMBER()\n        self.string_error           = segmentation.ERROR( self.line )",
        "detail": "script.LEXER.looking_for_bool_operators",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_bool_operators",
        "description": "script.LEXER.looking_for_bool_operators",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass BOOLEAN_OPERATORS:\n    def __init__(self, master, data_base, line):\n        self.master                 = master\n        self.long_chaine            = master\n        self.data_base              = data_base\n        self.line                   = line\n        self.number                 = segmentation.NUMBER()\n        self.string_error           = segmentation.ERROR( self.line )\n        self.all_chars              = segmentation.CHARS()",
        "detail": "script.LEXER.looking_for_bool_operators",
        "documentation": {}
    },
    {
        "label": "FUNCTION_INIT",
        "kind": 6,
        "importPath": "script.LEXER.looking_for_init_function",
        "description": "script.LEXER.looking_for_init_function",
        "peekOfCode": "class FUNCTION_INIT:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.accepted_chars = self.control.LOWER_CASE()+self.control.UPPER_CASE()+['_']+[str(x) for x in range(10)]\n        self.number         = segmentation.NUMBER()\n        self.string_error   = segmentation.ERROR(self.line)\n    def FUNCTION_INIT(self):",
        "detail": "script.LEXER.looking_for_init_function",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.looking_for_init_function",
        "description": "script.LEXER.looking_for_init_function",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n    def ERROR0(self, string: str):\n        error = '{}line: {}{}'.format(we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >>. '.format(ke, 'SyntaxError', ae, string) + error\n        return self.error\n    def ERROR1(self, string: str):\n        error = '{}due to the fact that {}<< : >> {}was not defined at the {}end. {}line: {}{}'.format(ke, ve, ke, te,\n                                                                                                   we, ke, self.line)",
        "detail": "script.LEXER.looking_for_init_function",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_init_function",
        "description": "script.LEXER.looking_for_init_function",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION_INIT:\n    def __init__(self, master: str, data_base: dict, line: int):",
        "detail": "script.LEXER.looking_for_init_function",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_init_function",
        "description": "script.LEXER.looking_for_init_function",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION_INIT:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master",
        "detail": "script.LEXER.looking_for_init_function",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_init_function",
        "description": "script.LEXER.looking_for_init_function",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION_INIT:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.LEXER.looking_for_init_function",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_init_function",
        "description": "script.LEXER.looking_for_init_function",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION_INIT:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line",
        "detail": "script.LEXER.looking_for_init_function",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_init_function",
        "description": "script.LEXER.looking_for_init_function",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION_INIT:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE(self.data_base, self.line)",
        "detail": "script.LEXER.looking_for_init_function",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_init_function",
        "description": "script.LEXER.looking_for_init_function",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION_INIT:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.accepted_chars = self.control.LOWER_CASE()+self.control.UPPER_CASE()+['_']+[str(x) for x in range(10)]",
        "detail": "script.LEXER.looking_for_init_function",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_init_function",
        "description": "script.LEXER.looking_for_init_function",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass FUNCTION_INIT:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.accepted_chars = self.control.LOWER_CASE()+self.control.UPPER_CASE()+['_']+[str(x) for x in range(10)]\n        self.number         = segmentation.NUMBER()",
        "detail": "script.LEXER.looking_for_init_function",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.LEXER.looking_for_init_function",
        "description": "script.LEXER.looking_for_init_function",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass FUNCTION_INIT:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.accepted_chars = self.control.LOWER_CASE()+self.control.UPPER_CASE()+['_']+[str(x) for x in range(10)]\n        self.number         = segmentation.NUMBER()\n        self.string_error   = segmentation.ERROR(self.line)",
        "detail": "script.LEXER.looking_for_init_function",
        "documentation": {}
    },
    {
        "label": "LOGICAL_OPERATORS",
        "kind": 6,
        "importPath": "script.LEXER.looking_for_logical_operators",
        "description": "script.LEXER.looking_for_logical_operators",
        "peekOfCode": "class LOGICAL_OPERATORS:\n    def __init__(self, master: str, data_base: dict, line : int):\n        self.master                 = master\n        self.long_chaine            = master\n        self.data_base              = data_base\n        self.line                   = line\n        self.number                 = segmentation.NUMBER()\n        self.string_error           = segmentation.ERROR( self.line )\n        self.all_chars              = segmentation.CHARS()\n        self.control                = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.LEXER.looking_for_logical_operators",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.looking_for_logical_operators",
        "description": "script.LEXER.looking_for_logical_operators",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.LEXER.looking_for_logical_operators",
        "documentation": {}
    },
    {
        "label": "MODULE_LOAD",
        "kind": 6,
        "importPath": "script.LEXER.looking_for_module_load",
        "description": "script.LEXER.looking_for_module_load",
        "peekOfCode": "class MODULE_LOAD:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE(self.data_base, self.line)\n    def MODULE_LOAD(self):\n        self.string         = ''\n        self.key            = ['from', 'load', 'module', 'as']\n        self.info           = []",
        "detail": "script.LEXER.looking_for_module_load",
        "documentation": {}
    },
    {
        "label": "FINAL_MODULE_LOAD",
        "kind": 6,
        "importPath": "script.LEXER.looking_for_module_load",
        "description": "script.LEXER.looking_for_module_load",
        "peekOfCode": "class FINAL_MODULE_LOAD:\n    def __init__(self, master:dict, data_base: dict, line: int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def LOAD(self, main_string: str):\n        self.main_string    = main_string\n        self.error          = None\n        try: self.master         = self.master[ 'value' ]",
        "detail": "script.LEXER.looking_for_module_load",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.looking_for_module_load",
        "description": "script.LEXER.looking_for_module_load",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.LEXER.looking_for_module_load",
        "documentation": {}
    },
    {
        "label": "LEXER_ASSEMBLY",
        "kind": 6,
        "importPath": "script.LEXER.main_lexer",
        "description": "script.LEXER.main_lexer",
        "peekOfCode": "class LEXER_ASSEMBLY:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.boolean                = looking_for_bool_operators\n        self.logical                = looking_for_logical_operators\n        self.arithmetic             = looking_for_arithmetic_operators\n    def ASSEMBLY(self):\n        self.error                  = None",
        "detail": "script.LEXER.main_lexer",
        "documentation": {}
    },
    {
        "label": "FINAL_LEXER",
        "kind": 6,
        "importPath": "script.LEXER.main_lexer",
        "description": "script.LEXER.main_lexer",
        "peekOfCode": "class FINAL_LEXER:\n    def __init__(self, master:str, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.class_             = class_\n        self.global_            = global_\n        self.return_            = return_\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.function_          = function",
        "detail": "script.LEXER.main_lexer",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.main_lexer",
        "description": "script.LEXER.main_lexer",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.LEXER.main_lexer",
        "documentation": {}
    },
    {
        "label": "SELECTION",
        "kind": 6,
        "importPath": "script.LEXER.particular_str_selection",
        "description": "script.LEXER.particular_str_selection",
        "peekOfCode": "class SELECTION:\n    def __init__(self, master: str, long_chaine: str , data_base: dict, line: int):\n        self.master         = master\n        self.long_chaine    = long_chaine\n        self.data_base      = data_base\n        self.line           = line\n        self.number         = segmentation.NUMBER()\n        self.string_error   = segError.ERROR(self.line)\n        self.string_error_  = AE.ERRORS(self.line)\n        self.str_control    = control_string.STRING_ANALYSE(self.data_base, self.line)",
        "detail": "script.LEXER.particular_str_selection",
        "documentation": {}
    },
    {
        "label": "SEGMENTATION",
        "kind": 6,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "class SEGMENTATION:\n    def __init__(self,\n                    master      : str,          # concatenate main string after checking tabulation and comment line\n                    long_chaine : str,          # non-concatenate main string after checking tabulation and comment line\n                    data_base   : dict,         # data base\n                    line        : int           # current line\n                 ):\n        self.master         = master\n        self.long_chaine    = long_chaine\n        self.line           = line",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "NUMBER",
        "kind": 6,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "class NUMBER:\n    def __init__(self):\n        self.number     = 1e10\n    def OPENING(self,\n                string  : str       # char value\n                ):\n        self.open = ''\n        if   string == ']'      : self.open   = '['         # opening and closing brackets\n        elif string == ')'      : self.open   = '('         # opening ans closing parentheses\n        elif string == '}'      : self.open   = '{'         # ......",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "CHARS",
        "kind": 6,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "class CHARS:\n    def __init__(self):\n        self.char           = ['(',')', '[',']', '{', '}', '\"', \"'\", '+', '-', '*','/', '^', '>', '<','_',\n                               '%','|', '.', '@', ',', ' ', ':', '$', '&', '#', '!', '=', ';', '?', '\\{}'.format( '' )]                                    # list of accepted chars\n        #self.char_num       = [ str( x ) for x in range( 10 ) ]        # numbers\n        self.chars          = self.char +['0','1','2','3', '4','5','6','7','8','9']# self.char_num\nclass SUB_STRING:\n    def __init__(self, first_char, data_base, line):\n        self.first_char     = first_char                                                                                # first char before moving here                                                                               # last char before moving here\n        self.data_base      = data_base                                                                                 # data base with all variables",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "SUB_STRING",
        "kind": 6,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "class SUB_STRING:\n    def __init__(self, first_char, data_base, line):\n        self.first_char     = first_char                                                                                # first char before moving here                                                                               # last char before moving here\n        self.data_base      = data_base                                                                                 # data base with all variables\n        self.line           = line                                                                                      # line from the last while loop\n        self.analyze        = control_string.STRING_ANALYSE( self.data_base, self.line )                                # string functions\n        self.upper_case     = self.analyze.UPPER_CASE()                                                                 # upper cases\n        self.lower_case     = self.analyze.LOWER_CASE()                                                                 # lower cases\n        self.chars          = CHARS( ).chars + self.lower_case + self.upper_case                                        # authorized chars\n    def SUB_STR(self, _id_: int, color: str, storage: list, term: str='orion'):",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "SUB_STRING_FOR_INTERPRETER",
        "kind": 6,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "class SUB_STRING_FOR_INTERPRETER:\n    def __init__(self, first_char, data_base, line):\n        self.first_char     = first_char                                                                                # first char before moving here                                                                               # last char before moving here\n        self.data_base      = data_base                                                                                 # data base with all variables\n        self.line           = line                                                                                      # line from the last while loop\n        self.analyze        = control_string.STRING_ANALYSE( self.data_base, self.line )                                # string functions\n        self.upper_case     = self.analyze.UPPER_CASE()                                                                 # upper cases\n        self.lower_case     = self.analyze.LOWER_CASE()                                                                 # lower cases\n        self.chars          = CHARS( ).chars + self.lower_case + self.upper_case                                        # authorized chars\n    def SUB_STR(self, _id_: int, storage, MainList : list = [], lastString: str =  ''):",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "SEGMENTATION_FOR_INTERPRETER",
        "kind": 6,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "class SEGMENTATION_FOR_INTERPRETER:\n    def __init__(self,\n                    master      : str,          # concatenate main string after checking tabulation and comment line\n                    long_chaine : str,          # non-concatenate main string after checking tabulation and comment line\n                    data_base   : dict,         # data base\n                    line        : int           # current line\n                 ):\n        self.master         = master\n        self.long_chaine    = long_chaine\n        self.line           = line",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "STR",
        "kind": 6,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "class STR:\n    def __init__(self, master: str, line: int):\n        self.master         = master\n        self.line           = line  \n    def STR(self):\n        op = ['[', '{', '(']\n        close = [']', '}', ')']\n        quote = ['\"', \"'\"]\n        key = {\"main\":None, 'sub_main':None}\n        index = 'closed'",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "kind": 6,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "class ERROR:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "ne = bm.fg.red_L\nie = bm.fg.blue_L\nae = bm.fg.cyan_L\nte = bm.fg.magenta_M\nke = bm.fg.rbg(255,255,0)\nve = bm.fg.rbg(0,255,0)\nse = bm.fg.rbg(255,255,0)\nwe = bm.fg.rbg(255,255,255)\nclass SEGMENTATION:\n    def __init__(self,",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "ie = bm.fg.blue_L\nae = bm.fg.cyan_L\nte = bm.fg.magenta_M\nke = bm.fg.rbg(255,255,0)\nve = bm.fg.rbg(0,255,0)\nse = bm.fg.rbg(255,255,0)\nwe = bm.fg.rbg(255,255,255)\nclass SEGMENTATION:\n    def __init__(self,\n                    master      : str,          # concatenate main string after checking tabulation and comment line",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "ae = bm.fg.cyan_L\nte = bm.fg.magenta_M\nke = bm.fg.rbg(255,255,0)\nve = bm.fg.rbg(0,255,0)\nse = bm.fg.rbg(255,255,0)\nwe = bm.fg.rbg(255,255,255)\nclass SEGMENTATION:\n    def __init__(self,\n                    master      : str,          # concatenate main string after checking tabulation and comment line\n                    long_chaine : str,          # non-concatenate main string after checking tabulation and comment line",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "te = bm.fg.magenta_M\nke = bm.fg.rbg(255,255,0)\nve = bm.fg.rbg(0,255,0)\nse = bm.fg.rbg(255,255,0)\nwe = bm.fg.rbg(255,255,255)\nclass SEGMENTATION:\n    def __init__(self,\n                    master      : str,          # concatenate main string after checking tabulation and comment line\n                    long_chaine : str,          # non-concatenate main string after checking tabulation and comment line\n                    data_base   : dict,         # data base",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "ke = bm.fg.rbg(255,255,0)\nve = bm.fg.rbg(0,255,0)\nse = bm.fg.rbg(255,255,0)\nwe = bm.fg.rbg(255,255,255)\nclass SEGMENTATION:\n    def __init__(self,\n                    master      : str,          # concatenate main string after checking tabulation and comment line\n                    long_chaine : str,          # non-concatenate main string after checking tabulation and comment line\n                    data_base   : dict,         # data base\n                    line        : int           # current line",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "ve = bm.fg.rbg(0,255,0)\nse = bm.fg.rbg(255,255,0)\nwe = bm.fg.rbg(255,255,255)\nclass SEGMENTATION:\n    def __init__(self,\n                    master      : str,          # concatenate main string after checking tabulation and comment line\n                    long_chaine : str,          # non-concatenate main string after checking tabulation and comment line\n                    data_base   : dict,         # data base\n                    line        : int           # current line\n                 ):",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "se = bm.fg.rbg(255,255,0)\nwe = bm.fg.rbg(255,255,255)\nclass SEGMENTATION:\n    def __init__(self,\n                    master      : str,          # concatenate main string after checking tabulation and comment line\n                    long_chaine : str,          # non-concatenate main string after checking tabulation and comment line\n                    data_base   : dict,         # data base\n                    line        : int           # current line\n                 ):\n        self.master         = master",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.LEXER.segmentation",
        "description": "script.LEXER.segmentation",
        "peekOfCode": "we = bm.fg.rbg(255,255,255)\nclass SEGMENTATION:\n    def __init__(self,\n                    master      : str,          # concatenate main string after checking tabulation and comment line\n                    long_chaine : str,          # non-concatenate main string after checking tabulation and comment line\n                    data_base   : dict,         # data base\n                    line        : int           # current line\n                 ):\n        self.master         = master\n        self.long_chaine    = long_chaine",
        "detail": "script.LEXER.segmentation",
        "documentation": {}
    },
    {
        "label": "SUB_STRING",
        "kind": 6,
        "importPath": "script.LEXER.subStringInterpretor",
        "description": "script.LEXER.subStringInterpretor",
        "peekOfCode": "class SUB_STRING:\n    def __init__(self, first_char: str , data_base: dict , line: int):\n        self.first_char     = first_char                                                                                # first char before moving here                                                                               # last char before moving here\n        self.data_base      = data_base                                                                                 # data base with all variables\n        self.line           = line                                                                                      # line from the last while loop\n        self.analyze        = control_string.STRING_ANALYSE( self.data_base, self.line )                                # string functions\n        self.upper_case     = self.analyze.UPPER_CASE()                                                                 # upper cases\n        self.lower_case     = self.analyze.LOWER_CASE()                                                                 # lower cases\n        self.chars          = CHARS( ).chars + self.lower_case + self.upper_case                                        # authorized chars\n    def SUB_STR(self, _id_: int, storage, MainList : list = [], lastString: str =  '', name : str = 'python'):",
        "detail": "script.LEXER.subStringInterpretor",
        "documentation": {}
    },
    {
        "label": "CHARS",
        "kind": 6,
        "importPath": "script.LEXER.subStringInterpretor",
        "description": "script.LEXER.subStringInterpretor",
        "peekOfCode": "class CHARS:\n    def __init__(self):\n        self.char   = ['(',')', '[',']', '{', '}', '\"', \"'\", '+', '-', '*','/', '^', '>', '<','_',\n                               '%','|', '.', '@', ',', ' ', ':', '$', '&', '#', '!', '=', ';', '?', '\\{}'.format( '' )]                                    \n        self.chars  = self.char +['0','1','2','3', '4','5','6','7','8','9']",
        "detail": "script.LEXER.subStringInterpretor",
        "documentation": {}
    },
    {
        "label": "NAME_CHECKING",
        "kind": 6,
        "importPath": "script.LEXER.var_name_checking",
        "description": "script.LEXER.var_name_checking",
        "peekOfCode": "class NAME_CHECKING:\n    def __init__(self, master:str, data_base: dict, line:int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.analyze        = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.variables      = self.data_base[ 'variables' ][ 'vars' ]\n        self._values_       = self.data_base[ 'variables' ][ 'values' ]\n        self.selection      = particular_str_selection\n        self.chars          = self.analyze.UPPER_CASE()+self.analyze.LOWER_CASE()",
        "detail": "script.LEXER.var_name_checking",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.LEXER.var_name_checking",
        "description": "script.LEXER.var_name_checking",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n    def ERROR0(self, string: str):\n        error       = '{}line: {}{}'.format(we, ke, self.line)\n        self.error  = '{}{} : invalid syntax in {}<< {} >>. '.format(ke, 'SyntaxError', ae, string) + error\n        return self.error\n    def ERROR1(self, string: str):\n        error       = '{}line: {}{}'.format(we, ke, self.line)\n        self.error  = '{}{} : {}<< {} >>, {}was not found. '.format(ne, 'NameError', ae, string, ne) + error",
        "detail": "script.LEXER.var_name_checking",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.LEXER.var_name_checking",
        "description": "script.LEXER.var_name_checking",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass NAME_CHECKING:\n    def __init__(self, master:str, data_base: dict, line:int):",
        "detail": "script.LEXER.var_name_checking",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.LEXER.var_name_checking",
        "description": "script.LEXER.var_name_checking",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass NAME_CHECKING:\n    def __init__(self, master:str, data_base: dict, line:int):\n        self.master         = master",
        "detail": "script.LEXER.var_name_checking",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.LEXER.var_name_checking",
        "description": "script.LEXER.var_name_checking",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass NAME_CHECKING:\n    def __init__(self, master:str, data_base: dict, line:int):\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.LEXER.var_name_checking",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.LEXER.var_name_checking",
        "description": "script.LEXER.var_name_checking",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass NAME_CHECKING:\n    def __init__(self, master:str, data_base: dict, line:int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line",
        "detail": "script.LEXER.var_name_checking",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.LEXER.var_name_checking",
        "description": "script.LEXER.var_name_checking",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass NAME_CHECKING:\n    def __init__(self, master:str, data_base: dict, line:int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.analyze        = control_string.STRING_ANALYSE(self.data_base, self.line)",
        "detail": "script.LEXER.var_name_checking",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.LEXER.var_name_checking",
        "description": "script.LEXER.var_name_checking",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass NAME_CHECKING:\n    def __init__(self, master:str, data_base: dict, line:int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.analyze        = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.variables      = self.data_base[ 'variables' ][ 'vars' ]",
        "detail": "script.LEXER.var_name_checking",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.LEXER.var_name_checking",
        "description": "script.LEXER.var_name_checking",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass NAME_CHECKING:\n    def __init__(self, master:str, data_base: dict, line:int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.analyze        = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.variables      = self.data_base[ 'variables' ][ 'vars' ]\n        self._values_       = self.data_base[ 'variables' ][ 'values' ]",
        "detail": "script.LEXER.var_name_checking",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.LEXER.var_name_checking",
        "description": "script.LEXER.var_name_checking",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass NAME_CHECKING:\n    def __init__(self, master:str, data_base: dict, line:int):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.analyze        = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.variables      = self.data_base[ 'variables' ][ 'vars' ]\n        self._values_       = self.data_base[ 'variables' ][ 'values' ]\n        self.selection      = particular_str_selection",
        "detail": "script.LEXER.var_name_checking",
        "documentation": {}
    },
    {
        "label": "MAGIC_MATH_BASE",
        "kind": 6,
        "importPath": "script.MATHS.arithemtic_operations",
        "description": "script.MATHS.arithemtic_operations",
        "peekOfCode": "class MAGIC_MATH_BASE:\n    def __init__(self, \n        master      :str, \n        data_base   :dict, \n        line        :int, \n        operator    :bool = False\n        ) -> None:\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.MATHS.arithemtic_operations",
        "documentation": {}
    },
    {
        "label": "MAGIC_MATH_BASE",
        "kind": 6,
        "importPath": "script.MATHS.arithmetic_calculations",
        "description": "script.MATHS.arithmetic_calculations",
        "peekOfCode": "class MAGIC_MATH_BASE:\n    def __init__(self, \n        master      : str, \n        data_base   : dict, \n        line        : int\n        ) -> None:\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.selection          = particular_str_selection",
        "detail": "script.MATHS.arithmetic_calculations",
        "documentation": {}
    },
    {
        "label": "MATHS",
        "kind": 6,
        "importPath": "script.MATHS.arithmetic_modules",
        "description": "script.MATHS.arithmetic_modules",
        "peekOfCode": "class MATHS:\n    def __init__(self, master: list, data_base: dict, history_of_operators: str, line: int ):\n        self.master                 = master\n        self.data_base              = data_base\n        self.line                   = line\n        self.arithmetic             = arithmetic_object.ARITHMETICS(self.data_base, self.line)\n        self.history_of_operators   = history_of_operators\n    def ADD( self )         :\n        self.result         = None\n        self.error          = None",
        "detail": "script.MATHS.arithmetic_modules",
        "documentation": {}
    },
    {
        "label": "OPERATIONS",
        "kind": 6,
        "importPath": "script.MATHS.arithmetic_modules",
        "description": "script.MATHS.arithmetic_modules",
        "peekOfCode": "class OPERATIONS:\n    def __init__(self, master:str, data_base:dict, line:int, operator: bool = False):\n        self.master         = master\n        self.data_base      = data_base\n        self.line           = line\n        self.arithmetic     = arithmetic_object.ARITHMETICS( self.data_base, self.line )\n        self.calculation    = arithmetic_calculations\n        self.selection      = particular_str_selection\n        self._operator_     = operator\n    def ADD(self):",
        "detail": "script.MATHS.arithmetic_modules",
        "documentation": {}
    },
    {
        "label": "SPLIT_DATA",
        "kind": 6,
        "importPath": "script.MATHS.arithmetic_modules",
        "description": "script.MATHS.arithmetic_modules",
        "peekOfCode": "class SPLIT_DATA:\n    def __init__(self, master: list, operator: str, history_of_operators: str):\n        self.master                 = master\n        self.operator               = operator\n        self.history_of_operators   = history_of_operators\n    def SPLIT(self):\n        self._return_       = []\n        self.index_value    = []\n        self.double_index   = []\n        self.index_sum      = 0",
        "detail": "script.MATHS.arithmetic_modules",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.MATHS.arithmetic_modules",
        "description": "script.MATHS.arithmetic_modules",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass MATHS:\n    def __init__(self, master: list, data_base: dict, history_of_operators: str, line: int ):",
        "detail": "script.MATHS.arithmetic_modules",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.MATHS.arithmetic_modules",
        "description": "script.MATHS.arithmetic_modules",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass MATHS:\n    def __init__(self, master: list, data_base: dict, history_of_operators: str, line: int ):\n        self.master                 = master",
        "detail": "script.MATHS.arithmetic_modules",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.MATHS.arithmetic_modules",
        "description": "script.MATHS.arithmetic_modules",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass MATHS:\n    def __init__(self, master: list, data_base: dict, history_of_operators: str, line: int ):\n        self.master                 = master\n        self.data_base              = data_base",
        "detail": "script.MATHS.arithmetic_modules",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.MATHS.arithmetic_modules",
        "description": "script.MATHS.arithmetic_modules",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass MATHS:\n    def __init__(self, master: list, data_base: dict, history_of_operators: str, line: int ):\n        self.master                 = master\n        self.data_base              = data_base\n        self.line                   = line",
        "detail": "script.MATHS.arithmetic_modules",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.MATHS.arithmetic_modules",
        "description": "script.MATHS.arithmetic_modules",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass MATHS:\n    def __init__(self, master: list, data_base: dict, history_of_operators: str, line: int ):\n        self.master                 = master\n        self.data_base              = data_base\n        self.line                   = line\n        self.arithmetic             = arithmetic_object.ARITHMETICS(self.data_base, self.line)",
        "detail": "script.MATHS.arithmetic_modules",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.MATHS.arithmetic_modules",
        "description": "script.MATHS.arithmetic_modules",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass MATHS:\n    def __init__(self, master: list, data_base: dict, history_of_operators: str, line: int ):\n        self.master                 = master\n        self.data_base              = data_base\n        self.line                   = line\n        self.arithmetic             = arithmetic_object.ARITHMETICS(self.data_base, self.line)\n        self.history_of_operators   = history_of_operators",
        "detail": "script.MATHS.arithmetic_modules",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.MATHS.arithmetic_modules",
        "description": "script.MATHS.arithmetic_modules",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass MATHS:\n    def __init__(self, master: list, data_base: dict, history_of_operators: str, line: int ):\n        self.master                 = master\n        self.data_base              = data_base\n        self.line                   = line\n        self.arithmetic             = arithmetic_object.ARITHMETICS(self.data_base, self.line)\n        self.history_of_operators   = history_of_operators\n    def ADD( self )         :",
        "detail": "script.MATHS.arithmetic_modules",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.MATHS.arithmetic_modules",
        "description": "script.MATHS.arithmetic_modules",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass MATHS:\n    def __init__(self, master: list, data_base: dict, history_of_operators: str, line: int ):\n        self.master                 = master\n        self.data_base              = data_base\n        self.line                   = line\n        self.arithmetic             = arithmetic_object.ARITHMETICS(self.data_base, self.line)\n        self.history_of_operators   = history_of_operators\n    def ADD( self )         :\n        self.result         = None",
        "detail": "script.MATHS.arithmetic_modules",
        "documentation": {}
    },
    {
        "label": "ARITHMETICS",
        "kind": 6,
        "importPath": "script.MATHS.arithmetic_object",
        "description": "script.MATHS.arithmetic_object",
        "peekOfCode": "class ARITHMETICS:\n    def __init__(self, data_base:dict, line:int)            :\n        self.line           = line\n        self.daba_base      = data_base\n        self.type1          = [type( int() ), type( float() ), type( complex() ), type( bool() )]\n        self.type2          = [type( list() ), type( tuple() )]\n        self.type3          = [type( str() )]\n        self.type4          = [type(np.array([1]))]\n    def OBJECT_ADD(self, object1: any, object2: any)        :\n        self.error          = None",
        "detail": "script.MATHS.arithmetic_object",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "kind": 6,
        "importPath": "script.MATHS.arithmetic_object",
        "description": "script.MATHS.arithmetic_object",
        "peekOfCode": "class ERROR:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.MATHS.arithmetic_object",
        "documentation": {}
    },
    {
        "label": "BOOLEAN",
        "kind": 6,
        "importPath": "script.MATHS.boolean",
        "description": "script.MATHS.boolean",
        "peekOfCode": "class BOOLEAN:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def BOOLEAN(self):\n        self.value          = None\n        try:\n            if self.master == 'True':\n                self.value = True",
        "detail": "script.MATHS.boolean",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.MATHS.boolean",
        "description": "script.MATHS.boolean",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN:\n    def __init__(self, master: str, data_base: dict, line: int):",
        "detail": "script.MATHS.boolean",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.MATHS.boolean",
        "description": "script.MATHS.boolean",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line",
        "detail": "script.MATHS.boolean",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.MATHS.boolean",
        "description": "script.MATHS.boolean",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master",
        "detail": "script.MATHS.boolean",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.MATHS.boolean",
        "description": "script.MATHS.boolean",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.MATHS.boolean",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.MATHS.boolean",
        "description": "script.MATHS.boolean",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def BOOLEAN(self):",
        "detail": "script.MATHS.boolean",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.MATHS.boolean",
        "description": "script.MATHS.boolean",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def BOOLEAN(self):\n        self.value          = None",
        "detail": "script.MATHS.boolean",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.MATHS.boolean",
        "description": "script.MATHS.boolean",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass BOOLEAN:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def BOOLEAN(self):\n        self.value          = None\n        try:",
        "detail": "script.MATHS.boolean",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.MATHS.boolean",
        "description": "script.MATHS.boolean",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass BOOLEAN:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def BOOLEAN(self):\n        self.value          = None\n        try:\n            if self.master == 'True':",
        "detail": "script.MATHS.boolean",
        "documentation": {}
    },
    {
        "label": "COMPLEX",
        "kind": 6,
        "importPath": "script.MATHS.complex",
        "description": "script.MATHS.complex",
        "peekOfCode": "class COMPLEX:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def COMPLEX(self):\n        self.value          = None\n        self.error          = None\n        try:\n            self.value      = complex( self.master )",
        "detail": "script.MATHS.complex",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.MATHS.complex",
        "description": "script.MATHS.complex",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass COMPLEX:\n    def __init__(self, master: str, data_base: dict, line: int):",
        "detail": "script.MATHS.complex",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.MATHS.complex",
        "description": "script.MATHS.complex",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass COMPLEX:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line",
        "detail": "script.MATHS.complex",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.MATHS.complex",
        "description": "script.MATHS.complex",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass COMPLEX:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master",
        "detail": "script.MATHS.complex",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.MATHS.complex",
        "description": "script.MATHS.complex",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass COMPLEX:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.MATHS.complex",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.MATHS.complex",
        "description": "script.MATHS.complex",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass COMPLEX:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def COMPLEX(self):",
        "detail": "script.MATHS.complex",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.MATHS.complex",
        "description": "script.MATHS.complex",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass COMPLEX:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def COMPLEX(self):\n        self.value          = None",
        "detail": "script.MATHS.complex",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.MATHS.complex",
        "description": "script.MATHS.complex",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass COMPLEX:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def COMPLEX(self):\n        self.value          = None\n        self.error          = None",
        "detail": "script.MATHS.complex",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.MATHS.complex",
        "description": "script.MATHS.complex",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass COMPLEX:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def COMPLEX(self):\n        self.value          = None\n        self.error          = None\n        try:",
        "detail": "script.MATHS.complex",
        "documentation": {}
    },
    {
        "label": "DEEP_CHECKING",
        "kind": 6,
        "importPath": "script.MATHS.deep_checking",
        "description": "script.MATHS.deep_checking",
        "peekOfCode": "class DEEP_CHECKING:\n    def __init__(self, master: list):\n        self.master         = master\n    def CHECKING(self, _sign_: str = '+'):\n        self.string         = ''\n        self.store          = []\n        if len( self.master ) <= 1: pass\n        else:\n            for i, str_ in enumerate( self.master ):\n                if str_:",
        "detail": "script.MATHS.deep_checking",
        "documentation": {}
    },
    {
        "label": "DICTIONARY",
        "kind": 6,
        "importPath": "script.MATHS.dictionary",
        "description": "script.MATHS.dictionary",
        "peekOfCode": "class DICTIONARY:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection      = particular_str_selection\n    def MAIN_DICTIONARY(self):\n        self.value          = None\n        self.error          = None",
        "detail": "script.MATHS.dictionary",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.MATHS.dictionary",
        "description": "script.MATHS.dictionary",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line ):\n        self.line           = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.MATHS.dictionary",
        "documentation": {}
    },
    {
        "label": "INTEGER",
        "kind": 6,
        "importPath": "script.MATHS.integer",
        "description": "script.MATHS.integer",
        "peekOfCode": "class INTEGER:\n    def __init__(self, master: str, data_base:dict, line:int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def INTEGER(self):\n        self.value          = None\n        self.error          = None\n        try:\n            if 'e' in self.master:",
        "detail": "script.MATHS.integer",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.MATHS.integer",
        "description": "script.MATHS.integer",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass INTEGER:\n    def __init__(self, master: str, data_base:dict, line:int):",
        "detail": "script.MATHS.integer",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.MATHS.integer",
        "description": "script.MATHS.integer",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass INTEGER:\n    def __init__(self, master: str, data_base:dict, line:int):\n        self.line           = line",
        "detail": "script.MATHS.integer",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.MATHS.integer",
        "description": "script.MATHS.integer",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass INTEGER:\n    def __init__(self, master: str, data_base:dict, line:int):\n        self.line           = line\n        self.master         = master",
        "detail": "script.MATHS.integer",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.MATHS.integer",
        "description": "script.MATHS.integer",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass INTEGER:\n    def __init__(self, master: str, data_base:dict, line:int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.MATHS.integer",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.MATHS.integer",
        "description": "script.MATHS.integer",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass INTEGER:\n    def __init__(self, master: str, data_base:dict, line:int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def INTEGER(self):",
        "detail": "script.MATHS.integer",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.MATHS.integer",
        "description": "script.MATHS.integer",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass INTEGER:\n    def __init__(self, master: str, data_base:dict, line:int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def INTEGER(self):\n        self.value          = None",
        "detail": "script.MATHS.integer",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.MATHS.integer",
        "description": "script.MATHS.integer",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass INTEGER:\n    def __init__(self, master: str, data_base:dict, line:int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def INTEGER(self):\n        self.value          = None\n        self.error          = None",
        "detail": "script.MATHS.integer",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.MATHS.integer",
        "description": "script.MATHS.integer",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass INTEGER:\n    def __init__(self, master: str, data_base:dict, line:int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def INTEGER(self):\n        self.value          = None\n        self.error          = None\n        try:",
        "detail": "script.MATHS.integer",
        "documentation": {}
    },
    {
        "label": "MAGIC_MATH_BASE",
        "kind": 6,
        "importPath": "script.MATHS.mathematics",
        "description": "script.MATHS.mathematics",
        "peekOfCode": "class MAGIC_MATH_BASE:\n    def __init__(self, master:str, data_base:dict, history_of_operators: str, line: int):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.history_of_operators   = history_of_operators\n        self.math_modules   = arithmetic_modules.MATHS(self.master, self.data_base, self.history_of_operators, self.line )\n    def MATHS_OPERATIONS(self, name: str = 'python' ):\n        self.value                  = None\n        self.error                  = None",
        "detail": "script.MATHS.mathematics",
        "documentation": {}
    },
    {
        "label": "LIST",
        "kind": 6,
        "importPath": "script.MATHS.my_list",
        "description": "script.MATHS.my_list",
        "peekOfCode": "class LIST:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection      = particular_str_selection\n    def MAIN_LIST(self):\n        self.value          = None\n        self.error          = None",
        "detail": "script.MATHS.my_list",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.MATHS.my_list",
        "description": "script.MATHS.my_list",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line ):\n        self.line           = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.MATHS.my_list",
        "documentation": {}
    },
    {
        "label": "REAL",
        "kind": 6,
        "importPath": "script.MATHS.real",
        "description": "script.MATHS.real",
        "peekOfCode": "class REAL:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def REAL(self):\n        self.value          = None\n        self.error          = None\n        try:\n            self.value      = float( self.master )",
        "detail": "script.MATHS.real",
        "documentation": {}
    },
    {
        "label": "STRING",
        "kind": 6,
        "importPath": "script.MATHS.string",
        "description": "script.MATHS.string",
        "peekOfCode": "class STRING:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n    def STRING(self):\n        self.value          = None\n        try:  self.value    = str( self.master[1: -1 ])\n        except ValueError: pass\n        return self.value",
        "detail": "script.MATHS.string",
        "documentation": {}
    },
    {
        "label": "TUPLE",
        "kind": 6,
        "importPath": "script.MATHS.tuple",
        "description": "script.MATHS.tuple",
        "peekOfCode": "class TUPLE:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection      = particular_str_selection\n    def MAIN_TUPLE(self):\n        self.value          = None\n        self.error          = None",
        "detail": "script.MATHS.tuple",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.MATHS.tuple",
        "description": "script.MATHS.tuple",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line ):\n        self.line           = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.MATHS.tuple",
        "documentation": {}
    },
    {
        "label": "BOOLEAN",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_boolean",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_boolean",
        "peekOfCode": "class BOOLEAN:\n    def __init__(self, master: any, data_base : any, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.variables          = self.data_base[ 'variables' ][ 'vars' ]\n    def BOOLEAN(self):\n        self.error              = None\n        self.type               = self.master[ 'type' ]\n        self.main_dict          = self.master[ 'numeric' ][ 0 ]",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_boolean",
        "documentation": {}
    },
    {
        "label": "DICTIONARY",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_dictionary",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_dictionary",
        "peekOfCode": "class DICTIONARY:\n    def __init__(self, master: any, data_base : any, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection          = particular_str_selection\n        self.lexer              = main_lexer\n        self.numeric            = numerical_value\n        self.affectation        = check_if_affectation",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_dictionary",
        "documentation": {}
    },
    {
        "label": "DICT_FUNCTION",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_dictionary",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_dictionary",
        "peekOfCode": "class DICT_FUNCTION:\n    def __init__(self, master: any, data_base: any, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection          = particular_str_selection\n    def GET(self, main_string: str):\n        self.error          = None\n        self._return_       = None",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_dictionary",
        "documentation": {}
    },
    {
        "label": "KEYS",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_dictionary",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_dictionary",
        "peekOfCode": "class KEYS:\n    def __init__(self, master:any, key: str):\n        self.key            = key\n        self.master         = master\n    def KEY(self):\n        self._return_       = None\n        if   self.key == 'items' : self._return_ = self.master.items()\n        elif self.key == 'keys'  : self._return_ = list( self.master.keys() )\n        elif self.key == 'values':\n            values = []",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_dictionary",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_dictionary",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_dictionary",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line:int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_dictionary",
        "documentation": {}
    },
    {
        "label": "LIST",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_list",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_list",
        "peekOfCode": "class LIST:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line                       = line\n        self.master                     = master\n        self.data_base                  = data_base\n        self.control                    = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.selection                  = particular_str_selection\n        self.lexer                      = main_lexer\n        self.numeric                    = numerical_value\n        self.affectation                = check_if_affectation",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_list",
        "documentation": {}
    },
    {
        "label": "LIS_OPTIONS",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_list",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_list",
        "peekOfCode": "class LIS_OPTIONS:\n    def __init__(self, master: str, main_master: any, data_base: any, line: int):\n        self.line           = line\n        self.data_base      = data_base\n        self.master         = master[ 0 ]\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.main_master    = main_master\n        self.lexer          = numeric_lexer\n    def OPTION(self, global_type:str = 'values'):\n        self.error          = None",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_list",
        "documentation": {}
    },
    {
        "label": "OPERATOR_TRANSFORMATION",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_list",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_list",
        "peekOfCode": "class OPERATOR_TRANSFORMATION:\n    def __init__(self, operator: str):\n        self.operator       = operator\n    def TRANSFORMATION(self):\n        self.init_operator = None\n        if   self.operator == '.eq.'            : self.init_operator = '=='\n        elif self.operator == '.ne.'            : self.init_operator = '!='\n        elif self.operator == '.ge.'            : self.init_operator = '>='\n        elif self.operator == '.le.'            : self.init_operator = '<='\n        elif self.operator == '.gt.'            : self.init_operator = '>'",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_list",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_list",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_list",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line:int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_list",
        "documentation": {}
    },
    {
        "label": "NONE",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_none",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_none",
        "peekOfCode": "class NONE:\n    def __init__(self, master: any, data_base : any, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.variables          = self.data_base[ 'variables' ][ 'vars' ]\n    def NONE(self):\n        self.error              = None\n        self.type               = self.master[ 'type' ]\n        self.main_dict          = self.master[ 'numeric' ][ 0 ]",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_none",
        "documentation": {}
    },
    {
        "label": "STRING",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_string",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_string",
        "peekOfCode": "class STRING:\n    def __init__(self, master: any, data_base : any, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection          = particular_str_selection\n        self.lexer              = main_lexer\n        self.numeric            = numerical_value\n        self.affectation        = check_if_affectation",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_string",
        "documentation": {}
    },
    {
        "label": "FORMAT",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_string",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_string",
        "peekOfCode": "class FORMAT:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.data_base      = data_base\n        self.master         = master\n        self.control        = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.selection      = particular_str_selection\n        self.numeric        = numerical_value\n        self.affectation    = check_if_affectation\n        self.lexer          = main_lexer",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_string",
        "documentation": {}
    },
    {
        "label": "STRING_FUNCTIONS",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_string",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_string",
        "peekOfCode": "class STRING_FUNCTIONS:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.data_base      = data_base\n        self.master         = master\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection      = particular_str_selection\n        self.lexer          = main_lexer\n        self.numeric        = numerical_value\n        self.numeric_lex    = numeric_lexer",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_string",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_string",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_string",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line:int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_string",
        "documentation": {}
    },
    {
        "label": "TUPLE",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_tuple",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_tuple",
        "peekOfCode": "class TUPLE:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line                       = line\n        self.master                     = master\n        self.data_base                  = data_base\n        self.control                    = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.selection                  = particular_str_selection\n        self.lexer                      = main_lexer\n        self.numeric                    = numerical_value\n        self.affectation                = check_if_affectation",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_tuple",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.INTERNAL_FUNCTION.get_tuple",
        "description": "script.PARXER.INTERNAL_FUNCTION.get_tuple",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line:int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.INTERNAL_FUNCTION.get_tuple",
        "documentation": {}
    },
    {
        "label": "LEXER_AND_PARXER",
        "kind": 6,
        "importPath": "script.PARXER.LEXER_CONFIGURE.lexer_and_parxer",
        "description": "script.PARXER.LEXER_CONFIGURE.lexer_and_parxer",
        "peekOfCode": "class LEXER_AND_PARXER:\n    def __init__(self, master:str, data_base:dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.main               = main\n    def ANALYZE(self, _id_:int = 1, _type_:any = None, term :str = 'orion' ):\n        self.error                  = None\n        self.lexer                  = None\n        self.lexer, self.string, self.error  = self.main.MAIN( self.master, self.data_base, self.line).MAIN(_id_, _type_, True)",
        "detail": "script.PARXER.LEXER_CONFIGURE.lexer_and_parxer",
        "documentation": {}
    },
    {
        "label": "NEXT_ANALYZE",
        "kind": 6,
        "importPath": "script.PARXER.LEXER_CONFIGURE.lexer_and_parxer",
        "description": "script.PARXER.LEXER_CONFIGURE.lexer_and_parxer",
        "peekOfCode": "class NEXT_ANALYZE:\n    def __init__(self, master: str, data_base : dict, line : int):\n        self.line               = line\n        self.data_base          = data_base\n        self.master             = master\n        self.main               = main\n    def SUB_ANALYSZE(self, _id_:int = 1, _type_:any = None):# index : int = 0, lexer_init = None):\n        self.error  = None\n        self.lexer, self.string, self.error = self.main.MAIN(self.master, self.data_base, self.line).MAIN(_id_, _type_, True)\n        if self.error is None:",
        "detail": "script.PARXER.LEXER_CONFIGURE.lexer_and_parxer",
        "documentation": {}
    },
    {
        "label": "MAIN",
        "kind": 6,
        "importPath": "script.PARXER.LEXER_CONFIGURE.lexer_and_parxer",
        "description": "script.PARXER.LEXER_CONFIGURE.lexer_and_parxer",
        "peekOfCode": "class MAIN:\n    def __init__(self, master:str, data_base:dict, line: int):\n        self.line = line\n        self.master = master\n        self.data_base = data_base\n        self.main = main\n    def MAIN_LEXER(self, _id_:int = 1, _type_:any = None):\n        self.error          = None\n        self.lexer, self.string, self.error = self.main.MAIN(self.master, self.data_base, self.line).MAIN( _id_, _type_, True)\n        if self.error is None:  pass",
        "detail": "script.PARXER.LEXER_CONFIGURE.lexer_and_parxer",
        "documentation": {}
    },
    {
        "label": "NUMERCAL_LEXER",
        "kind": 6,
        "importPath": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "peekOfCode": "class NUMERCAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.lexer          = main_lexer\n        self.affectation    = check_if_affectation\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.numeric        = numerical_value\n    def LEXER(self, main_string: str):",
        "detail": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line:int):\n        self.line           = line\n    def ERROR0(self, string: str):\n        error = '{}line: {}{}'.format(we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >> '.format(ke, 'SyntaxError', ae, string) + error\n        return self.error\n    def ERROR1(self, string: str, char: str):\n        error = '{}due to {}<< {} >>. {}line: {}{}'.format(ke, ne, char, we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >> '.format(ke, 'SyntaxError', ae, string) + error",
        "detail": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED",
        "detail": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass NUMERCAL_LEXER:",
        "detail": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass NUMERCAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):",
        "detail": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass NUMERCAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line",
        "detail": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass NUMERCAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master",
        "detail": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass NUMERCAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass NUMERCAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.lexer          = main_lexer",
        "detail": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass NUMERCAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.lexer          = main_lexer\n        self.affectation    = check_if_affectation",
        "detail": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "documentation": {}
    },
    {
        "label": "me",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "peekOfCode": "me = Fore.LIGHTCYAN_EX\nle = Fore.RED\nclass NUMERCAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.lexer          = main_lexer\n        self.affectation    = check_if_affectation\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "documentation": {}
    },
    {
        "label": "le",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "peekOfCode": "le = Fore.RED\nclass NUMERCAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.lexer          = main_lexer\n        self.affectation    = check_if_affectation\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.numeric        = numerical_value",
        "detail": "script.PARXER.LEXER_CONFIGURE.numeric_lexer",
        "documentation": {}
    },
    {
        "label": "PARTIAL_LEXER",
        "kind": 6,
        "importPath": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "peekOfCode": "class PARTIAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.lexer          = main_lexer\n        self.affectation    = check_if_affectation\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def LEXER(self, main_string: str, term : str = 'orion'):\n        self.error          = None",
        "detail": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "documentation": {}
    },
    {
        "label": "LEXER",
        "kind": 6,
        "importPath": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "peekOfCode": "class LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.lexer          = main_lexer\n        self.affectation    = check_if_affectation\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def MAIN_LEXER(self, main_string: str, _type_:any=None, _key_:bool = False, term:str='orion'):\n        self.error          = None",
        "detail": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line:int):\n        self.line           = line\n    def ERROR0(self, string: str):\n        error = '{}line: {}{}'.format(we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >> '.format(ke, 'SyntaxError', ae, string) + error\n        return self.error\n    def ERROR1(self, string: str, char: str):\n        error = '{}due to {}<< {} >>. {}line: {}{}'.format(ke, ne, char, we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >> '.format(ke, 'SyntaxError', ae, string) + error",
        "detail": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass PARTIAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):",
        "detail": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass PARTIAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line",
        "detail": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass PARTIAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master",
        "detail": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass PARTIAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base",
        "detail": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass PARTIAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.lexer          = main_lexer",
        "detail": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass PARTIAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.lexer          = main_lexer\n        self.affectation    = check_if_affectation",
        "detail": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass PARTIAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.lexer          = main_lexer\n        self.affectation    = check_if_affectation\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "description": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass PARTIAL_LEXER:\n    def __init__(self, master: str, data_base: dict, line: int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.lexer          = main_lexer\n        self.affectation    = check_if_affectation\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def LEXER(self, main_string: str, term : str = 'orion'):",
        "detail": "script.PARXER.LEXER_CONFIGURE.partial_lexer",
        "documentation": {}
    },
    {
        "label": "NESTED",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED.nested_func_load",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED.nested_func_load",
        "peekOfCode": "class NESTED:\n    def __init__(self,\n            master      : dict,\n            DataBase    : dict, \n            line        : int \n            ) :\n        self.master         = master\n        self.DataBase       = DataBase \n        self.line           = line \n        self.classes        = self.DataBase[ 'classes' ] ",
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED.nested_func_load",
        "documentation": {}
    },
    {
        "label": "NESTED",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED.nested_vars",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED.nested_vars",
        "peekOfCode": "class NESTED:\n    def __init__(self,\n            master      : dict,\n            DataBase    : dict, \n            line        : int \n            ) :\n        self.master         = master\n        self.DataBase       = DataBase \n        self.line           = line \n        self.classes        = self.DataBase[ 'classes' ] ",
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES.NESTED.nested_vars",
        "documentation": {}
    },
    {
        "label": "CLASS_TREATMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES.classInit",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES.classInit",
        "peekOfCode": "class CLASS_TREATMENT:\n    def __init__(self,\n                master      : dict,\n                DataBase    : dict, \n                line        : int \n                ) :\n        self.master         = master\n        self.DataBase       = DataBase \n        self.line           = line \n        self.classes        = self.DataBase[ 'classes' ] ",
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES.classInit",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_CLASS_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES.class_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES.class_interpreter",
        "peekOfCode": "class EXTERNAL_CLASS_STATEMENT:\n    def __init__(self,\n                master      : any, \n                data_base   : dict, \n                line        : int, \n                extra       : dict\n                ):\n        self.master             = master\n        self.line               = line\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES.class_interpreter",
        "documentation": {}
    },
    {
        "label": "INTERNAL_CLASS_STATTEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.CLASSES.class_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS.CLASSES.class_interpreter",
        "peekOfCode": "class INTERNAL_CLASS_STATTEMENT:\n    def __init__(self, \n                master      : any, \n                data_base   : dict, \n                line        : int, \n                extra       : dict\n                ):\n        self.master             = master\n        self.line               = line\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS.CLASSES.class_interpreter",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_DEF_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.def_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.def_interpreter",
        "peekOfCode": "class EXTERNAL_DEF_STATEMENT:\n    def __init__(self, master: any, data_base: dict, line: int):\n        self.master             = master\n        self.line               = line\n        self.data_base          = data_base\n    def DEF( self, \n            tabulation  : int,  \n            class_name  : str   = '' , \n            class_key   : bool  = False,\n            _type_      : str   = 'def',",
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.def_interpreter",
        "documentation": {}
    },
    {
        "label": "INTERNAL_DEF_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.def_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.def_interpreter",
        "peekOfCode": "class INTERNAL_DEF_STATEMENT:\n    def __init__(self, master: any, data_base: dict, line: int):\n        self.master             = master\n        self.line               = line\n        self.data_base          = data_base\n        self.analyze            = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def DEF( self, \n            tabulation  : int,  \n            class_name  : str   = '' ,\n            class_key   : bool  = False,",
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.def_interpreter",
        "documentation": {}
    },
    {
        "label": "UPDATING",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.externalLoading",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.externalLoading",
        "peekOfCode": "class UPDATING:\n    def __init__(self, db1: dict, db2: dict):\n        self.new_data_base  = db1 \n        self.data_base      = db2\n    def UPDATING(self, name: str ):\n        if self.data_base['modulesImport'][ 'moduleLoading' ]['names']:\n            self.id             = self.data_base['modulesImport'][ 'moduleLoading' ]['names'].index(name)\n            try:\n                if self.data_base['modulesImport'][ 'moduleLoading' ]['loading'][self.id]['class_names']:\n                    self.class_name1    = self.new_data_base['class_names']",
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.externalLoading",
        "documentation": {}
    },
    {
        "label": "FUNCTION_TREATMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.functions",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.functions",
        "peekOfCode": "class FUNCTION_TREATMENT:\n    def __init__(self, \n        master      : any, \n        data_base   : dict, \n        line        : int \n        ):\n        self.master             = master\n        self.line               = line\n        self.data_base          = data_base\n        self.library            = self.data_base[ 'LIB' ]",
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.functions",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_DEF_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.functions",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.functions",
        "peekOfCode": "class EXTERNAL_DEF_LOOP_STATEMENT:\n    def __init__(self, \n                master      :any, \n                data_base   :dict, \n                line        :int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.lex_par                = lexer_and_parxer ",
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.functions",
        "documentation": {}
    },
    {
        "label": "INTERNAL_DEF_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.functions",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.functions",
        "peekOfCode": "class INTERNAL_DEF_LOOP_STATEMENT:\n    def __init__(self, \n                master      :any, \n                data_base   :dict, \n                line        :int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.lex_par                = lexer_and_parxer",
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.functions",
        "documentation": {}
    },
    {
        "label": "Loading",
        "kind": 2,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.loading",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.loading",
        "peekOfCode": "def Loading(info: dict, DataBase: dict, db: dict):\n\tif info['module_main'][0] in DataBase['modulesImport']['moduleLoading']['names']:\n\t\tidd = DataBase['modulesImport']['moduleLoading']['names'].index(info['module_main'][0])\n\t\tDataBase['modulesImport']['moduleLoading']['loading'][idd] = db['modulesImport' ].copy()\n\telse: \n\t\tDataBase['modulesImport']['moduleLoading']['names'].append(info['module_main'][0])\n\t\tDataBase['modulesImport']['moduleLoading']['loading'].append(db['modulesImport'].copy())\n\treturn DataBase.copy()",
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.loading",
        "documentation": {}
    },
    {
        "label": "\t\tidd",
        "kind": 5,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.loading",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.loading",
        "peekOfCode": "\t\tidd = DataBase['modulesImport']['moduleLoading']['names'].index(info['module_main'][0])\n\t\tDataBase['modulesImport']['moduleLoading']['loading'][idd] = db['modulesImport' ].copy()\n\telse: \n\t\tDataBase['modulesImport']['moduleLoading']['names'].append(info['module_main'][0])\n\t\tDataBase['modulesImport']['moduleLoading']['loading'].append(db['modulesImport'].copy())\n\treturn DataBase.copy()",
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.loading",
        "documentation": {}
    },
    {
        "label": "\t\tDataBase['modulesImport']['moduleLoading']['loading'][idd]",
        "kind": 5,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.loading",
        "description": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.loading",
        "peekOfCode": "\t\tDataBase['modulesImport']['moduleLoading']['loading'][idd] = db['modulesImport' ].copy()\n\telse: \n\t\tDataBase['modulesImport']['moduleLoading']['names'].append(info['module_main'][0])\n\t\tDataBase['modulesImport']['moduleLoading']['loading'].append(db['modulesImport'].copy())\n\treturn DataBase.copy()",
        "detail": "script.PARXER.PARXER_FUNCTIONS.FUNCTIONS.loading",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.WHILE.whileError",
        "description": "script.PARXER.PARXER_FUNCTIONS.WHILE.whileError",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.PARXER_FUNCTIONS.WHILE.whileError",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_WHILE_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.WHILE.while_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS.WHILE.while_statement",
        "peekOfCode": "class EXTERNAL_WHILE_LOOP_STATEMENT:\n    def __init__(self, \n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS.WHILE.while_statement",
        "documentation": {}
    },
    {
        "label": "INTERNAL_WHILE_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS.WHILE.while_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS.WHILE.while_statement",
        "peekOfCode": "class INTERNAL_WHILE_LOOP_STATEMENT:\n    def __init__(self,\n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS.WHILE.while_statement",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.cmtError",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.cmtError",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.cmtError",
        "documentation": {}
    },
    {
        "label": "COMMENT_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.cmt_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.cmt_interpreter",
        "peekOfCode": "class COMMENT_STATEMENT:\n    def __init__(self, master:any, data_base:dict, line:int):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string\n    def COMMENT(self, tabulation : int = 0, loop_list: any = None):\n        self.error                  = None\n        self.string                 = ''\n        self.normal_string          = ''",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.cmt_interpreter",
        "documentation": {}
    },
    {
        "label": "COMMENT_TRANSFORMS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.cmt_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.cmt_interpreter",
        "peekOfCode": "class COMMENT_TRANSFORMS:\n    def __init__(self, master:list, data_base: dict, error: str, name: any ):\n        self.master         = master\n        self.error          = error\n        self.name           = name\n        self.data_base      = data_base\n    def TRANSTORMATION(self):\n        if self.error is None:\n            self.long_chaine    = \"\"\n            if self.master:",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.cmt_interpreter",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.cmt_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.cmt_interpreter",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.cmt_interpreter",
        "documentation": {}
    },
    {
        "label": "COMMENT_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "peekOfCode": "class COMMENT_STATEMENT:\n    def __init__(self, \n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyse                = control_string.STRING_ANALYSE(data_base=self.data_base, line=self.line)",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "documentation": {}
    },
    {
        "label": "COMMENT_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "peekOfCode": "class COMMENT_LOOP_STATEMENT:\n    def __init__(self, \n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "documentation": {}
    },
    {
        "label": "COMMENT_TRANSFORMS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "peekOfCode": "class COMMENT_TRANSFORMS:\n    def __init__(self, \n                master      : list, \n                data_base   : dict, \n                error       : str, \n                name        : any \n                ):\n        self.master         = master\n        self.error          = error\n        self.name           = name",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "peekOfCode": "ae = bm.fg.cyan_L\nve = bm.fg.rbg(0,0,0)\nwe = bm.fg.rbg(255,255,255)\nclass COMMENT_STATEMENT:\n    def __init__(self, \n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "peekOfCode": "ve = bm.fg.rbg(0,0,0)\nwe = bm.fg.rbg(255,255,255)\nclass COMMENT_STATEMENT:\n    def __init__(self, \n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "peekOfCode": "we = bm.fg.rbg(255,255,255)\nclass COMMENT_STATEMENT:\n    def __init__(self, \n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.comment",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.end",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.end",
        "peekOfCode": "class EXTERNAL_BLOCKS:\n    def __init__(self, string: str, normal_string, data_base: dict, line: int):\n        self.line           = line\n        self.string         = string\n        self.normal_string  = normal_string\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def BLOCKS(self, tabulation: int):\n        self.tabulation                 = tabulation\n        self.back_end                   = self.tabulation - 1",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.end",
        "documentation": {}
    },
    {
        "label": "INTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.end",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.end",
        "peekOfCode": "class INTERNAL_BLOCKS:\n    def __init__(self, string: str, normal_string, data_base: dict, line: int):\n        self.line           = line\n        self.string         = string\n        self.normal_string  = normal_string\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def BLOCKS(self, tabulation: int):\n        self.tabulation     = tabulation\n        self.back_end       = self.tabulation - 1",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.end",
        "documentation": {}
    },
    {
        "label": "SAVE_COMMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.end",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.end",
        "peekOfCode": "class SAVE_COMMENT:\n    def __init__(self, master:str, data_base:dict, line:int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def SAVE(self):\n        self.error          = None\n        self._return_       = None\n        if self.master[ : 4] == 'save':",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.end",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.end",
        "description": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.end",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.PARXER_FUNCTIONS._BEGIN_COMMENT_.end",
        "documentation": {}
    },
    {
        "label": "COMMENT_WINDOWS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS.begin",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS.begin",
        "peekOfCode": "class COMMENT_WINDOWS:\n    def __init__(self,\n                 data_base: dict,\n                 line: int,\n                 term: str\n                 ) -> None:\n        # current line\n        self.line = line\n        # main data base\n        self.data_base = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS.begin",
        "documentation": {}
    },
    {
        "label": "COMMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS.comment",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS.comment",
        "peekOfCode": "class COMMENT:\n    def __init__(self,\n                 master         : str,\n                 data_base      : dict,\n                 line           : int,\n                 history        : list,\n                 store_value    : list,\n                 space          : int,\n                 save_block     : bool,\n                 comment_storage: list",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.BEGIN.WINDOWS.comment",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_FOR_WINDOWS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.WindowsFor",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.WindowsFor",
        "peekOfCode": "class EXTERNAL_FOR_WINDOWS:\n    def __init__(self, \n        data_base   : dict, \n        line        : int,\n        term        : str \n        ):\n        # current line \n        self.line               = line\n        # main data base\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.WindowsFor",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_FOR",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.externalFor",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.externalFor",
        "peekOfCode": "class EXTERNAL_FOR:\n    def __init__(self, \n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int\n            ):\n        # main string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.externalFor",
        "documentation": {}
    },
    {
        "label": "NEXT_ANALYZE",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.for_analyze",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.for_analyze",
        "peekOfCode": "class NEXT_ANALYZE:\n    def __init__(self, master: str, data_base : dict, line : int):\n        self.line               = line\n        self.data_base          = data_base\n        self.master             = master\n        self.main               = main\n    @cython.cfunc\n    def SUB_ANALYZE(self, _id_:int = 1, _type_:any = None):\n        self.error          = None\n        self.lexer, self.string, self.error = self.main.MAIN(self.master, self.data_base, self.line).MAIN(_id_, _type_, True)",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.for_analyze",
        "documentation": {}
    },
    {
        "label": "INTERNAL_FOR",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.internalFor",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.internalFor",
        "peekOfCode": "class INTERNAL_FOR:\n    def __init__(self, \n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int\n            ):\n        # main string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.internalFor",
        "documentation": {}
    },
    {
        "label": "INTERNAL_FOR_WINDOWS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.subWindowsFor",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.subWindowsFor",
        "peekOfCode": "class INTERNAL_FOR_WINDOWS:\n    def __init__(self, \n        data_base   : dict, \n        line        : int,\n        term        : str \n        ):\n        # current line \n        self.line               = line\n        # main data base\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.WIN.subWindowsFor",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.forError",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.forError",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.FOR.forError",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_IF_WINDOWS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS.WindowsIF",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS.WindowsIF",
        "peekOfCode": "class EXTERNAL_IF_WINDOWS:\n    def __init__(self, \n        data_base   : dict, \n        line        : int,\n        term        : str \n        ):\n        # current line \n        self.line               = line\n        # main data base\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS.WindowsIF",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_IF",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS.externalIF",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS.externalIF",
        "peekOfCode": "class EXTERNAL_IF:\n    def __init__(self, \n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int,    \n            else_block  : dict\n            ) -> None:",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS.externalIF",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IF",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS.internalIF",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS.internalIF",
        "peekOfCode": "class INTERNAL_IF:\n    def __init__(self, \n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int,    \n            else_block  : dict\n            ):",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS.internalIF",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IF_WINDOWS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS.subWindowsIF",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS.subWindowsIF",
        "peekOfCode": "class INTERNAL_IF_WINDOWS:\n    def __init__(self, \n        data_base   : dict, \n        line        : int,\n        term        : str \n        ):\n        # current line \n        self.line               = line\n        # main data base\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.IF.WINDOWS.subWindowsIF",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_SWITCH_WINDOWS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS.WindowsSwitch",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS.WindowsSwitch",
        "peekOfCode": "class EXTERNAL_SWITCH_WINDOWS:\n    def __init__(self, \n        data_base   : dict, \n        line        : int,\n        term        : str \n        ):\n        # current line \n        self.line               = line\n        # main data base\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS.WindowsSwitch",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_SWITCH",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS.externalSwitch",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS.externalSwitch",
        "peekOfCode": "class EXTERNAL_SWITCH:\n    def __init__(self, \n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int,    \n            case_block  : dict\n            ):",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.SWITCH.WINDOWS.externalSwitch",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_TRY_WINDOWS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN.WindowsTry",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN.WindowsTry",
        "peekOfCode": "class EXTERNAL_TRY_WINDOWS:\n    def __init__(self, \n            data_base   : dict, \n            line        : int,\n            term        : str \n            ):\n        # current line \n        self.line               = line\n        # main data base\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN.WindowsTry",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_TRY",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN.externalTry",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN.externalTry",
        "peekOfCode": "class EXTERNAL_TRY:\n    def __init__(self, \n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int,\n            try_block   : dict\n            ):",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN.externalTry",
        "documentation": {}
    },
    {
        "label": "INTERNAL_TRY",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN.internalTry",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN.internalTry",
        "peekOfCode": "class INTERNAL_TRY:\n    def __init__(self, \n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int,\n            try_block   : dict\n            ):",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN.internalTry",
        "documentation": {}
    },
    {
        "label": "INTERNAL_TRY_WINDOWS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN.subWinTry",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN.subWinTry",
        "peekOfCode": "class INTERNAL_TRY_WINDOWS:\n    def __init__(self, \n            data_base   : dict, \n            line        : int,\n            term        : str \n            ):\n        # current line \n        self.line               = line\n        # main data base\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.TRY.WIN.subWinTry",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_UNLESS_WINDOWS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS.WindowsUnless",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS.WindowsUnless",
        "peekOfCode": "class EXTERNAL_UNLESS_WINDOWS:\n    def __init__(self, \n        data_base   : dict, \n        line        : int,\n        term        : str \n        ):\n        # current line \n        self.line               = line\n        # main data base\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS.WindowsUnless",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_UNLESS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS.externalUnless",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS.externalUnless",
        "peekOfCode": "class EXTERNAL_UNLESS:\n    def __init__(self,\n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int,    \n            index_else  : int\n            ):",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS.externalUnless",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_UNLESS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS.internalUnless",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS.internalUnless",
        "peekOfCode": "class EXTERNAL_UNLESS:\n    def __init__(self,\n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int,    \n            index_else  : int\n            ):",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS.internalUnless",
        "documentation": {}
    },
    {
        "label": "INTERNAL_UNLESS_WINDOWS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS.subWindowsUnless",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS.subWindowsUnless",
        "peekOfCode": "class INTERNAL_UNLESS_WINDOWS:\n    def __init__(self, \n        data_base   : dict, \n        line        : int,\n        term        : str \n        ):\n        # current line \n        self.line               = line\n        # main data base\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.UNLESS.subWindowsUnless",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_WHILE_WINDOWS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS.WindowsWhile",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS.WindowsWhile",
        "peekOfCode": "class EXTERNAL_WHILE_WINDOWS:\n    def __init__(self, \n        data_base   : dict, \n        line        : int,\n        term        : str \n        ):\n        # current line \n        self.line               = line\n        # main data base\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS.WindowsWhile",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_WHILE",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS.externalWhile",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS.externalWhile",
        "peekOfCode": "class EXTERNAL_WHILE:\n    def __init__(self, \n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int,    \n            ):\n        # main string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS.externalWhile",
        "documentation": {}
    },
    {
        "label": "INTERNAL_WHILE",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS.internalWhile",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS.internalWhile",
        "peekOfCode": "class INTERNAL_WHILE:\n    def __init__(self, \n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int,    \n            ):\n        # main string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS.internalWhile",
        "documentation": {}
    },
    {
        "label": "INTERNAL_WHILE_WINDOWS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS.subWindowsWhile",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS.subWindowsWhile",
        "peekOfCode": "class INTERNAL_WHILE_WINDOWS:\n    def __init__(self, \n        data_base   : dict, \n        line        : int,\n        term        : str \n        ):\n        # current line \n        self.line               = line\n        # main data base\n        self.data_base          = data_base",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.WHILE.WINDOWS.subWindowsWhile",
        "documentation": {}
    },
    {
        "label": "TREATMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.for_block_treatment",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.for_block_treatment",
        "peekOfCode": "class TREATMENT:\n    def __init__(self, data_base:dict, line:int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.lex_par                = lexer_and_parxer\n        self.variables              = data_base[ 'variables' ][ 'vars' ]\n        self._values_               = data_base[ 'variables' ][ 'values' ]\n    def FOR( self, \n            main_string     : str, \n            for_values      : list,",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.for_block_treatment",
        "documentation": {}
    },
    {
        "label": "UPDATE_VAR_NAME",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.for_block_treatment",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.for_block_treatment",
        "peekOfCode": "class UPDATE_VAR_NAME:\n    def __init__(self, data_base:dict):\n        self.data_base          = data_base\n        self.variables          = self.data_base[ 'variables' ][ 'vars' ]\n    def UPDATE(self, value_of_variable: any, var_name : str):\n        self.idd        = self.variables.index( var_name )\n        self.data_base[ 'variables' ][ 'values' ][ self.idd ] = value_of_variable",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.for_block_treatment",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_FOR_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.for_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.for_interpreter",
        "peekOfCode": "class EXTERNAL_FOR_STATEMENT:\n    def __init__(self, \n                master      :any, \n                data_base   :dict, \n                line        :int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.for_interpreter",
        "documentation": {}
    },
    {
        "label": "INTERNAL_FOR_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._FOR_.for_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS._FOR_.for_interpreter",
        "peekOfCode": "class INTERNAL_FOR_STATEMENT:\n    def __init__(self, master:any, data_base:dict, line:int):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string\n        self.lex_par                = lexer_and_parxer\n    def FOR_STATEMENT(self, \n                    tabulation  : int,\n                    loop_list   : list  = [],",
        "detail": "script.PARXER.PARXER_FUNCTIONS._FOR_.for_interpreter",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.IfError",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.IfError",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.IfError",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "peekOfCode": "class EXTERNAL_BLOCKS:\n    def __init__(self, \n                string         : str,         # concatenated string \n                normal_string  : str,         # normal string \n                data_base      : dict,        # data base\n                line           : int          # current line \n                ):\n        self.line           = line\n        self.string         = string\n        self.normal_string  = normal_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "documentation": {}
    },
    {
        "label": "INTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "peekOfCode": "class INTERNAL_BLOCKS:\n    def __init__(self, \n                string          : str, \n                normal_string   : str, \n                data_base       : dict, \n                line            : int\n                ):\n        self.line           = line\n        self.string         = string\n        self.normal_string  = normal_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "documentation": {}
    },
    {
        "label": "MAIN_IF",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "peekOfCode": "class MAIN_IF:\n    def __init__(self, \n                 master         :str,\n                 data_base      :int, \n                 line           :int\n                 ):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.num_lex            = numeric_lexer",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "documentation": {}
    },
    {
        "label": "CHECK_VALUES",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "peekOfCode": "class CHECK_VALUES:\n    def __init__(self, data_base: dict):\n        self.data_base      = data_base\n    def BEFORE(self):\n        self._return_ = {\n            'variables_vars'     : self.data_base[ 'variables' ][ 'vars'][ : ],\n            'variables_vals'     : self.data_base[ 'variables' ][ 'values' ][ : ],\n            'global_vars'        : self.data_base[ 'global_vars' ][ 'vars' ][ : ],\n            'global_vals'        : self.data_base[ 'global_vars' ][ 'values' ][ : ]\n        }",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.end_else_elif",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_IF_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.if_inter",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.if_inter",
        "peekOfCode": "class EXTERNAL_IF_STATEMENT:\n    def __init__(self, master, data_base, line):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string\n        self.lex_par                = lexer_and_parxer\n    def IF_STATEMENT(self, \n            tabulation  : int   = 1,\n            loop_list   : list  = [],",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.if_inter",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IF_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.if_inter",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.if_inter",
        "peekOfCode": "class INTERNAL_IF_STATEMENT:\n    def __init__(self, master, data_base, line):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string\n        self.lex_par                = lexer_and_parxer\n    def IF_STATEMENT(self, \n                    tabulation     : int   = 1, \n                    loop_list      : list  = [], ",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.if_inter",
        "documentation": {}
    },
    {
        "label": "EMPTY",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.if_inter",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.if_inter",
        "peekOfCode": "class EMPTY:\n    def __init__(self, data_base: dict, line: int ):\n        self.data_base  = data_base \n        self.line       = line\n    def EMPTY(self, last : str = '', string : str = '' ):\n        k               = None \n        self.newString  = ''\n        self.list   = ['if', 'unless', 'else', 'elif']\n        if last in self.list:\n            k = stdin.STDIN(self.data_base, self.line ).ENCODING( string ) + 2",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.if_inter",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_IF_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.if_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.if_interpreter",
        "peekOfCode": "class EXTERNAL_IF_LOOP_STATEMENT:\n    def __init__(self, master, data_base, line):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string\n        self.lex_par                = lexer_and_parxer\n    def IF_STATEMENT(self, bool_value: bool, tabulation : int = 1, loop_list: any = None, \n                     _type_: str = 'conditional', keyPass: bool = False):\n        self.error                  = None",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.if_interpreter",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IF_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.if_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.if_interpreter",
        "peekOfCode": "class INTERNAL_IF_LOOP_STATEMENT:\n    def __init__(self, master:any, data_base:dict, line:int):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string\n        self.lex_par                = lexer_and_parxer\n    def IF_STATEMENT(self, bool_value: bool, tabulation : int, loop_list:any = None, _type_ :str = 'conditional', keyPass: bool = False):\n        self.error                  = None\n        self.string                 = ''",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.if_interpreter",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.if_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.if_interpreter",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.if_interpreter",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_IF_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.if_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.if_statement",
        "peekOfCode": "class EXTERNAL_IF_LOOP_STATEMENT:\n    def __init__(self, \n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.if_statement",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IF_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.if_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.if_statement",
        "peekOfCode": "class INTERNAL_IF_LOOP_STATEMENT:\n    def __init__(self,\n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.if_statement",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_IF_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.loop_if_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.loop_if_statement",
        "peekOfCode": "class EXTERNAL_IF_LOOP_STATEMENT:\n    def __init__(self, \n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.loop_if_statement",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IF_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._IF_.loop_if_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS._IF_.loop_if_statement",
        "peekOfCode": "class INTERNAL_IF_LOOP_STATEMENT:\n    def __init__(self,\n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._IF_.loop_if_statement",
        "documentation": {}
    },
    {
        "label": "CASE_TREATMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_.case",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_.case",
        "peekOfCode": "class CASE_TREATMENT:\n    def __init__(self,\n                main_master : any,\n                master      : any,\n                ):\n        self.master             = master\n        self.main_master        = main_master\n    def CASE(self):\n        self.error              = None\n        self.type               = type( self.master )",
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_.case",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_.switchError",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_.switchError",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_.switchError",
        "documentation": {}
    },
    {
        "label": "SWITCH",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_.switch_inter",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_.switch_inter",
        "peekOfCode": "class SWITCH:\n    def __init__(self, master: any , data_base: dict, line: int) -> None:\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string\n        self.lex_par                = lexer_and_parxer\n    def SWITCH(self, \n            tabulation  : int   = 1,\n            loop_list   : list  = [],",
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_.switch_inter",
        "documentation": {}
    },
    {
        "label": "SWITCH_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._SWITCH_.switch_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS._SWITCH_.switch_statement",
        "peekOfCode": "class SWITCH_LOOP_STATEMENT:\n    def __init__(self, \n                master      : any,\n                data_base   : dict,\n                line        : int\n                ) -> None:\n        # current line\n        self.line                   = line\n        # can take any value\n        self.master                 = master",
        "detail": "script.PARXER.PARXER_FUNCTIONS._SWITCH_.switch_statement",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_.tryError",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_.tryError",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_.tryError",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_TRY_FOR_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_.try_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_.try_statement",
        "peekOfCode": "class EXTERNAL_TRY_FOR_STATEMENT:\n    def __init__(self, \n                master      :any, \n                data_base   :dict, \n                line        :int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_.try_statement",
        "documentation": {}
    },
    {
        "label": "INTERNAL_TRY_FOR_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._TRY_.try_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS._TRY_.try_statement",
        "peekOfCode": "class INTERNAL_TRY_FOR_STATEMENT:\n    def __init__(self, \n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.PARXER.PARXER_FUNCTIONS._TRY_.try_statement",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.UnlessError",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.UnlessError",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.UnlessError",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_UNLESS_FOR_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.loop_unless_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.loop_unless_statement",
        "peekOfCode": "class EXTERNAL_UNLESS_FOR_STATEMENT:\n    def __init__(self, \n                master      : any,                              # any value\n                data_base   : dict,                             # data base\n                line        : int                               # current line\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.loop_unless_statement",
        "documentation": {}
    },
    {
        "label": "INTERNAL_UNLESS_FOR_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.loop_unless_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.loop_unless_statement",
        "peekOfCode": "class INTERNAL_UNLESS_FOR_STATEMENT:\n    def __init__(self,\n            master      : any, \n            data_base   : dict, \n            line        : int\n            ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.loop_unless_statement",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_UNLESS_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_interpreter",
        "peekOfCode": "class EXTERNAL_UNLESS_STATEMENT:\n    def __init__(self, master, data_base, line):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string\n        self.lex_par                = lexer_and_parxer\n    def UNLESS_STATEMENT(self, \n                    tabulation  : int   = 1,\n                    loop_list   : list  = [],",
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_interpreter",
        "documentation": {}
    },
    {
        "label": "INTERNAL_UNLESS_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_interpreter",
        "peekOfCode": "class INTERNAL_UNLESS_STATEMENT:\n    def __init__(self, master, data_base, line):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string\n        self.lex_par                = lexer_and_parxer\n    def UNLESS_STATEMENT(self, \n                    tabulation     : int   = 1, \n                    loop_list      : list  = [], ",
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_interpreter",
        "documentation": {}
    },
    {
        "label": "EMPTY",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_interpreter",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_interpreter",
        "peekOfCode": "class EMPTY:\n    def __init__(self, data_base: dict, line: int ):\n        self.data_base  = data_base \n        self.line       = line\n    def EMPTY(self, last : str = '', string : str = '' ):\n        k               = None \n        self.newString  = ''\n        self.list   = ['if', 'unless', 'else', 'elif']\n        if last in self.list:\n            k = stdin.STDIN(self.data_base, self.line ).ENCODING( string ) + 2",
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_interpreter",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_UNLESS_FOR_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_statement",
        "peekOfCode": "class EXTERNAL_UNLESS_FOR_STATEMENT:\n    def __init__(self, \n                master      : any,                              # any value\n                data_base   : dict,                             # data base\n                line        : int                               # current line\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_statement",
        "documentation": {}
    },
    {
        "label": "INTERNAL_UNLESS_FOR_STATEMENT",
        "kind": 6,
        "importPath": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_statement",
        "description": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_statement",
        "peekOfCode": "class INTERNAL_UNLESS_FOR_STATEMENT:\n    def __init__(self,\n            master      : any, \n            data_base   : dict, \n            line        : int\n            ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "script.PARXER.PARXER_FUNCTIONS._UNLESS_.unless_statement",
        "documentation": {}
    },
    {
        "label": "SHO",
        "kind": 6,
        "importPath": "script.PARXER.PRINT.show_data",
        "description": "script.PARXER.PRINT.show_data",
        "peekOfCode": "class SHOW :\n    def __init__(self,\n                    master      : any,              # master can take any value (list, tuple, .....)\n                    data_base   : dict,             # data base\n                    key         : bool              # key to print or not value, if key == False print is activated\n                                                    # else print is set on False. in the program to print value we need to use\n                                                    # | print * something |, else anything will no appear on the screen.\n                 ):\n        self.master         = master\n        self.key            = key",
        "detail": "script.PARXER.PRINT.show_data",
        "documentation": {}
    },
    {
        "label": "LineFeed",
        "kind": 2,
        "importPath": "script.PARXER.PRINT.show_data",
        "description": "script.PARXER.PRINT.show_data",
        "peekOfCode": "def LineFeed( string : str, typ : any):\n    if typ in [type(str()), type(numpy.array([0])),type(pd.DataFrame({'r':[0, 0]}))]:\n        if '\\n' in string:\n            if '\\n' == string[0]: pass \n            else: string = '\\n'+string \n        else: pass       \n    else: pass\n    return string",
        "detail": "script.PARXER.PRINT.show_data",
        "documentation": {}
    },
    {
        "label": "GET_VAR",
        "kind": 6,
        "importPath": "script.PARXER.VAR_NAME.get_var_name",
        "description": "script.PARXER.VAR_NAME.get_var_name",
        "peekOfCode": "class GET_VAR:\n    def __init__(self, master: str, data_base: dict, line:int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.variable       = var_name_checking\n    def GET_VAR(self):\n        self.error          = None\n        self._return_var_   = None\n        self.var, self.key_names, self.info, self.error = self.variable.NAME_CHECKING(self.master,",
        "detail": "script.PARXER.VAR_NAME.get_var_name",
        "documentation": {}
    },
    {
        "label": "NUMERICAL",
        "kind": 6,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "class NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection          = particular_str_selection\n        self.chars              = self.control.LOWER_CASE()+self.control.UPPER_CASE()+['_']\n        self.main_value         = self.master[ 'all_data' ]\n        self.variables          = self.data_base[ 'variables' ][ 'vars' ]",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "DICT",
        "kind": 6,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "class DICT:\n    def __init__(self, master:list, data_base:dict, line:int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.variables      = self.data_base[ 'variables' ][ 'vars' ]\n        self._values_       = self.data_base[ 'variables' ][ 'values' ]\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def DICT_CHECK(self, main_string : str ):\n        self.error          = None",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "TYPE",
        "kind": 6,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "class TYPE:\n    def __init__(self, main_master: dict, master: dict, data_base: dict, line: int, type: str):\n        self.type               = type\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.main_master        = main_master\n    def TYPE(self, main_string: str, name : str = 'python'):\n        self.error              = None\n        self._return_           = None",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "FINAL_VALUE",
        "kind": 6,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "class FINAL_VALUE:\n    def __init__(self, master: list, data_base: dict, line: int, logical: list):\n        self.master         = master\n        self.logical        = logical\n        self.line           = line\n        self.data_base      = data_base\n        self.orange         = bm.fg.rbg(252, 127, 0 )\n        self.cyan           = bm.fg.cyan_L\n        self.red            = bm.fg.red_L\n        self.green          = bm.fg.rbg(0, 255, 0)",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "COMPLEX_ANALYZE",
        "kind": 6,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "class COMPLEX_ANALYZE:\n    def __init__(self, master: complex, line:int):\n        self.master         = master\n        self.line           = line\n    def COMPLEX(self):\n        self.error          = None\n        self.real = str(self.master.real)\n        self.imag = str(self.master.imag)\n        if self.real[ 0 ] in [ '-' ]:\n            if self.real[ 1 ] not in [ 'i', 'n' ]:",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "ARRITHMETIC_DEEP_CHECKING",
        "kind": 6,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "class ARRITHMETIC_DEEP_CHECKING:\n    def __init__(self, master: any, values: list, operators: list, data_base:dict, line: int):\n        self.master             = master\n        self.operators          = operators\n        self.data_base          = data_base\n        self.line               = line\n        self.values             = values\n    def INIT(self, main_string: str):\n        self.error              = None\n        self.index              = []",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "CHECK",
        "kind": 6,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "class CHECK:\n    def __init__(self, operators : list):\n        self.op = operators \n    def CHECK(self):\n        self.key = []\n        self.doubleCheck = False\n        for i, op in enumerate(self.op):\n            if op is None: \n                self.key.append((i, False))\n                if self.doubleCheck is True: pass ",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "me",
        "kind": 5,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "me = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "le",
        "kind": 5,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "le = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "be",
        "kind": 5,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "be = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection          = particular_str_selection",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "ge",
        "kind": 5,
        "importPath": "script.PARXER.WINParxer.num_val",
        "description": "script.PARXER.WINParxer.num_val",
        "peekOfCode": "ge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection          = particular_str_selection\n        self.chars              = self.control.LOWER_CASE()+self.control.UPPER_CASE()+['_']",
        "detail": "script.PARXER.WINParxer.num_val",
        "documentation": {}
    },
    {
        "label": "ASSEMBLY",
        "kind": 6,
        "importPath": "script.PARXER.WINParxer.parxer",
        "description": "script.PARXER.WINParxer.parxer",
        "peekOfCode": "class ASSEMBLY( ):\n    def __init__(self, \n        master      : dict, \n        data_base   : dict, \n        line        : int \n        ):\n        # current line \n        self.line           = line\n        # lexer \n        self.master         = master",
        "detail": "script.PARXER.WINParxer.parxer",
        "documentation": {}
    },
    {
        "label": "ASSEMBLY",
        "kind": 6,
        "importPath": "script.PARXER.WINParxer.parxer_file_interpreter",
        "description": "script.PARXER.WINParxer.parxer_file_interpreter",
        "peekOfCode": "class ASSEMBLY( ):\n    def __init__(self, \n        master      : dict, \n        data_base   : dict, \n        line        : int \n        ):\n        # current line \n        self.line           = line\n        # lexer \n        self.master         = master",
        "detail": "script.PARXER.WINParxer.parxer_file_interpreter",
        "documentation": {}
    },
    {
        "label": "ASSEMBLY",
        "kind": 6,
        "importPath": "script.PARXER.WINParxer.parxer_for_interpreter",
        "description": "script.PARXER.WINParxer.parxer_for_interpreter",
        "peekOfCode": "class ASSEMBLY( ):\n    def __init__(self, \n        master      : dict, \n        data_base   : dict, \n        line        : int \n        ):\n        # current line \n        self.line           = line\n        # lexer \n        self.master         = master",
        "detail": "script.PARXER.WINParxer.parxer_for_interpreter",
        "documentation": {}
    },
    {
        "label": "TRansPiler",
        "kind": 6,
        "importPath": "script.PARXER.WINParxer.transpiler",
        "description": "script.PARXER.WINParxer.transpiler",
        "peekOfCode": "class TRansPiler:\n    def __init__(self, data_base: dict, line: int, history: list = []):\n        self.data_base      = data_base\n        self.line           = line\n        self.history        = history \n    def Transformation(self):\n        self.vars = self.data_base['Transpiler_for']['variables'].copy()\n        self.head = self.data_base['Transpiler_for']['residus_head'].copy()\n        self.string = \"\"\n        if self.vars['vars']:",
        "detail": "script.PARXER.WINParxer.transpiler",
        "documentation": {}
    },
    {
        "label": "CLASSIFICATION",
        "kind": 6,
        "importPath": "script.PARXER.module_load_treatment",
        "description": "script.PARXER.module_load_treatment",
        "peekOfCode": "class CLASSIFICATION:\n    def __init__(self, DataBase: dict, line: int):\n        self.DataBase   = DataBase\n        self.line       = line\n    def CLASSIFICATION( self, modules : dict = {}, baseFileName : str = '', locked : bool = True, info : dict = {} ):\n        self.db             = db.DATA_BASE().STORAGE().copy()\n        self.lineI          = 0\n        self.error          = None\n        self.key            = True\n        self.baseFileName   = info['module_main'][0]",
        "detail": "script.PARXER.module_load_treatment",
        "documentation": {}
    },
    {
        "label": "INIT",
        "kind": 6,
        "importPath": "script.PARXER.module_load_treatment",
        "description": "script.PARXER.module_load_treatment",
        "peekOfCode": "class INIT:\n    def __init__(self, db):\n        self.db = db\n    def INIT(self):\n        functionNames, functions = db.DATA_BASE().FUNCTIONS()\n        self.db['global_vars']['vars']                          = []\n        self.db['global_vars']['values']                        = []\n        self.db['variables']['values']                          = []\n        self.db['variables']['vars']                            = []\n        self.db['irene']                                        = None ",
        "detail": "script.PARXER.module_load_treatment",
        "documentation": {}
    },
    {
        "label": "\t\t#self.idd",
        "kind": 5,
        "importPath": "script.PARXER.module_load_treatment",
        "description": "script.PARXER.module_load_treatment",
        "peekOfCode": "\t\t#self.idd = self.DataBase['modulesImport']['moduleLoading']['names'].index(info['module_main'][0])\n        #self.DataBase['modulesImport']['moduleLoading']['loading'][self.idd] = self.db['modulesImport' ].copy()\n        #else: \n        #    self.DataBase['modulesImport']['moduleLoading']['names'].append(info['module_main'][0])\n        #    self.DataBase['modulesImport']['moduleLoading']['loading'].append(self.db['modulesImport' ].copy())\n        INIT(self.db).INIT()\n        return self.error \nclass INIT:\n    def __init__(self, db):\n        self.db = db",
        "detail": "script.PARXER.module_load_treatment",
        "documentation": {}
    },
    {
        "label": "NUMERICAL",
        "kind": 6,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "class NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection          = particular_str_selection\n        self.chars              = self.control.LOWER_CASE()+self.control.UPPER_CASE()+['_']\n        self.main_value         = self.master[ 'all_data' ]\n        self.variables          = self.data_base[ 'variables' ][ 'vars' ]",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "DICT",
        "kind": 6,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "class DICT:\n    def __init__(self, master:list, data_base:dict, line:int):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.variables      = self.data_base[ 'variables' ][ 'vars' ]\n        self._values_       = self.data_base[ 'variables' ][ 'values' ]\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )\n    def DICT_CHECK(self, main_string : str ):\n        self.error          = None",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "TYPE",
        "kind": 6,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "class TYPE:\n    def __init__(self, main_master: dict, master: dict, data_base: dict, line: int, type: str):\n        self.type               = type\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.main_master        = main_master\n    def TYPE(self, main_string: str, name : str = 'python'):\n        self.error              = None\n        self._return_           = None",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "FINAL_VALUE",
        "kind": 6,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "class FINAL_VALUE:\n    def __init__(self, master: list, data_base: dict, line: int, logical: list):\n        self.master         = master\n        self.logical        = logical\n        self.line           = line\n        self.data_base      = data_base\n        self.orange         = bm.fg.rbg(252, 127, 0 )\n        self.cyan           = bm.fg.cyan_L\n        self.red            = bm.fg.red_L\n        self.green          = bm.fg.rbg(0, 255, 0)",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "COMPLEX_ANALYZE",
        "kind": 6,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "class COMPLEX_ANALYZE:\n    def __init__(self, master: complex, line:int):\n        self.master         = master\n        self.line           = line\n    def COMPLEX(self):\n        self.error          = None\n        self.real = str(self.master.real)\n        self.imag = str(self.master.imag)\n        if self.real[ 0 ] in [ '-' ]:\n            if self.real[ 1 ] not in [ 'i', 'n' ]:",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "ARRITHMETIC_DEEP_CHECKING",
        "kind": 6,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "class ARRITHMETIC_DEEP_CHECKING:\n    def __init__(self, master: any, values: list, operators: list, data_base:dict, line: int):\n        self.master             = master\n        self.operators          = operators\n        self.data_base          = data_base\n        self.line               = line\n        self.values             = values\n    def INIT(self, main_string: str):\n        self.error              = None\n        self.index              = []",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "CHECK",
        "kind": 6,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "class CHECK:\n    def __init__(self, operators : list):\n        self.op = operators \n    def CHECK(self):\n        self.key = []\n        self.doubleCheck = False\n        for i, op in enumerate(self.op):\n            if op is None: \n                self.key.append((i, False))\n                if self.doubleCheck is True: pass ",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nme = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "me",
        "kind": 5,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "me = Fore.LIGHTCYAN_EX\nle = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "le",
        "kind": 5,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "le = Fore.RED\nbe = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "be",
        "kind": 5,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "be = Fore.BLUE\nge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection          = particular_str_selection",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "ge",
        "kind": 5,
        "importPath": "script.PARXER.numerical_value",
        "description": "script.PARXER.numerical_value",
        "peekOfCode": "ge = Fore.GREEN\n@cython.cclass\nclass NUMERICAL:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line               = line\n        self.master             = master\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )\n        self.selection          = particular_str_selection\n        self.chars              = self.control.LOWER_CASE()+self.control.UPPER_CASE()+['_']",
        "detail": "script.PARXER.numerical_value",
        "documentation": {}
    },
    {
        "label": "ASSEMBLY",
        "kind": 6,
        "importPath": "script.PARXER.partial_assembly",
        "description": "script.PARXER.partial_assembly",
        "peekOfCode": "class ASSEMBLY( ):\n    def __init__(self, master: dict, data_base: dict, line: int ):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.num_parxer     = numerical_value\n        self.variables      = self.data_base[ 'variables' ][ 'vars' ]\n        self._values_       = self.data_base[ 'variables' ][ 'values' ]\n        self.global_vars    = self.data_base[ 'global_vars' ][ 'vars' ]\n        self.global_values  = self.data_base[ 'global_vars' ][ 'values' ]",
        "detail": "script.PARXER.partial_assembly",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.parxerError",
        "description": "script.PARXER.parxerError",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.parxerError",
        "documentation": {}
    },
    {
        "label": "ASSEMBLY",
        "kind": 6,
        "importPath": "script.PARXER.parxer_assembly",
        "description": "script.PARXER.parxer_assembly",
        "peekOfCode": "class ASSEMBLY( ):\n    def __init__(self, master: dict, data_base: dict, line: int ):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.num_parxer     = numerical_value\n        self.variables      = self.data_base[ 'variables' ][ 'vars' ]\n        self._values_       = self.data_base[ 'variables' ][ 'values' ]\n        self.global_vars    = self.data_base[ 'global_vars' ][ 'vars' ]\n        self.global_values  = self.data_base[ 'global_vars' ][ 'values' ]",
        "detail": "script.PARXER.parxer_assembly",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.PARXER.parxer_assembly",
        "description": "script.PARXER.parxer_assembly",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.PARXER.parxer_assembly",
        "documentation": {}
    },
    {
        "label": "STRING",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.LinuxMain",
        "description": "script.STDIN.LinuxSTDIN.LinuxMain",
        "peekOfCode": "class STRING:   \n    def __init__(self, DataBase : dict, line : int) :\n        self.DataBase       = DataBase\n        self.line           = line \n        self.analyze        = control_string.STRING_ANALYSE( self.DataBase, self.line )\n    def STRING( self, string : str, tabulation : int = 0):\n        self.string_concatenate, self.tab_active, self.error = self.analyze.BUILD_CON( string, tabulation)\n        self.normal_string  = self.analyze.BUILD_NON_CON( string, tabulation )\n        return self.string_concatenate, self.normal_string, self.tab_active, self.error\nclass terminal:",
        "detail": "script.STDIN.LinuxSTDIN.LinuxMain",
        "documentation": {}
    },
    {
        "label": "terminal",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.LinuxMain",
        "description": "script.STDIN.LinuxSTDIN.LinuxMain",
        "peekOfCode": "class terminal:\n    def __init__( self, DataBase: dict, line: int):\n        self.DataBase       = DataBase\n        self.line           = line \n    def black_mamba( self ):\n        os.system( 'clear' )\n        bm.head().head()\n        while True :\n            self.input              = '{}>>> : {}'.format(bm.fg.yellow_L, bm.init.reset) # ''\n            self.previous_next_line = []",
        "detail": "script.STDIN.LinuxSTDIN.LinuxMain",
        "documentation": {}
    },
    {
        "label": "readchar",
        "kind": 2,
        "importPath": "script.STDIN.LinuxSTDIN.LinuxMain",
        "description": "script.STDIN.LinuxSTDIN.LinuxMain",
        "peekOfCode": "def readchar():\n    fd              = sys.stdin.fileno()\n    old_settings    = termios.tcgetattr( fd )\n    try:\n        tty.setraw( sys.stdin )\n        ch = ord( sys.stdin.read( 1 ) )\n    finally:\n        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings )\n    if ch == '0x03':\n        raise KeyboardInterrupt",
        "detail": "script.STDIN.LinuxSTDIN.LinuxMain",
        "documentation": {}
    },
    {
        "label": "syntax_highlight",
        "kind": 2,
        "importPath": "script.STDIN.LinuxSTDIN.LinuxMain",
        "description": "script.STDIN.LinuxSTDIN.LinuxMain",
        "peekOfCode": "def syntax_highlight( name : str ):\n    stripped = name.rstrip()\n    return stripped + bm.bg.blue_L + \" \" * ( len( name ) - len( stripped ) ) + bm.init.reset \ndef ansi_remove_chars( name : str ):\n    ansi_escape = re.compile(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')\n    return ansi_escape.sub ('', name)\ndef show( name : str ):\n    try:\n        float_name = float( name )\n        print_name = '\\n{}[ {}result{} ] : {}{}{}\\n'.format( bm.fg.magenta_M, bm.fg.red_L, bm.fg.magenta_M, bm.fg.green_L, float_name, bm.init.reset)",
        "detail": "script.STDIN.LinuxSTDIN.LinuxMain",
        "documentation": {}
    },
    {
        "label": "ansi_remove_chars",
        "kind": 2,
        "importPath": "script.STDIN.LinuxSTDIN.LinuxMain",
        "description": "script.STDIN.LinuxSTDIN.LinuxMain",
        "peekOfCode": "def ansi_remove_chars( name : str ):\n    ansi_escape = re.compile(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')\n    return ansi_escape.sub ('', name)\ndef show( name : str ):\n    try:\n        float_name = float( name )\n        print_name = '\\n{}[ {}result{} ] : {}{}{}\\n'.format( bm.fg.magenta_M, bm.fg.red_L, bm.fg.magenta_M, bm.fg.green_L, float_name, bm.init.reset)\n        print( print_name)\n    except:\n        print_name = '\\n\\n{}[ {}result{} ] : {}{}\\n'.format( bm.fg.magenta_M, bm.fg.red_L, bm.fg.magenta_M, bm.init.reset, name)",
        "detail": "script.STDIN.LinuxSTDIN.LinuxMain",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "script.STDIN.LinuxSTDIN.LinuxMain",
        "description": "script.STDIN.LinuxSTDIN.LinuxMain",
        "peekOfCode": "def show( name : str ):\n    try:\n        float_name = float( name )\n        print_name = '\\n{}[ {}result{} ] : {}{}{}\\n'.format( bm.fg.magenta_M, bm.fg.red_L, bm.fg.magenta_M, bm.fg.green_L, float_name, bm.init.reset)\n        print( print_name)\n    except:\n        print_name = '\\n\\n{}[ {}result{} ] : {}{}\\n'.format( bm.fg.magenta_M, bm.fg.red_L, bm.fg.magenta_M, bm.init.reset, name)\n        print( print_name)\nclass STRING:   \n    def __init__(self, DataBase : dict, line : int) :",
        "detail": "script.STDIN.LinuxSTDIN.LinuxMain",
        "documentation": {}
    },
    {
        "label": "ascii",
        "kind": 2,
        "importPath": "script.STDIN.LinuxSTDIN.ascii",
        "description": "script.STDIN.LinuxSTDIN.ascii",
        "peekOfCode": "def ascii(char :str ):\n\t#print(char)\n\tif   char == '<=' : return chr(8804)\n\telif char == '>=' : return chr(8805)\n\telif char == '/'  : return chr(247)\n\telif char == '!=' : return chr(8800)\n\telif char == '->' : return chr(8594)\n\telif char == '||' : return chr(9553)\n\telif char == '==' : return chr(9552)*2\n\telse: return char ",
        "detail": "script.STDIN.LinuxSTDIN.ascii",
        "documentation": {}
    },
    {
        "label": "math_ensemble",
        "kind": 2,
        "importPath": "script.STDIN.LinuxSTDIN.ascii",
        "description": "script.STDIN.LinuxSTDIN.ascii",
        "peekOfCode": "def math_ensemble(char: str):\n\tif   char == 'n' : return chr(8469)\n\telif char == 'z' : return chr(8484) \n\telif char == 'r' : return chr(8477)\n\telif char == 'p' : return chr(8473)\n\telif char == 'q' : return chr(8474)\n\telif char == 'h' : return chr(8461)\ndef parenthesis( char : str = '1'):\n\tif   char == '1' : return [chr(i) for i in [9115, 9116, 9117, 9118, 9119, 9120]]\n\telif char == '2' : return [chr(i) for i in [9121, 9122, 9123, 9124, 9125, 9126]]",
        "detail": "script.STDIN.LinuxSTDIN.ascii",
        "documentation": {}
    },
    {
        "label": "parenthesis",
        "kind": 2,
        "importPath": "script.STDIN.LinuxSTDIN.ascii",
        "description": "script.STDIN.LinuxSTDIN.ascii",
        "peekOfCode": "def parenthesis( char : str = '1'):\n\tif   char == '1' : return [chr(i) for i in [9115, 9116, 9117, 9118, 9119, 9120]]\n\telif char == '2' : return [chr(i) for i in [9121, 9122, 9123, 9124, 9125, 9126]]\n\telif char == '3' : return [chr(i) for i in [9127, 9128, 9129, 9131, 9132, 9133]]\ndef dot(char : str ='h'):\n\tif char == 'h' : return chr(8230)\ndef frame(custom : bool = False):\n\tif custom is False:\n\t\tup_l, up_r = chr(9556), chr(9559)\n\t\tdown_l, down_r = chr(9562), chr(9565)",
        "detail": "script.STDIN.LinuxSTDIN.ascii",
        "documentation": {}
    },
    {
        "label": "dot",
        "kind": 2,
        "importPath": "script.STDIN.LinuxSTDIN.ascii",
        "description": "script.STDIN.LinuxSTDIN.ascii",
        "peekOfCode": "def dot(char : str ='h'):\n\tif char == 'h' : return chr(8230)\ndef frame(custom : bool = False):\n\tif custom is False:\n\t\tup_l, up_r = chr(9556), chr(9559)\n\t\tdown_l, down_r = chr(9562), chr(9565)\n\t\tmed1, med2, med3 = chr(9574), chr(9577), chr(9580)\n\t\tver, hor = chr(9553), chr(9552)\n\t\tvl, vr = chr(9568), chr(9571)\n\t\tf = {'ul':up_l, 'ur':up_r, 'dl':down_l, 'dr':down_r, 'm1':med1,'m2':med2, 'm3':med3, 'v':ver, 'h':hor, 'vl':vl, 'vr': vr}",
        "detail": "script.STDIN.LinuxSTDIN.ascii",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 2,
        "importPath": "script.STDIN.LinuxSTDIN.ascii",
        "description": "script.STDIN.LinuxSTDIN.ascii",
        "peekOfCode": "def frame(custom : bool = False):\n\tif custom is False:\n\t\tup_l, up_r = chr(9556), chr(9559)\n\t\tdown_l, down_r = chr(9562), chr(9565)\n\t\tmed1, med2, med3 = chr(9574), chr(9577), chr(9580)\n\t\tver, hor = chr(9553), chr(9552)\n\t\tvl, vr = chr(9568), chr(9571)\n\t\tf = {'ul':up_l, 'ur':up_r, 'dl':down_l, 'dr':down_r, 'm1':med1,'m2':med2, 'm3':med3, 'v':ver, 'h':hor, 'vl':vl, 'vr': vr}\n\telse:\n\t\tup_l, up_r = chr(9487), chr(9491)",
        "detail": "script.STDIN.LinuxSTDIN.ascii",
        "documentation": {}
    },
    {
        "label": "progress_bar",
        "kind": 2,
        "importPath": "script.STDIN.LinuxSTDIN.ascii",
        "description": "script.STDIN.LinuxSTDIN.ascii",
        "peekOfCode": "def progress_bar(style : int = 0, c:str=\"\", r:str=\"\"):\n    if \t\tstyle == 1: return c+chr(10074)+r\n    elif \tstyle == 2: return c+chr(9632)+r",
        "detail": "script.STDIN.LinuxSTDIN.ascii",
        "documentation": {}
    },
    {
        "label": "\t\tf",
        "kind": 5,
        "importPath": "script.STDIN.LinuxSTDIN.ascii",
        "description": "script.STDIN.LinuxSTDIN.ascii",
        "peekOfCode": "\t\tf = {'ul':up_l, 'ur':up_r, 'dl':down_l, 'dr':down_r, 'm1':med1,'m2':med2, 'm3':med3, 'v':ver, 'h':hor, 'vl':vl, 'vr': vr}\n\telse:\n\t\tup_l, up_r = chr(9487), chr(9491)\n\t\tdown_l, down_r = chr(9495), chr(9499)\n\t\tmed1, med2, med3 = chr(9523), chr(9531), chr(9547)\n\t\tver, hor = chr(9475), chr(9473)\n\t\tvl, vr = chr(9507), chr(9515)\n\t\tf = {'ul':up_l, 'ur':up_r, 'dl':down_l, 'dr':down_r, 'm1':med1,'m2':med2, 'm3':med3, 'v':ver, 'h':hor, 'vl':vl, 'vr': vr}\n\treturn f\ndef progress_bar(style : int = 0, c:str=\"\", r:str=\"\"):",
        "detail": "script.STDIN.LinuxSTDIN.ascii",
        "documentation": {}
    },
    {
        "label": "\t\tf",
        "kind": 5,
        "importPath": "script.STDIN.LinuxSTDIN.ascii",
        "description": "script.STDIN.LinuxSTDIN.ascii",
        "peekOfCode": "\t\tf = {'ul':up_l, 'ur':up_r, 'dl':down_l, 'dr':down_r, 'm1':med1,'m2':med2, 'm3':med3, 'v':ver, 'h':hor, 'vl':vl, 'vr': vr}\n\treturn f\ndef progress_bar(style : int = 0, c:str=\"\", r:str=\"\"):\n    if \t\tstyle == 1: return c+chr(10074)+r\n    elif \tstyle == 2: return c+chr(9632)+r",
        "detail": "script.STDIN.LinuxSTDIN.ascii",
        "documentation": {}
    },
    {
        "label": "fg",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class fg:\n    black       = u\"\\u001b[30m\"\n    red         = u\"\\u001b[31m\"\n    green       = u\"\\u001b[32m\"\n    yellow      = u\"\\u001b[33m\"\n    blue        = u\"\\u001b[34m\"\n    magenta     = u\"\\u001b[35m\"\n    cyan        = u\"\\u001b[36m\"\n    white       = u\"\\u001b[37m\"\n    black_L     = u\"\\u001b[30;1m\"",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "bg",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class bg:\n    black       = u\"\\u001b[40m\"\n    red         = u\"\\u001b[41m\"\n    green       = u\"\\u001b[42m\"\n    yellow      = u\"\\u001b[43m\"\n    blue        = u\"\\u001b[44m\"\n    magenta     = u\"\\u001b[45m\"\n    cyan        = u\"\\u001b[46m\"\n    white       = u\"\\u001b[47m\"\n    black_L     = u\"\\u001b[40;1m\"",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class screen:\n    #40 * 25 monochrome\n    s0 = u\"\\u001b[0h\"\n    #40 * 25 color\n    s1 = u\"\\u001b[1h\"\nclass init:\n    reset       = u\"\\u001b[0m\"\n    bold        = u\"\\u001b[1m\"\n    italic      = u\"\\u001b[3m\"\n    underline   = u\"\\u001b[4m\"",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class init:\n    reset       = u\"\\u001b[0m\"\n    bold        = u\"\\u001b[1m\"\n    italic      = u\"\\u001b[3m\"\n    underline   = u\"\\u001b[4m\"\n    blink       = u\"\\u001b[5m\"\n    rapid_blink = u\"\\u001b[6m\"\n    reverse     = u\"\\u001b[7m\"\n    hide        = u\"\\u001b[8m\"\n    double_underline= u\"\\u001b[21m\"",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "scrolled",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class scrolled:\n    def up(n):\n        s = u\"\\u001b[\"+f\"{n}\"+\"S\"\n        return s\n    def down(n):\n        s = u\"\\u001b[\"+f\"{n}\"+\"T\"\n        return s\nclass clear:\n    clear       = u\"\\u001b[2J\"\n    def line( pos : int ):",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "clear",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class clear:\n    clear       = u\"\\u001b[2J\"\n    def line( pos : int ):\n        # 2 = entire line\n        # 1 = from the cursor to start of line\n        # 0 = from the cursor to begenning of line\n        clearline   = u\"\\u001b[\" + f\"{pos}\" + \"K\"\n        return clearline\n    def screen(pos : int ):\n        # 0 = clears from cursor until end of screen,",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "get_cursor_pos",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class get_cursor_pos:\n    pos     = u\"\\u001b[6n\"\n    save    = u\"\\u001b[{s}\"\n    rest    = u\"\\u001b[{u}\"     \nclass move_cursor:\n    move = u\"\\u001b[?12h\"\n    def __init__(self):\n        pass\n    def UP( pos: int ):\n        up          = u\"\\u001b[\" + str( pos ) + \"A\"",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "move_cursor",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class move_cursor:\n    move = u\"\\u001b[?12h\"\n    def __init__(self):\n        pass\n    def UP( pos: int ):\n        up          = u\"\\u001b[\" + str( pos ) + \"A\"\n        return up\n    def DOWN( pos: int ):\n        down        = u\"\\u001b[\" + str( pos ) + \"B\"\n        return down  ",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "cursorPos",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class cursorPos:\n    def to(x:int, y:int):\n        return f\"\\u001b[{y};{x}H\"\nclass line:\n    nextline = u\"\\u001b[1E\"\n    prevline = u\"\\u001b[1F\"\nclass save:\n    save    = u\"\\u001b[s\"\n    restore = u\"\\u001b[u\"\nclass head:",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "line",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class line:\n    nextline = u\"\\u001b[1E\"\n    prevline = u\"\\u001b[1F\"\nclass save:\n    save    = u\"\\u001b[s\"\n    restore = u\"\\u001b[u\"\nclass head:\n    def head( self, sys : str = 'Linux', term : str = 'pegasus' ):\n        block = [\n                '\\n',",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class save:\n    save    = u\"\\u001b[s\"\n    restore = u\"\\u001b[u\"\nclass head:\n    def head( self, sys : str = 'Linux', term : str = 'pegasus' ):\n        block = [\n                '\\n',\n                'Black Mamba programming language -version- 1.0.0. MIT License.',\n                f'[ {sys} version ] [ {term} terminal ] type help( arg ), License() for more informations.',\n                '>> ',",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "head",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class head:\n    def head( self, sys : str = 'Linux', term : str = 'pegasus' ):\n        block = [\n                '\\n',\n                'Black Mamba programming language -version- 1.0.0. MIT License.',\n                f'[ {sys} version ] [ {term} terminal ] type help( arg ), License() for more informations.',\n                '>> ',\n                'written by amiehe-essomba',\n                'email: ibamieheessomba@unistra.fr',\n                '\\n',",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "open_graven",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class open_graven:\n    def __init__(self):\n        self.name = 1\n    def openG(self):\n        self.window = Tk()\n        self.window.title('Main Help')\n        self.window.geometry(\"600x120\")\n        self.window.minsize(600, 120)\n        self.window.maxsize(600, 120)\n        self.main_menu = Menu(self.window, background='ivory', font=('Arila', 8), relief=FLAT)",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "remove_ansi_chars",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class remove_ansi_chars:\n    def chars( self, name : str ):\n        ansi_escape = re.compile(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')\n        return ansi_escape.sub ('', name) \nclass read:\n    def readchar(self):\n        try:\n            fd  = sys.stdin.fileno()\n            ch = ord( sys.stdin.read( 1 ) )\n            return ch",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "read",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class read:\n    def readchar(self):\n        try:\n            fd  = sys.stdin.fileno()\n            ch = ord( sys.stdin.read( 1 ) )\n            return ch\n        except TypeError: pass\nclass string:\n    def __init__(self):\n        pass",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class string:\n    def __init__(self):\n        pass\n    def syntax_highlight( self, name : str, color : str = bg.blue_L  ):\n        self.stripped = name.rstrip()\n        return self.stripped + color + \" \" * ( len( name ) - len( self.stripped ) ) + init.reset\nclass words:\n    def __init__(self, string : str, color : str):\n        self.string     = string\n        self.color      = color",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class words:\n    def __init__(self, string : str, color : str):\n        self.string     = string\n        self.color      = color\n        self.analyse    = control_string.STRING_ANALYSE({}, 1)\n    def alphabetic(self):\n        return list('abcdefghijklmnopqrstuvwxyzTFN')\n    def keywords(self, n:int=0, locked: bool = False, count : dict = {'int' : 0, 'sys' : []}, b_=''):\n        self.newString  = ''\n        self.stringKey  = ''",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "chars",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class chars:\n    def ansi_remove_chars( self, name : str ):\n        ansi_escape = re.compile(r'\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')\n        return ansi_escape.sub ('', name)\nclass timer:\n    def timer():\n        def updateClock():\n            now = datetime.now().strftime('%H:%M:%S')\n            sleep(1)\n            return now",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "timer",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.bm_configure",
        "description": "script.STDIN.LinuxSTDIN.bm_configure",
        "peekOfCode": "class timer:\n    def timer():\n        def updateClock():\n            now = datetime.now().strftime('%H:%M:%S')\n            sleep(1)\n            return now\n        while True: \n            stdout.write( move_cursor.LEFT( 1000 ) )\n            stdout.write( updateClock() )\n            stdout.flush()",
        "detail": "script.STDIN.LinuxSTDIN.bm_configure",
        "documentation": {}
    },
    {
        "label": "STRING_ANALYSE",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.control_string",
        "description": "script.STDIN.LinuxSTDIN.control_string",
        "peekOfCode": "class STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.function_non_accepted  = [ 'True', 'False', 'None', 'or', 'and', 'only', 'class', 'def', 'unless',  'until',\n                                        'with', 'open', 'not', 'is', 'in', 'if', 'for', 'while', 'switch', 'end', 'next',\n                                        'global', 'try', 'except', 'else', 'elif', 'return', 'pass', 'break',     'case',\n                                        'function', 'finally', 'load', 'module', 'from', 'exit', 'continue',   'default',\n                                        'lambda', 'raise', 'assert', 'begin', 'delete', 'exit', 'stop', 'print', '_int_',\n                                        '_float_', '_string_', '_complex_', '_list_', '_dictionary_', '_tuple_',",
        "detail": "script.STDIN.LinuxSTDIN.control_string",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.STDIN.LinuxSTDIN.control_string",
        "description": "script.STDIN.LinuxSTDIN.control_string",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self._str_      = '{}type {}help( {}var_name{} ) {}for more informations. '.format(we, te, ke, te, we)\n    def ERROR0(self, string: str):\n        error = '{}line: {}{}'.format(we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >> '.format(ke, 'SyntaxError', ae, string) + error\n        return self.error\n    def ERROR1(self, string: str):\n        error = '{}<< {} >> {}was not accepted as a character, {}line: {}{}.\\n{}'.format(ae, string, ne, we, ke,",
        "detail": "script.STDIN.LinuxSTDIN.control_string",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.STDIN.LinuxSTDIN.control_string",
        "description": "script.STDIN.LinuxSTDIN.control_string",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):",
        "detail": "script.STDIN.LinuxSTDIN.control_string",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.STDIN.LinuxSTDIN.control_string",
        "description": "script.STDIN.LinuxSTDIN.control_string",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base",
        "detail": "script.STDIN.LinuxSTDIN.control_string",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.STDIN.LinuxSTDIN.control_string",
        "description": "script.STDIN.LinuxSTDIN.control_string",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line",
        "detail": "script.STDIN.LinuxSTDIN.control_string",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.STDIN.LinuxSTDIN.control_string",
        "description": "script.STDIN.LinuxSTDIN.control_string",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.function_non_accepted  = [ 'True', 'False', 'None', 'or', 'and', 'only', 'class', 'def', 'unless',  'until',",
        "detail": "script.STDIN.LinuxSTDIN.control_string",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.STDIN.LinuxSTDIN.control_string",
        "description": "script.STDIN.LinuxSTDIN.control_string",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.function_non_accepted  = [ 'True', 'False', 'None', 'or', 'and', 'only', 'class', 'def', 'unless',  'until',\n                                        'with', 'open', 'not', 'is', 'in', 'if', 'for', 'while', 'switch', 'end', 'next',",
        "detail": "script.STDIN.LinuxSTDIN.control_string",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.STDIN.LinuxSTDIN.control_string",
        "description": "script.STDIN.LinuxSTDIN.control_string",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.function_non_accepted  = [ 'True', 'False', 'None', 'or', 'and', 'only', 'class', 'def', 'unless',  'until',\n                                        'with', 'open', 'not', 'is', 'in', 'if', 'for', 'while', 'switch', 'end', 'next',\n                                        'global', 'try', 'except', 'else', 'elif', 'return', 'pass', 'break',     'case',",
        "detail": "script.STDIN.LinuxSTDIN.control_string",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.STDIN.LinuxSTDIN.control_string",
        "description": "script.STDIN.LinuxSTDIN.control_string",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.function_non_accepted  = [ 'True', 'False', 'None', 'or', 'and', 'only', 'class', 'def', 'unless',  'until',\n                                        'with', 'open', 'not', 'is', 'in', 'if', 'for', 'while', 'switch', 'end', 'next',\n                                        'global', 'try', 'except', 'else', 'elif', 'return', 'pass', 'break',     'case',\n                                        'function', 'finally', 'load', 'module', 'from', 'exit', 'continue',   'default',",
        "detail": "script.STDIN.LinuxSTDIN.control_string",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.STDIN.LinuxSTDIN.control_string",
        "description": "script.STDIN.LinuxSTDIN.control_string",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.function_non_accepted  = [ 'True', 'False', 'None', 'or', 'and', 'only', 'class', 'def', 'unless',  'until',\n                                        'with', 'open', 'not', 'is', 'in', 'if', 'for', 'while', 'switch', 'end', 'next',\n                                        'global', 'try', 'except', 'else', 'elif', 'return', 'pass', 'break',     'case',\n                                        'function', 'finally', 'load', 'module', 'from', 'exit', 'continue',   'default',\n                                        'lambda', 'raise', 'assert', 'begin', 'delete', 'exit', 'stop', 'print', '_int_',",
        "detail": "script.STDIN.LinuxSTDIN.control_string",
        "documentation": {}
    },
    {
        "label": "readchar",
        "kind": 2,
        "importPath": "script.STDIN.LinuxSTDIN.readchar",
        "description": "script.STDIN.LinuxSTDIN.readchar",
        "peekOfCode": "def readchar():\n    fd              = sys.stdin.fileno()\n    old_settings    = termios.tcgetattr( fd )\n    try:\n        tty.setraw(sys.stdin)\n        ch = ord( sys.stdin.read(1) )\n    finally: termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)\n    return ch",
        "detail": "script.STDIN.LinuxSTDIN.readchar",
        "documentation": {}
    },
    {
        "label": "STDIN",
        "kind": 6,
        "importPath": "script.STDIN.WinSTDIN.if_stdin",
        "description": "script.STDIN.WinSTDIN.if_stdin",
        "peekOfCode": "class STDIN:\n\tdef __init__(self, data_base:dict,line:int):\n\t\tself.data_base          = data_base\n\t\tself.line               = line\n\t\tself.analyse            = control_string.STRING_ANALYSE(self.data_base, self.line)\t\n\tdef ENCODING( self, string : str):\n\t\tn = 0 # using for counting \n\t\tfor s in string:\n\t\t\tif s == '\\t':  n +=1 \n\t\t\telse: break",
        "detail": "script.STDIN.WinSTDIN.if_stdin",
        "documentation": {}
    },
    {
        "label": "\t\tn",
        "kind": 5,
        "importPath": "script.STDIN.WinSTDIN.if_stdin",
        "description": "script.STDIN.WinSTDIN.if_stdin",
        "peekOfCode": "\t\tn = 0 # using for counting \n\t\tfor s in string:\n\t\t\tif s == '\\t':  n +=1 \n\t\t\telse: break\n\t\treturn n\n\tdef STRUCT(self, \n\t\ttabulation  : int    = 1,            # tabulation \n\t\tLIST        : list   = [],           # list of values \n\t\t_class_     : bool   = False\n\t\t):",
        "detail": "script.STDIN.WinSTDIN.if_stdin",
        "documentation": {}
    },
    {
        "label": "\t\tself.newList",
        "kind": 5,
        "importPath": "script.STDIN.WinSTDIN.if_stdin",
        "description": "script.STDIN.WinSTDIN.if_stdin",
        "peekOfCode": "\t\tself.newList = []\n\t\tif LIST:\n\t\t\tfor i, _str_ in enumerate(LIST):\n\t\t\t\tself.n = STDIN( self.data_base, self.line).ENCODING( _str_ ) \n\t\t\t\tif self.n >= tabulation : self.newList.append( _str_ ) \n\t\t\t\telse: break\n\t\telse: pass \n\t\treturn self.newList",
        "detail": "script.STDIN.WinSTDIN.if_stdin",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.n",
        "kind": 5,
        "importPath": "script.STDIN.WinSTDIN.if_stdin",
        "description": "script.STDIN.WinSTDIN.if_stdin",
        "peekOfCode": "\t\t\t\tself.n = STDIN( self.data_base, self.line).ENCODING( _str_ ) \n\t\t\t\tif self.n >= tabulation : self.newList.append( _str_ ) \n\t\t\t\telse: break\n\t\telse: pass \n\t\treturn self.newList",
        "detail": "script.STDIN.WinSTDIN.if_stdin",
        "documentation": {}
    },
    {
        "label": "STDIN",
        "kind": 6,
        "importPath": "script.STDIN.WinSTDIN.stdin",
        "description": "script.STDIN.WinSTDIN.stdin",
        "peekOfCode": "class STDIN:\n    def __init__(self, \n                data_base   :dict, \n                line        :int\n                ):\n        self.data_base          = data_base\n        self.line               = line\n        self.analyse            = control_string.STRING_ANALYSE(self.data_base, self.line)\n    def STDIN(self, \n            color   :dict, ",
        "detail": "script.STDIN.WinSTDIN.stdin",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.TRANSPILER.TUPLE.error",
        "description": "script.TRANSPILER.TUPLE.error",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line:int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "script.TRANSPILER.TUPLE.error",
        "documentation": {}
    },
    {
        "label": "TUPLE",
        "kind": 6,
        "importPath": "script.TRANSPILER.TUPLE.tuples",
        "description": "script.TRANSPILER.TUPLE.tuples",
        "peekOfCode": "class TUPLE:\n    def __init__(self, master: dict, data_base: dict, line: int):\n        self.line                       = line\n        self.master                     = master\n        self.data_base                  = data_base\n        self.control                    = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.selection                  = particular_str_selection\n        self.lexer                      = main_lexer\n        self.numeric                    = numerical_value\n        self.affectation                = check_if_affectation",
        "detail": "script.TRANSPILER.TUPLE.tuples",
        "documentation": {}
    },
    {
        "label": "STRING_ANALYSE",
        "kind": 6,
        "importPath": "script.control_string",
        "description": "script.control_string",
        "peekOfCode": "class STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.function_non_accepted  = [ 'True', 'False', 'None', 'or', 'and', 'only', 'class', 'def', 'unless',  'until',\n                                        'with', 'open', 'not', 'is', 'in', 'if', 'for', 'while', 'switch', 'end', 'next',\n                                        'global', 'try', 'except', 'else', 'elif', 'return', 'pass', 'break',     'case',\n                                        'function', 'finally', 'load', 'module', 'from', 'exit', 'continue',   'default',\n                                        'lambda', 'raise', 'assert', 'begin', 'delete', 'exit', 'stop', 'print', '_int_',\n                                        '_float_', '_string_', '_complex_', '_list_', '_dictionary_', '_tuple_',",
        "detail": "script.control_string",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "script.control_string",
        "description": "script.control_string",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self._str_      = '{}type {}help( {}var_name{} ) {}for more informations. '.format(we, te, ke, te, we)\n    def ERROR0(self, string: str):\n        error = '{}line: {}{}'.format(we, ke, self.line)\n        self.error = '{}{} : invalid syntax in {}<< {} >> '.format(ke, 'SyntaxError', ae, string) + error\n        return self.error\n    def ERROR1(self, string: str):\n        error = '{}<< {} >> {}was not accepted as a character, {}line: {}{}.\\n{}'.format(ae, string, ne, we, ke,",
        "detail": "script.control_string",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "script.control_string",
        "description": "script.control_string",
        "peekOfCode": "ne = Fore.LIGHTRED_EX\nie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):",
        "detail": "script.control_string",
        "documentation": {}
    },
    {
        "label": "ie",
        "kind": 5,
        "importPath": "script.control_string",
        "description": "script.control_string",
        "peekOfCode": "ie = Fore.LIGHTBLUE_EX\nae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base",
        "detail": "script.control_string",
        "documentation": {}
    },
    {
        "label": "ae",
        "kind": 5,
        "importPath": "script.control_string",
        "description": "script.control_string",
        "peekOfCode": "ae = Fore.CYAN\nte = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line",
        "detail": "script.control_string",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "script.control_string",
        "description": "script.control_string",
        "peekOfCode": "te = Fore.MAGENTA\nke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.function_non_accepted  = [ 'True', 'False', 'None', 'or', 'and', 'only', 'class', 'def', 'unless',  'until',",
        "detail": "script.control_string",
        "documentation": {}
    },
    {
        "label": "ke",
        "kind": 5,
        "importPath": "script.control_string",
        "description": "script.control_string",
        "peekOfCode": "ke = Fore.LIGHTYELLOW_EX\nve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.function_non_accepted  = [ 'True', 'False', 'None', 'or', 'and', 'only', 'class', 'def', 'unless',  'until',\n                                        'with', 'open', 'not', 'is', 'in', 'if', 'for', 'while', 'switch', 'end', 'next',",
        "detail": "script.control_string",
        "documentation": {}
    },
    {
        "label": "ve",
        "kind": 5,
        "importPath": "script.control_string",
        "description": "script.control_string",
        "peekOfCode": "ve = Fore.LIGHTGREEN_EX\nse = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.function_non_accepted  = [ 'True', 'False', 'None', 'or', 'and', 'only', 'class', 'def', 'unless',  'until',\n                                        'with', 'open', 'not', 'is', 'in', 'if', 'for', 'while', 'switch', 'end', 'next',\n                                        'global', 'try', 'except', 'else', 'elif', 'return', 'pass', 'break',     'case',",
        "detail": "script.control_string",
        "documentation": {}
    },
    {
        "label": "se",
        "kind": 5,
        "importPath": "script.control_string",
        "description": "script.control_string",
        "peekOfCode": "se = Fore.YELLOW\nwe = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.function_non_accepted  = [ 'True', 'False', 'None', 'or', 'and', 'only', 'class', 'def', 'unless',  'until',\n                                        'with', 'open', 'not', 'is', 'in', 'if', 'for', 'while', 'switch', 'end', 'next',\n                                        'global', 'try', 'except', 'else', 'elif', 'return', 'pass', 'break',     'case',\n                                        'function', 'finally', 'load', 'module', 'from', 'exit', 'continue',   'default',",
        "detail": "script.control_string",
        "documentation": {}
    },
    {
        "label": "we",
        "kind": 5,
        "importPath": "script.control_string",
        "description": "script.control_string",
        "peekOfCode": "we = Fore.LIGHTWHITE_EX\nclass STRING_ANALYSE(object):\n    def __init__(self, data_base: dict, line: int):\n        self.data_base              = data_base\n        self.line                   = line\n        self.function_non_accepted  = [ 'True', 'False', 'None', 'or', 'and', 'only', 'class', 'def', 'unless',  'until',\n                                        'with', 'open', 'not', 'is', 'in', 'if', 'for', 'while', 'switch', 'end', 'next',\n                                        'global', 'try', 'except', 'else', 'elif', 'return', 'pass', 'break',     'case',\n                                        'function', 'finally', 'load', 'module', 'from', 'exit', 'continue',   'default',\n                                        'lambda', 'raise', 'assert', 'begin', 'delete', 'exit', 'stop', 'print', '_int_',",
        "detail": "script.control_string",
        "documentation": {}
    },
    {
        "label": "STRING",
        "kind": 6,
        "importPath": "src.classes.Chars.Char",
        "description": "src.classes.Chars.Char",
        "peekOfCode": "class STRING:\n    def __init__(self, DataBase: dict, line:int, master: str, function, FunctionInfo : list ):\n        self.master         = master\n        self.function       = function\n        self.FunctionInfo   = FunctionInfo[ 0 ]\n        self.line           = line\n        self.DataBase       = DataBase\n    def STR( self , mainName: str , mainString : str = ''):\n        self.error          = None \n        self._return_       = ''",
        "detail": "src.classes.Chars.Char",
        "documentation": {}
    },
    {
        "label": "STRING",
        "kind": 6,
        "importPath": "src.classes.Chars.Global",
        "description": "src.classes.Chars.Global",
        "peekOfCode": "class STRING:\n    def __init__(self, DataBase: dict, line:int, master: str, function, FunctionInfo : list ):\n        self.master         = master\n        self.function       = function\n        self.FunctionInfo   = FunctionInfo[ 0 ]\n        self.line           = line\n        self.DataBase       = DataBase\n        self.lexer          = main_lexer\n        self.selection      = particular_str_selection\n        self.numeric        = numerical_value",
        "detail": "src.classes.Chars.Global",
        "documentation": {}
    },
    {
        "label": "STRING",
        "kind": 6,
        "importPath": "src.classes.Chars.Join",
        "description": "src.classes.Chars.Join",
        "peekOfCode": "class STRING:\n    def __init__(self, DataBase: dict, line:int, master: str, function, FunctionInfo : list ):\n        self.master         = master\n        self.function       = function\n        self.FunctionInfo   = FunctionInfo[ 0 ]\n        self.line           = line\n        self.DataBase       = DataBase\n        self.lexer          = main_lexer\n        self.selection      = particular_str_selection\n        self.numeric        = numerical_value",
        "detail": "src.classes.Chars.Join",
        "documentation": {}
    },
    {
        "label": "STRING",
        "kind": 6,
        "importPath": "src.classes.Chars.Replace",
        "description": "src.classes.Chars.Replace",
        "peekOfCode": "class STRING:\n    def __init__(self, DataBase: dict, line:int, master: str, function, FunctionInfo : list ):\n        self.master         = master\n        self.function       = function\n        self.FunctionInfo   = FunctionInfo[ 0 ]\n        self.line           = line\n        self.DataBase       = DataBase\n        self.lexer          = main_lexer\n        self.selection      = particular_str_selection\n        self.numeric        = numerical_value",
        "detail": "src.classes.Chars.Replace",
        "documentation": {}
    },
    {
        "label": "STRING",
        "kind": 6,
        "importPath": "src.classes.Chars.Split",
        "description": "src.classes.Chars.Split",
        "peekOfCode": "class STRING:\n    def __init__(self, DataBase: dict, line:int, master: str, function, FunctionInfo : list ):\n        self.master         = master\n        self.function       = function\n        self.FunctionInfo   = FunctionInfo[ 0 ]\n        self.line           = line\n        self.DataBase       = DataBase\n        self.lexer          = main_lexer\n        self.selection      = particular_str_selection\n        self.numeric        = numerical_value",
        "detail": "src.classes.Chars.Split",
        "documentation": {}
    },
    {
        "label": "Float",
        "kind": 6,
        "importPath": "src.classes.Cplx.Float",
        "description": "src.classes.Cplx.Float",
        "peekOfCode": "class Float:\n    def __init__(self, DataBase: dict, line:int, master: str, function: any, FunctionInfo : list ):\n        self.master         = master\n        self.function       = function\n        self.FunctionInfo   = FunctionInfo[ 0 ]\n        self.line           = line\n        self.DataBase       = DataBase\n        self.lexer          = main_lexer\n        self.selection      = particular_str_selection\n        self.numeric        = numerical_value",
        "detail": "src.classes.Cplx.Float",
        "documentation": {}
    },
    {
        "label": "CPLX",
        "kind": 6,
        "importPath": "src.classes.Cplx.cplx",
        "description": "src.classes.Cplx.cplx",
        "peekOfCode": "class CPLX:\n    def __init__(self, DataBase: dict, line:int, master: str, function: any, FunctionInfo : list ):\n        self.master         = master\n        self.function       = function\n        self.FunctionInfo   = FunctionInfo[ 0 ]\n        self.line           = line\n        self.DataBase       = DataBase\n    def CPLX( self ):\n        self.error          = None \n        self._return_       = ''",
        "detail": "src.classes.Cplx.cplx",
        "documentation": {}
    },
    {
        "label": "LIST",
        "kind": 6,
        "importPath": "src.classes.Lists.Lists",
        "description": "src.classes.Lists.Lists",
        "peekOfCode": "class LIST:\n    def __init__(self, \n            DataBase    : dict, \n            line        : int, \n            master      : str, \n            function    : any, \n            FunctionInfo: list \n            ):\n        self.master         = master\n        self.function       = function",
        "detail": "src.classes.Lists.Lists",
        "documentation": {}
    },
    {
        "label": "LIST",
        "kind": 6,
        "importPath": "src.classes.Lists.inserting",
        "description": "src.classes.Lists.inserting",
        "peekOfCode": "class LIST:\n    def __init__(self, \n                DataBase    : dict, \n                line        : int, \n                master      : str, \n                function    : any, \n                FunctionInfo: list \n                ):\n        self.master         = master\n        self.function       = function",
        "detail": "src.classes.Lists.inserting",
        "documentation": {}
    },
    {
        "label": "LIST",
        "kind": 6,
        "importPath": "src.classes.Lists.random_init",
        "description": "src.classes.Lists.random_init",
        "peekOfCode": "class LIST:\n    def __init__(self, \n                DataBase    : dict, \n                line        : int, \n                master      : str, \n                function    : any, \n                FunctionInfo: list \n                ):\n        self.master         = master\n        self.function       = function",
        "detail": "src.classes.Lists.random_init",
        "documentation": {}
    },
    {
        "label": "LIST",
        "kind": 6,
        "importPath": "src.classes.Lists.sorting",
        "description": "src.classes.Lists.sorting",
        "peekOfCode": "class LIST:\n    def __init__(self, \n                DataBase    : dict, \n                line        : int, \n                master      : str, \n                function    : any, \n                FunctionInfo: list \n                ):\n        self.master         = master\n        self.function       = function",
        "detail": "src.classes.Lists.sorting",
        "documentation": {}
    },
    {
        "label": "TO",
        "kind": 6,
        "importPath": "src.classes.Lists.to_array",
        "description": "src.classes.Lists.to_array",
        "peekOfCode": "class TO:\n    def __init__(self, DataBase: dict, line:int, master: str, function: str, FunctionInfo : list ):\n        self.master         = master\n        self.function       = function\n        self.FunctionInfo   = FunctionInfo[ 0 ]\n        self.line           = line\n        self.DataBase       = DataBase\n        self.lexer          = main_lexer\n        self.selection      = particular_str_selection\n        self.numeric        = numerical_value",
        "detail": "src.classes.Lists.to_array",
        "documentation": {}
    },
    {
        "label": "RANGE",
        "kind": 6,
        "importPath": "src.classes.Range.Range",
        "description": "src.classes.Range.Range",
        "peekOfCode": "class RANGE:\n    def __init__(self, \n            DataBase    : dict, \n            line        : int, \n            master      : str, \n            function    : any, \n            FunctionInfo: list \n            ):\n        self.master         = master\n        self.function       = function",
        "detail": "src.classes.Range.Range",
        "documentation": {}
    },
    {
        "label": "TUPLE",
        "kind": 6,
        "importPath": "src.classes.Tuples.Tuples",
        "description": "src.classes.Tuples.Tuples",
        "peekOfCode": "class TUPLE:\n    def __init__(self, \n                DataBase    : dict, \n                line        : int, \n                master      : str, \n                function    : any, \n                FunctionInfo: list \n                ):\n        self.master         = master\n        self.function       = function",
        "detail": "src.classes.Tuples.Tuples",
        "documentation": {}
    },
    {
        "label": "DICTIONARY",
        "kind": 6,
        "importPath": "src.classes.Unions.union",
        "description": "src.classes.Unions.union",
        "peekOfCode": "class DICTIONARY:\n    def __init__(self, DataBase: dict, line:int, master: str, function, FunctionInfo : list ):\n        self.master         = master\n        self.function       = function\n        self.FunctionInfo   = FunctionInfo[ 0 ]\n        self.line           = line\n        self.DataBase       = DataBase\n        self.lexer          = main_lexer\n        self.selection      = particular_str_selection\n        self.numeric        = numerical_value",
        "detail": "src.classes.Unions.union",
        "documentation": {}
    },
    {
        "label": "DATA",
        "kind": 6,
        "importPath": "src.classes.frame.frame",
        "description": "src.classes.frame.frame",
        "peekOfCode": "class DATA:\n    def __init__(self, DataBase: dict, line:int, master: str, function: str, FunctionInfo : list ):\n        self.master         = master\n        self.function       = function\n        self.FunctionInfo   = FunctionInfo[ 0 ]\n        self.line           = line\n        self.DataBase       = DataBase\n        self.lexer          = main_lexer\n        self.selection      = particular_str_selection\n        self.numeric        = numerical_value",
        "detail": "src.classes.frame.frame",
        "documentation": {}
    },
    {
        "label": "arg",
        "kind": 6,
        "importPath": "src.classes.matrix.arguments",
        "description": "src.classes.matrix.arguments",
        "peekOfCode": "class arg:\n    def __init__(self, func_name : str = \"std\") :\n        self.func_name = func_name \n    def arguments(self):\n        name  = ['reverse', 'axis' ]\n        name2 = ['numeric','reverse', 'axis']\n        name3 = ['max_float', 'reverse', 'axis']\n        if    self.func_name in [\"quantile\"]: return name2\n        elif  self.func_name in ['round']   : return name3 \n        else: return name",
        "detail": "src.classes.matrix.arguments",
        "documentation": {}
    },
    {
        "label": "Array",
        "kind": 2,
        "importPath": "src.classes.matrix.checking_2D",
        "description": "src.classes.matrix.checking_2D",
        "peekOfCode": "def Array(master, line=1):\n    try:\n        if master.any(): final_value = atl.ndarray(list(master), line).List() \n        else: self.final_value =  []\n    except DeprecationWarning: \n        final_value = atl.ndarray(list(master), line).List()\n    except ValueError : raise ValueError\n    except IndexError: raise IndexError\n    except TypeError : raise TypeError\n    try:",
        "detail": "src.classes.matrix.checking_2D",
        "documentation": {}
    },
    {
        "label": "reverse",
        "kind": 2,
        "importPath": "src.classes.matrix.checking_2D",
        "description": "src.classes.matrix.checking_2D",
        "peekOfCode": "def reverse(master, line=1):\n    new_matrix = []\n    error  =None\n    if master:\n        if master[3] is False: new_matrix = master[0].copy()\n        else:\n            for i in range(master[2]):\n                ss = []\n                for j in range(master[1]):\n                    ss.append(master[0][j][i])",
        "detail": "src.classes.matrix.checking_2D",
        "documentation": {}
    },
    {
        "label": "MATRIX_2D",
        "kind": 6,
        "importPath": "src.classes.matrix.matrix_2D",
        "description": "src.classes.matrix.matrix_2D",
        "peekOfCode": "class MATRIX_2D:\n    def __init__(self, DataBase: dict, line:int, master: str, function: str, FunctionInfo : list ):\n        self.master         = master\n        self.function       = function\n        self.FunctionInfo   = FunctionInfo[ 0 ]\n        self.line           = line\n        self.DataBase       = DataBase\n        self.lexer          = main_lexer\n        self.selection      = particular_str_selection\n        self.numeric        = numerical_value",
        "detail": "src.classes.matrix.matrix_2D",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_CLASS",
        "kind": 6,
        "importPath": "src.classes.windows.externalClass",
        "description": "src.classes.windows.externalClass",
        "peekOfCode": "class EXTERNAL_CLASS:\n    def __init__(self, \n                master      : str, \n                data_base   : dict, \n                line        : int, \n                extra       : dict,\n                history     : list,\n                store_value : list,\n                space       : int,\n                ):",
        "detail": "src.classes.windows.externalClass",
        "documentation": {}
    },
    {
        "label": "INTERNAL_CLASS",
        "kind": 6,
        "importPath": "src.classes.windows.internalClass",
        "description": "src.classes.windows.internalClass",
        "peekOfCode": "class INTERNAL_CLASS:\n    def __init__(self, \n                master      : str, \n                data_base   : dict, \n                line        : int, \n                extra       : dict,\n                history     : list,\n                store_value : list,\n                space       : int,\n                ):",
        "detail": "src.classes.windows.internalClass",
        "documentation": {}
    },
    {
        "label": "INTERNAL_CLASS_WINDOWS",
        "kind": 6,
        "importPath": "src.classes.windows.subWindowsClass",
        "description": "src.classes.windows.subWindowsClass",
        "peekOfCode": "class INTERNAL_CLASS_WINDOWS:\n    def __init__(self,\n        data_base   : dict, \n        line        : int,\n        extra       : dict,\n        term        : str \n        ):\n        # current line \n        self.line               = line\n        # main data base",
        "detail": "src.classes.windows.subWindowsClass",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_CLASS_WINDOWS",
        "kind": 6,
        "importPath": "src.classes.windows.windowsClass",
        "description": "src.classes.windows.windowsClass",
        "peekOfCode": "class EXTERNAL_CLASS_WINDOWS:\n    def __init__(self,\n        data_base   : dict, \n        line        : int,\n        extra       : dict,\n        term        : str \n        ):\n        # current line \n        self.line               = line\n        # main data base",
        "detail": "src.classes.windows.windowsClass",
        "documentation": {}
    },
    {
        "label": "CHECK",
        "kind": 6,
        "importPath": "src.classes.check_char",
        "description": "src.classes.check_char",
        "peekOfCode": "class CHECK:\n    def __init__(self, \n                master      : str, \n                name        : str, \n                DataBase    : dict, \n                line        : int\n                ):\n        self.master             = master \n        self.line               = line\n        self.DataBase           = DataBase",
        "detail": "src.classes.check_char",
        "documentation": {}
    },
    {
        "label": "DB",
        "kind": 6,
        "importPath": "src.classes.db",
        "description": "src.classes.db",
        "peekOfCode": "class DB:\n    def_data_base   = {\n        'variables'         : {\n            'vars'          : [],\n            'values'        : []\n        },\n        'global_vars'       : {\n            'vars'          : [],\n            'values'        : []\n        },",
        "detail": "src.classes.db",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "src.classes.error",
        "description": "src.classes.error",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "src.classes.error",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "src.classes.errorClass",
        "description": "src.classes.errorClass",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line           = line\n        self.cyan           = bm.fg.cyan_L\n        self.red            = bm.fg.red_L\n        self.green          = bm.fg.green_L\n        self.yellow         = bm.fg.yellow_L\n        self.magenta        = bm.fg.magenta_M\n        self.white          = bm.fg.white_L\n        self.blue           = bm.fg.blue_L",
        "detail": "src.classes.errorClass",
        "documentation": {}
    },
    {
        "label": "INHERITANCE",
        "kind": 6,
        "importPath": "src.classes.inheritance",
        "description": "src.classes.inheritance",
        "peekOfCode": "class INHERITANCE:\n    def __init__(self, DataBase: dict, line: int, inheritanceClass: str):\n        self.DataBase               = DataBase \n        self.line                   = line \n        self.inheritanceClass       = inheritanceClass\n        self.classNames             = self.DataBase[ 'class_names' ]\n        self.classes                = self.DataBase[ 'classes' ]\n    def CLASSES( self, mainString: str ):\n        self.error                  = None \n        self.variables              = None ",
        "detail": "src.classes.inheritance",
        "documentation": {}
    },
    {
        "label": "LOAD",
        "kind": 6,
        "importPath": "src.classes.loading",
        "description": "src.classes.loading",
        "peekOfCode": "class LOAD:\n    def __init__(self, moduleLoadNames : list, className: str):\n        self.moduleLoadNames        = moduleLoadNames \n        self.className              = className\n    def LOAD(self, typ : str = 'func_names'):\n        self.key        = False \n        self.id1        = 0\n        self.id2        = 0\n        for i, mod in enumerate(self.moduleLoadNames):\n            if self.key is False: pass ",
        "detail": "src.classes.loading",
        "documentation": {}
    },
    {
        "label": "READFILE",
        "kind": 6,
        "importPath": "src.classes.readfile",
        "description": "src.classes.readfile",
        "peekOfCode": "class READFILE:\n    def __init__(self, DataBase: dict, line:int, master: str, function: any, FunctionInfo : list ):\n        self.master         = master\n        self.function       = function\n        self.FunctionInfo   = FunctionInfo[ 0 ]\n        self.line           = line\n        self.DataBase       = DataBase\n        self.lexer          = main_lexer\n        self.selection      = particular_str_selection\n        self.numeric        = numerical_value",
        "detail": "src.classes.readfile",
        "documentation": {}
    },
    {
        "label": "RUN_FUNCTION",
        "kind": 6,
        "importPath": "src.classes.run_func",
        "description": "src.classes.run_func",
        "peekOfCode": "class RUN_FUNCTION:\n    def __init__(self, \n        DataBase        : dict, \n        line            : int, \n        new_data_base   : dict, \n        _new_data_base_ : dict \n        ) :\n        self.DataBase           = DataBase\n        self.line               = line \n        self.new_data_base      = new_data_base",
        "detail": "src.classes.run_func",
        "documentation": {}
    },
    {
        "label": "UPDATING",
        "kind": 6,
        "importPath": "src.classes.updatingClasses",
        "description": "src.classes.updatingClasses",
        "peekOfCode": "class UPDATING:\n    def __init__(self, data_base : int , line: int, extra : dict):\n        self.data_base          = data_base\n        self.line               = line\n        self.extra_class_data   = extra\n    def UPDATE_FUNCTION_BEFORE(self,  lexer : dict):\n        self.error              = None\n        self.key_init           = False\n        self.functions          = lexer[ 'def' ]\n        self.type               = self.functions[ 'type' ]",
        "detail": "src.classes.updatingClasses",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_DEF",
        "kind": 6,
        "importPath": "src.functions.windows.externalDef",
        "description": "src.functions.windows.externalDef",
        "peekOfCode": "class EXTERNAL_DEF:\n    def __init__(self, \n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int,    \n            ):\n        # main string",
        "detail": "src.functions.windows.externalDef",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_DEF_WINDOWS",
        "kind": 6,
        "importPath": "src.functions.windows.functions",
        "description": "src.functions.windows.functions",
        "peekOfCode": "class EXTERNAL_DEF_WINDOWS:\n    def __init__(self, \n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.master             = master\n        self.line               = line\n        self.data_base          = data_base\n    def TERMINAL( self, ",
        "detail": "src.functions.windows.functions",
        "documentation": {}
    },
    {
        "label": "INTERNAL_DEF",
        "kind": 6,
        "importPath": "src.functions.windows.internalDef",
        "description": "src.functions.windows.internalDef",
        "peekOfCode": "class INTERNAL_DEF:\n    def __init__(self, \n            master      : str,              \n            data_base   : dict,             \n            line        : int ,\n            history     : list,\n            store_value : list,\n            space       : int\n            ):\n        # main string",
        "detail": "src.functions.windows.internalDef",
        "documentation": {}
    },
    {
        "label": "INTERNAL_DEF_WINDOWS",
        "kind": 6,
        "importPath": "src.functions.windows.subWindows",
        "description": "src.functions.windows.subWindows",
        "peekOfCode": "class INTERNAL_DEF_WINDOWS:\n    def __init__(self, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line               = line\n        self.data_base          = data_base\n        #contriling string\n        self.analyse            = control_string.STRING_ANALYSE(self.data_base, self.line)\n    def TERMINAL( self, ",
        "detail": "src.functions.windows.subWindows",
        "documentation": {}
    },
    {
        "label": "INTERNAL_DEF_WINDOWS",
        "kind": 6,
        "importPath": "src.functions.windows.subWindowsDef",
        "description": "src.functions.windows.subWindowsDef",
        "peekOfCode": "class INTERNAL_DEF_WINDOWS:\n    def __init__(self,\n        data_base: dict,\n        line: int,\n        term: str\n        ):\n        # current line\n        self.line = line\n        # main data base\n        self.data_base = data_base",
        "detail": "src.functions.windows.subWindowsDef",
        "documentation": {}
    },
    {
        "label": "UPDATING",
        "kind": 6,
        "importPath": "src.functions.windows.updatingDef",
        "description": "src.functions.windows.updatingDef",
        "peekOfCode": "class UPDATING:\n    def __init__(self, data_base : dict):\n        # main data base\n        self.data_base      = data_base  \n    def UPDATE_FUNCTION(self, history_of_data: list, subFunction: dict):\n        # when creating a function the name of this function is stored in \n        # the main data base in the list data_base[ 'func_names' ]\n        self.function_names     = self.data_base[ 'func_names' ]\n        # by the same time it name is stored in data_base[ 'current_func' ]\n        self.current_function   = self.data_base[ 'current_func' ]",
        "detail": "src.functions.windows.updatingDef",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_DEF_WINDOWS",
        "kind": 6,
        "importPath": "src.functions.windows.windowsDef",
        "description": "src.functions.windows.windowsDef",
        "peekOfCode": "class EXTERNAL_DEF_WINDOWS:\n    def __init__(self,\n        data_base   : dict,\n        line        : int,\n        term        : str\n        ):\n        # current line\n        self.line = line\n        # main data base\n        self.data_base = data_base",
        "detail": "src.functions.windows.windowsDef",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "src.functions.error",
        "description": "src.functions.error",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "src.functions.error",
        "documentation": {}
    },
    {
        "label": "FUNCTION",
        "kind": 6,
        "importPath": "src.functions.function",
        "description": "src.functions.function",
        "peekOfCode": "class FUNCTION:\n    def __init__(self, \n        master          : list, \n        data_base       : dict, \n        line            : int\n        ):\n        self.master             = master[ 0 ]\n        self.line               = line\n        self.data_base          = data_base\n        self.global_vars        = self.data_base[ 'global_vars' ]",
        "detail": "src.functions.function",
        "documentation": {}
    },
    {
        "label": "LOAD",
        "kind": 6,
        "importPath": "src.functions.loading",
        "description": "src.functions.loading",
        "peekOfCode": "class LOAD:\n    def __init__(self, \n                moduleLoadNames : list, \n                funcName        : str\n                ):\n        self.moduleLoadNames        = moduleLoadNames \n        self.funcName               = funcName\n    def LOAD(self):\n        self.key        = False \n        self.id1        = 0",
        "detail": "src.functions.loading",
        "documentation": {}
    },
    {
        "label": "SET_OPEN_FILE",
        "kind": 6,
        "importPath": "src.functions.set_openfile",
        "description": "src.functions.set_openfile",
        "peekOfCode": "class SET_OPEN_FILE:\n    def __init__(self,\n                master      : dict, \n                DataBase    : dict, \n                line        : int\n                ):\n        self.DataBase       = DataBase \n        self.master         = master \n        self.line           = line \n    def SET_OPEN(self):",
        "detail": "src.functions.set_openfile",
        "documentation": {}
    },
    {
        "label": "CHECK_TYPE_OF_DATA",
        "kind": 6,
        "importPath": "src.functions.type_of_data",
        "description": "src.functions.type_of_data",
        "peekOfCode": "class CHECK_TYPE_OF_DATA:\n    def __init__(self, value : any ):\n        self.value          = value\n    def DATA(self):\n        self._return_                           = ''\n        self.type                               = type( self.value )\n        if  self.type  == type( int() )         :       self._return_ = 'int'\n        elif self.type == type( float() )       :       self._return_ = 'float'\n        elif self.type == type( bool() )        :       self._return_ = 'bool'\n        elif self.type == type( complex() )     :       self._return_ = 'cplx'",
        "detail": "src.functions.type_of_data",
        "documentation": {}
    },
    {
        "label": "UPDATE_DATA_BASE",
        "kind": 6,
        "importPath": "src.functions.updating_data",
        "description": "src.functions.updating_data",
        "peekOfCode": "class UPDATE_DATA_BASE:\n    def __init__(self, \n                values      : any, \n                variables   : any, \n                global_vars : dict\n                ):\n        self.values             = values\n        self.variables          = variables\n        self.global_vars        = global_vars\n    def UPDATE(self, data_base:dict):",
        "detail": "src.functions.updating_data",
        "documentation": {}
    },
    {
        "label": "Lib_Path",
        "kind": 6,
        "importPath": "src.modulesLoading.build_abs_Lib_path",
        "description": "src.modulesLoading.build_abs_Lib_path",
        "peekOfCode": "class Lib_Path:\n    def __init__(self,\n            root : str,\n            sys: str = 'windows'\n            ) -> None:\n        # root path\n        self.root       = root\n        # system name\n        self.sys        = sys\n    def getPath(self):",
        "detail": "src.modulesLoading.build_abs_Lib_path",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "src.modulesLoading.error",
        "description": "src.modulesLoading.error",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "src.modulesLoading.error",
        "documentation": {}
    },
    {
        "label": "TREATMENT",
        "kind": 6,
        "importPath": "src.modulesLoading.moduleMain",
        "description": "src.modulesLoading.moduleMain",
        "peekOfCode": "class TREATMENT:\n    def __init__(self, \n            master      : dict, \n            data_base   : dict, \n            line        : int,\n            system      : str = 'windows'\n            ) -> None:\n        # current line in the main IDE\n        self.line               = line\n        # global module",
        "detail": "src.modulesLoading.moduleMain",
        "documentation": {}
    },
    {
        "label": "MODULES",
        "kind": 6,
        "importPath": "src.modulesLoading.modules",
        "description": "src.modulesLoading.modules",
        "peekOfCode": "class MODULES:\n    def __init__(self,\n            DataBase    : dict,\n            line        : int,\n            values      : dict,\n            modulesLoad : dict\n            ) -> None:\n        # main data base\n        self.DataBase           = DataBase\n        # dictionary from moduleMain",
        "detail": "src.modulesLoading.modules",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 6,
        "importPath": "src.transform.datatype",
        "description": "src.transform.datatype",
        "peekOfCode": "class data:\n    def __init__(self, master: str ):\n        self.master = master \n    def type(self):\n        List = ['16', '32', '64', '128', '256', '512']\n        int_ = [\"int\"+x for x in List]\n        float_ = ['float'+x for x in List]\n        cplx = ['complex'+x for x in List]\n        key = False \n        string = \"\"",
        "detail": "src.transform.datatype",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "src.transform.error",
        "description": "src.transform.error",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "src.transform.error",
        "documentation": {}
    },
    {
        "label": "MATRIX",
        "kind": 6,
        "importPath": "src.transform.matrix_modules",
        "description": "src.transform.matrix_modules",
        "peekOfCode": "class MATRIX:\n    def __init__(self, master : list, nrow : int , ncol : int, reverse: bool, line: int):\n        self.master     = master\n        self.nrow       = nrow\n        self.ncol       = ncol\n        self.reverse    = reverse\n        self.line       = line\n    def MATRIX(self, axis: any, ctype: str='sum'):\n        self.step       = 0\n        self.newList    = []",
        "detail": "src.transform.matrix_modules",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 6,
        "importPath": "src.transform.matrix_statistics",
        "description": "src.transform.matrix_statistics",
        "peekOfCode": "class R:\n    def __init__(self, master : list, _value_ : list, line : int):\n        self.master     = master\n        self.line       = line\n        self._value_    = _value_\n    def R(self):\n        self.error      = None\n        self.type       = [type(list()), type(tuple()), type(range(1))]\n        self.func       = bm.fg.rbg(0, 255, 0) + ' in {}( ).'.format(self._value_[4]) + bm.init.reset\n        self.master_inv = None",
        "detail": "src.transform.matrix_statistics",
        "documentation": {}
    },
    {
        "label": "OPEN_CHECK",
        "kind": 6,
        "importPath": "src.transform.open_check",
        "description": "src.transform.open_check",
        "peekOfCode": "class OPEN_CHECK:\n    def __init__(self, master: list, DataBase: dict, line: int) :\n        self.master         = master \n        self.DataBase       = DataBase\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE( self.DataBase, self.line )\n    def CHECK( self ):\n        self.error          = None \n        self.name           = self.master[ 0 ]\n        self.file           = self.master[ 1 ]",
        "detail": "src.transform.open_check",
        "documentation": {}
    },
    {
        "label": "STAT",
        "kind": 6,
        "importPath": "src.transform.statistics",
        "description": "src.transform.statistics",
        "peekOfCode": "class STAT:\n    def __init__(self, _value_ : any, value: any, line : int):\n        self._value_    = _value_ \n        self.value      = value\n        self.line       = line\n    def COV_CORR_LINEAR( self ):\n        self.error          = None\n        self.final_value    = None\n        self._              = None \n        self.type_accepted  = [type(list()), type(tuple()), type(range(1))]",
        "detail": "src.transform.statistics",
        "documentation": {}
    },
    {
        "label": "EXTERNAL",
        "kind": 6,
        "importPath": "statement.comment.externalBlocks",
        "description": "statement.comment.externalBlocks",
        "peekOfCode": "class EXTERNAL:\n    def __init__(self, data_base : dict, line : int):\n        self.data_base          = data_base\n        self.line               = line\n        self.control            = control_string.STRING_ANALYSE(self.data_base, self.line)\n    def EXTERNAL(self, \n                num            : int, \n                normal_string  : str,\n                tabulation     : int  = 1,\n                split          : bool = True",
        "detail": "statement.comment.externalBlocks",
        "documentation": {}
    },
    {
        "label": "SAVE_COMMENT",
        "kind": 6,
        "importPath": "statement.comment.externalBlocks",
        "description": "statement.comment.externalBlocks",
        "peekOfCode": "class SAVE_COMMENT:\n    def __init__(self, \n                master      : str, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line           = line\n        self.master         = master[: -1]\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "statement.comment.externalBlocks",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "statement.comment.externalCmt",
        "description": "statement.comment.externalCmt",
        "peekOfCode": "class EXTERNAL_BLOCKS:\n    def __init__(self, \n                normal_string   : str , \n                data_base       : dict, \n                line            : int\n                ):\n        self.line           = line\n        self.normal_string  = normal_string\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "statement.comment.externalCmt",
        "documentation": {}
    },
    {
        "label": "INTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "statement.comment.internalCmt",
        "description": "statement.comment.internalCmt",
        "peekOfCode": "class INTERNAL_BLOCKS:\n    def __init__(self, \n                normal_string   : str, \n                data_base       : dict, \n                line            : int\n                ):\n        self.line           = line\n        self.normal_string  = normal_string\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "statement.comment.internalCmt",
        "documentation": {}
    },
    {
        "label": "STRUCT",
        "kind": 6,
        "importPath": "statement.comment.structure",
        "description": "statement.comment.structure",
        "peekOfCode": "class STRUCT:\n    def __init__(self, data_base: dict, line : int):\n        self.data_base      = data_base\n        self.line           = line\n        self.control        = control_string.STRING_ANALYSE(self.data_base, self.line)\n        self.selection      = particular_str_selection\n    def STRUCT(self,\n               num          : int = 3,\n               normal_string: str = '',\n               tabulation   : int = 1,",
        "detail": "statement.comment.structure",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "statement.error.error",
        "description": "statement.error.error",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "statement.error.error",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "statement.error.switchError",
        "description": "statement.error.switchError",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "statement.error.switchError",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "statement.error.tryError",
        "description": "statement.error.tryError",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "statement.error.tryError",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "statement.loop.error",
        "description": "statement.loop.error",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "statement.loop.error",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_IF_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "statement.loop.loop_if_statement",
        "description": "statement.loop.loop_if_statement",
        "peekOfCode": "class EXTERNAL_IF_LOOP_STATEMENT:\n    def __init__(self, \n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "statement.loop.loop_if_statement",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IF_LOOP_STATEMENT",
        "kind": 6,
        "importPath": "statement.loop.loop_if_statement",
        "description": "statement.loop.loop_if_statement",
        "peekOfCode": "class INTERNAL_IF_LOOP_STATEMENT:\n    def __init__(self,\n                master      : any, \n                data_base   : dict, \n                line        : int\n                ):\n        self.line                   = line\n        self.master                 = master\n        self.data_base              = data_base\n        self.analyze                = control_string",
        "detail": "statement.loop.loop_if_statement",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "statement.loop.loop_if_statement",
        "description": "statement.loop.loop_if_statement",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "statement.loop.loop_if_statement",
        "documentation": {}
    },
    {
        "label": "MAIN_FOR",
        "kind": 6,
        "importPath": "statement.loop.mainFor",
        "description": "statement.loop.mainFor",
        "peekOfCode": "class MAIN_FOR:\n    def __init__(self,\n                 master         : dict,             #\n                 data_base      : dict,             #\n                 line           : int               #\n                 ):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.num_lex        = numeric_lexer",
        "detail": "statement.loop.mainFor",
        "documentation": {}
    },
    {
        "label": "VARIABLE_CHECKING",
        "kind": 6,
        "importPath": "statement.loop.mainFor",
        "description": "statement.loop.mainFor",
        "peekOfCode": "class VARIABLE_CHECKING:\n    def __init__(self,\n                 master         : any,              #\n                 data_base      : dict,             #\n                 line           : int               #\n                 ):\n        self.master             = master\n        self.line               = line\n        self.data_base          = data_base\n        self.control            = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "statement.loop.mainFor",
        "documentation": {}
    },
    {
        "label": "FOR_BLOCK",
        "kind": 6,
        "importPath": "statement.loop.mainFor",
        "description": "statement.loop.mainFor",
        "peekOfCode": "class FOR_BLOCK:\n    def __init__(self,\n                 data_base      : dict,             #\n                 line           : int ,             #\n                 normal_string  : str               #\n                 ):\n        self.data_base          = data_base\n        self.line               = line\n        self.normal_string      = normal_string\n        self.control            = control_string.STRING_ANALYSE(self.data_base, self.line)",
        "detail": "statement.loop.mainFor",
        "documentation": {}
    },
    {
        "label": "INTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "statement.InternalStatement",
        "description": "statement.InternalStatement",
        "peekOfCode": "class INTERNAL_BLOCKS:\n    def __init__(self, \n                string          : str,          # concatenated string\n                normal_string   : str,          # normal string\n                data_base       : dict,         # data base\n                line            : int           # current line\n                ):\n        self.line               = line\n        self.string             = string\n        self.normal_string      = normal_string",
        "detail": "statement.InternalStatement",
        "documentation": {}
    },
    {
        "label": "ERRORS",
        "kind": 6,
        "importPath": "statement.error",
        "description": "statement.error",
        "peekOfCode": "class ERRORS:\n    def __init__(self, line: int):\n        self.line       = line\n        self.cyan       = bm.fg.cyan_L\n        self.red        = bm.fg.red_L\n        self.green      = bm.fg.green_L\n        self.yellow     = bm.fg.yellow_L\n        self.magenta    = bm.fg.magenta_M\n        self.white      = bm.fg.white_L\n        self.blue       = bm.fg.blue_L",
        "detail": "statement.error",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "statement.externalIF",
        "description": "statement.externalIF",
        "peekOfCode": "class EXTERNAL_BLOCKS:\n    def __init__(self,\n                 string         : str,          # concatenated string\n                 normal_string  : str,          # normal string\n                 data_base      : dict,         # data base\n                 line           : int           # current line\n                 ):\n        self.line           = line\n        self.string         = string\n        self.normal_string  = normal_string",
        "detail": "statement.externalIF",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "statement.externalRest",
        "description": "statement.externalRest",
        "peekOfCode": "class EXTERNAL_BLOCKS:\n    def __init__(self,\n                 normal_string          : str,\n                 data_base              : dict,\n                 line                   : int\n                 ):\n        self.line           = line\n        self.normal_string  = normal_string\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "statement.externalRest",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "statement.externalSwitch",
        "description": "statement.externalSwitch",
        "peekOfCode": "class EXTERNAL_BLOCKS:\n    def __init__(self,\n                 string         : str,  # concatenated string\n                 normal_string  : str,  # normal string\n                 data_base      : dict, # data base\n                 line           : int   # current line\n                 ):\n        self.line           = line\n        self.string         = string\n        self.normal_string  = normal_string",
        "detail": "statement.externalSwitch",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "statement.externalTry",
        "description": "statement.externalTry",
        "peekOfCode": "class EXTERNAL_BLOCKS:\n    def __init__(self,\n            string         : str,\n            normal_string  : str,\n            data_base      : dict,\n            line           : int\n            ):\n        self.line               = line\n        self.string             = string\n        self.normal_string      = normal_string",
        "detail": "statement.externalTry",
        "documentation": {}
    },
    {
        "label": "EXTERNAL_BLOCKS",
        "kind": 6,
        "importPath": "statement.externalUnless",
        "description": "statement.externalUnless",
        "peekOfCode": "class EXTERNAL_BLOCKS:\n    def __init__(self,\n                 string         : str,  # concatenated string\n                 normal_string  : str,  # normal string\n                 data_base      : dict, # data base\n                 line           : int   # current line\n                 ):\n        self.line           = line\n        self.string         = string\n        self.normal_string  = normal_string",
        "detail": "statement.externalUnless",
        "documentation": {}
    },
    {
        "label": "MAIN",
        "kind": 6,
        "importPath": "statement.mainStatement",
        "description": "statement.mainStatement",
        "peekOfCode": "class MAIN:\n    def __init__(self,\n         master         : str,              # it's a main string\n         data_base      : dict,             # DataBase\n         line           : int               # current line\n         ):\n        self.line           = line\n        self.master         = master\n        self.data_base      = data_base\n        self.control        = control_string.STRING_ANALYSE( self.data_base, self.line )",
        "detail": "statement.mainStatement",
        "documentation": {}
    },
    {
        "label": "UPDATE",
        "kind": 6,
        "importPath": "updatingDataBase.updating",
        "description": "updatingDataBase.updating",
        "peekOfCode": "class UPDATE:\n    def __init__(self, data_base : dict):\n        self.data_base       = data_base\n    def UPDATE(self,\n                before   : dict, # DataBase before any computing\n                after    : dict, # DataBase updated after computing\n                error    : any   # error got after computing\n               ):\n        self.error = error # init error\n        if self.error is not None:",
        "detail": "updatingDataBase.updating",
        "documentation": {}
    },
    {
        "label": "mamba_interpretor",
        "kind": 2,
        "importPath": "BlackMamba",
        "description": "BlackMamba",
        "peekOfCode": "def mamba_interpretor( string ):\n    ke = bm.fg.rbg(255,255, 0)\n    we = bm.fg.white_L\n    be = bm.fg.blue_L\n    data_from_file  = []\n    currunt_file    = os.path.basename(__file__) \n    control         = control_string.STRING_ANALYSE( {}, 1 )\n    path_library    = f\"{os.path.abspath(os.curdir)}/{string}\"\n    with open(file=path_library, mode='r') as file:\n        for line in file.readlines():  ",
        "detail": "BlackMamba",
        "documentation": {}
    },
    {
        "label": "linux",
        "kind": 6,
        "importPath": "LinuxMain_in_testing",
        "description": "LinuxMain_in_testing",
        "peekOfCode": "class linux:\n    def __init__(self, data_base: dict):\n        # main data base\n        self.data_base  = data_base\n        # contriling string\n        self.analyse    = control_string.STRING_ANALYSE(self.data_base, 1)\n    def terminal(self, c: str = '', terminal_name : str = 'pegasus'):\n        # set color on yellow\n        self.bold           = bm.init.bold\n        self.c              = bm.fg.rbg(255, 255, 0)",
        "detail": "LinuxMain_in_testing",
        "documentation": {}
    },
    {
        "label": "path_ico",
        "kind": 2,
        "importPath": "PyIns",
        "description": "PyIns",
        "peekOfCode": "def path_ico():\n    # get ico image \n    error  = None \n    system  = os.uname()[0]\n    if system == \"Linux\":\n        return os.path.abspath(os.curdir)+\"/images/logo.ico\"\n    else: error =  errors.mamba_error().ERROR1(system)\npath = path_ico()\nif path is None: print(path)\nelse:",
        "detail": "PyIns",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "PyIns",
        "description": "PyIns",
        "peekOfCode": "path = path_ico()\nif path is None: print(path)\nelse:\n    PyInstaller.__main__.run([\n        \"black-mamba-1.01.01-linux.py\",\n        '--onefile',\n        '--console',\n        '-c',\n        '--clean',\n        '--nowindowed',",
        "detail": "PyIns",
        "documentation": {}
    },
    {
        "label": "ico_path",
        "kind": 2,
        "importPath": "black-mamba-1.01.01-linux",
        "description": "black-mamba-1.01.01-linux",
        "peekOfCode": "def ico_path():\n    system  = os.uname()[0]\n    if system == 'Linux':\n        return \"@\"+os.path.abspath(os.curdir)+'/images/logo.xbm'\n    else:  return None \ndef png_path(str_ : str = 'logo.png'):\n    system  = \"Linux\"\n    if system == 'Linux':\n        return os.path.abspath(os.curdir)+f'/images/{str_}'\n    else:  return None ",
        "detail": "black-mamba-1.01.01-linux",
        "documentation": {}
    },
    {
        "label": "png_path",
        "kind": 2,
        "importPath": "black-mamba-1.01.01-linux",
        "description": "black-mamba-1.01.01-linux",
        "peekOfCode": "def png_path(str_ : str = 'logo.png'):\n    system  = \"Linux\"\n    if system == 'Linux':\n        return os.path.abspath(os.curdir)+f'/images/{str_}'\n    else:  return None \ndef read_license():\n    path = os.path.abspath(os.curdir)+\"/BM_TAR/LICENSE\"\n    with open(path, 'r') as f:\n        lines = f.readlines()\n    f.close()",
        "detail": "black-mamba-1.01.01-linux",
        "documentation": {}
    },
    {
        "label": "read_license",
        "kind": 2,
        "importPath": "black-mamba-1.01.01-linux",
        "description": "black-mamba-1.01.01-linux",
        "peekOfCode": "def read_license():\n    path = os.path.abspath(os.curdir)+\"/BM_TAR/LICENSE\"\n    with open(path, 'r') as f:\n        lines = f.readlines()\n    f.close()\n    return lines\ndef extraction_tar_gz():\n    ico_path_ = \"@\"+ico_path()\n    a, b, c = 600, 400, 200\n    root = Tk()",
        "detail": "black-mamba-1.01.01-linux",
        "documentation": {}
    },
    {
        "label": "extraction_tar_gz",
        "kind": 2,
        "importPath": "black-mamba-1.01.01-linux",
        "description": "black-mamba-1.01.01-linux",
        "peekOfCode": "def extraction_tar_gz():\n    ico_path_ = \"@\"+ico_path()\n    a, b, c = 600, 400, 200\n    root = Tk()\n    root.title(\"Black Mamba 1.01.01 64-bit\")\n    root.geometry(f\"{a}x{b}\")\n    root.minsize(a, b)\n    root.maxsize(a, b)\n    root.config(bg='white')\n    root_menu = Menu(root)",
        "detail": "black-mamba-1.01.01-linux",
        "documentation": {}
    },
    {
        "label": "black_mamba",
        "kind": 6,
        "importPath": "black_mamba_editor",
        "description": "black_mamba_editor",
        "peekOfCode": "class black_mamba:\n    def __init__(self, data_base: dict, line: int):\n        # main data base\n        self.data_base  = data_base\n        #current line\n        self.line = line\n        # contriling string\n        self.analyse    = control_string.STRING_ANALYSE(self.data_base, 1)\n    def editor(self, c: str = '', terminal_name : str = 'pegasus', blink: bool = False, hide:bool=False):\n        # set color on yellow",
        "detail": "black_mamba_editor",
        "documentation": {}
    },
    {
        "label": "run_mamba",
        "kind": 2,
        "importPath": "mamba",
        "description": "mamba",
        "peekOfCode": "def run_mamba():\n    # get root path \n    root    = os.path.abspath(os.curdir)\n    s = Path(__file__).resolve().parents[1]\n    # get system name\n    system  = os.uname()[0]\n    # get arguments \n    arg     = sys.argv\n    # running code if system is Linux or macOs\n    if system in ['Linux']:",
        "detail": "mamba",
        "documentation": {}
    },
    {
        "label": "path_ico",
        "kind": 2,
        "importPath": "pyinstaller",
        "description": "pyinstaller",
        "peekOfCode": "def path_ico():\n    # get ico image \n    error  = None \n    system  = os.uname()[0]\n    if system == \"Linux\":\n        return os.path.abspath(os.curdir)+\"/images/logo.ico\"\n    else: error =  errors.mamba_error().ERROR1(system)\npath = path_ico()\nif path is None: print(path)\nelse:",
        "detail": "pyinstaller",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "pyinstaller",
        "description": "pyinstaller",
        "peekOfCode": "path = path_ico()\nif path is None: print(path)\nelse:\n    data = os.path.abspath(os.curdir)+'/Library/*;.'\n    data_info = os.path.abspath(os.curdir)+'/README.md;CONTRIBUTING.md;Tools.md;CODE.md'\n    PyInstaller.__main__.run([\n        \"mamba.py\",\n        '--onefile',\n        '--console',\n        '-c',",
        "detail": "pyinstaller",
        "documentation": {}
    },
    {
        "label": "build_exe_options",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "build_exe_options = {\"packages\": [\"os\"], \"excludes\": [\"tkinter\"]}\n# base=\"Win32GUI\" should be used only for Windows GUI app\nbase = None\npackages = ['os']#['idna']\noptions = {\n    'build_exe': {\n        'packages' : packages,\n    }\n}\nif sys.platform == \"win32\"  : base = \"Win32GUI\"",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "base = None\npackages = ['os']#['idna']\noptions = {\n    'build_exe': {\n        'packages' : packages,\n    }\n}\nif sys.platform == \"win32\"  : base = \"Win32GUI\"\nelif sys.platform == 'Linux': base = 'Linux'\nelse: pass ",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "packages",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "packages = ['os']#['idna']\noptions = {\n    'build_exe': {\n        'packages' : packages,\n    }\n}\nif sys.platform == \"win32\"  : base = \"Win32GUI\"\nelif sys.platform == 'Linux': base = 'Linux'\nelse: pass \nexecutables = [Executable(\"mamba.py\", base = base)]",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "options = {\n    'build_exe': {\n        'packages' : packages,\n    }\n}\nif sys.platform == \"win32\"  : base = \"Win32GUI\"\nelif sys.platform == 'Linux': base = 'Linux'\nelse: pass \nexecutables = [Executable(\"mamba.py\", base = base)]\nsetup(",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "executables",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "executables = [Executable(\"mamba.py\", base = base)]\nsetup(\n    name=\"mamba\",\n    version=\"1.0.0\",\n    description=\"Black Mamba programming language\",\n    options=options,#{\"build_exe\": build_exe_options},\n    executables=executables,# [Executable(\"guifoo.py\", base=base)],\n)",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "transpiler_loop",
        "kind": 2,
        "importPath": "trans",
        "description": "trans",
        "peekOfCode": "def transpiler_loop(data_base: dict ):\n\ti = 1\n\tn = 6\n\tfor i in range(2, 5000):\n\t\tn=n+1\n\treturn [n,i]",
        "detail": "trans",
        "documentation": {}
    },
    {
        "label": "\ti",
        "kind": 5,
        "importPath": "trans",
        "description": "trans",
        "peekOfCode": "\ti = 1\n\tn = 6\n\tfor i in range(2, 5000):\n\t\tn=n+1\n\treturn [n,i]",
        "detail": "trans",
        "documentation": {}
    },
    {
        "label": "\tn",
        "kind": 5,
        "importPath": "trans",
        "description": "trans",
        "peekOfCode": "\tn = 6\n\tfor i in range(2, 5000):\n\t\tn=n+1\n\treturn [n,i]",
        "detail": "trans",
        "documentation": {}
    }
]