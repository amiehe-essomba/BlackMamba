from module configure load config 
from module encoding load fg 

y = config.bold()+fg(255, 255, 0)
w = config.bold()+fg(255,255,255)
g = config.bold()+fg(0,255,0)
r = config.bold()+fg(255,0,0)
re = config.reset()
line = GetLine()
b = config.bold()+fg(0,0,255)

global y, w, g, r, re, line, b

def ones(nrow : int, ncol : int ):
	if (nrow > 0) && (ncol > 0):
		_std_ * [nrow, ncol, "ones", "matrix"]
	else:
		__show__ * "{g}ValueError : {y}nrow && ncol {w}should be {g}> {r}0 . {w}line : {y}{line} {w}in {g}ones( ){w} / {r}module {b}matrix( ) {re}"
	end:
end:

def null( nrow : int, ncol : int ):
	if (nrow > 0 ) and (ncol > 0 ):
		_std_ * [nrow, ncol, "null", "matrix"]
	else:
		__show__ * "{g}ValueError : {y}nrow && ncol {w}should be {g}> {r}0 . {w}line : {y}{line} {w}in {g}null( ){w} / {r}module {b}matrix( ) {re}"
	end:
end:

def conv( master : list tuple range ):
	if length( master ) >= 1:
		_std_ * [master, None, "array", "matrix"]
	else:
		__show__ * "{g}ValueError : {y}master {w}cannot be {g}EMPTY . {w}line : {y}{line} {w}in {g}convertion( ){w} / {r}module {b}matrix( ) {re}"
	end:
end:

class ndarray:
	def initialize(master : list tuple range, nrow : int, ncol : int):
		self.master	= master
		self.nrow	= nrow
		self.ncol	= ncol
		self.dim	= [nrow, ncol]
	end:
	
	def array( reverse: bool = False, axis : none int=None):
		_std_ * [master, nrow, ncol, reverse, None, axis, 'matrix']
	end:
	
	def dtype(reverse: bool = False, axis : none int=None):
		_std_ * [master, nrow, ncol, reverse, 'dtype', axis, 'matrix']
	end:
	
	def summ( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'sum', axis, 'matrix'] 
	end:
	
	def sum( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'sum', axis, 'matrix'] 
	end:
	
	def mean( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'mean', axis, 'matrix']
	end:
	
	def std( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'std', axis, 'matrix']
	end:
	
	def pstd( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'pstd', axis, 'matrix']
	end:
	
	def var( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'var', axis, 'matrix']
	end:
	
	def pvar( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'pvar', axis, 'matrix']
	end:
	
	def sqrt( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'sqrt', axis, 'matrix']
	end:
	
	def square( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'square', axis, 'matrix']
	end:
		
	def sorted( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'sorted', axis, 'matrix']
	end:
	
	def cov( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'cov', axis, 'matrix']
	end:
	
	def cor( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'cor', axis, 'matrix']
	end:
	
	def linearR( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'linearR', axis, 'matrix']
	end:
	
	def min( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'min', axis, 'matrix']
	end:
	
	def max( reverse : bool = False,  axis : none int=None ):
		_std_ * [master, nrow, ncol, reverse, 'max', axis, 'matrix']
	end:
	
	def ndim( reverse : bool = False, axis : none int=None):
		_std_ * [master, nrow, ncol, reverse, 'ndim', axis, 'matrix']
	end:
	
	def quantile( numeric : float, reverse : bool = False, axis : none int=None):
		_std_ * [master, nrow, ncol, reverse, 'quantile', axis, numeric, 'matrix']
	end:
	
	def median( reverse : bool = False, axis : none int=None):
		_std_ * [master, nrow, ncol, reverse, 'median', axis, 'matrix']
	end:
	
	def sum_square( reverse : bool = False, axis : none int=None):
		_std_ * [master, nrow, ncol, reverse, 'sum_square', axis,'matrix']
	end:
	
	def grouped( reverse : bool = False, axis : none int=None):
		_std_ * [master, nrow, ncol, reverse, 'grouped', axis, 'matrix']
	end:
	
	def cms( reverse : bool = False, axis : none int=None):
		# coefficient of momental skewness
		_std_ * [master, nrow, ncol, reverse, 'cms', axis, 'matrix']
	end:
	
	def round( max_float:int bool, reverse : bool = False, axis : none int=None):
		_std_ * [master, nrow, ncol, reverse, 'round', axis, max_float, 'matrix']
	end:
	
	def kurtosis( reverse : bool = False, axis : none int=None):
		_std_ * [master, nrow, ncol, reverse, 'kurtosis', axis, 'matrix']
	end:
	
	def iquantile( reverse : bool = False, axis : none int=None):
		_std_ * [master, nrow, ncol, reverse, 'iquantile', axis, 'matrix']
	end:
	
	def Q1( reverse : bool = False, axis : none int=None):
		_std_ * [master, nrow, ncol, reverse, 'Q1', axis, 'matrix']
	end:
	
	def Q3( reverse : bool = False, axis : none int=None):
		_std_ * [master, nrow, ncol, reverse, 'Q3', axis, 'matrix']
	end:
end:			
