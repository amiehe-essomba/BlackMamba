from module configure load config 
from module encoding load fg 

y = config.bold()+fg(255, 255, 0)
w = config.bold()+fg(255,255,255)
g = config.bold()+fg(0,255,0)
r = config.bold()+fg(255,0,0)
re = config.reset()
line = GetLine()
b = config.bold()+fg(0,0,255)
t=0

global y, w, g, r, re, line, b, t

def plot( 
	X 	: list tuple range ndarray=[1:10],
	Y 	: list tuple range ndarray=[1:10], 
	color 	: string = "red", 
	ls  	: string = "--" , 
	lw 	: int    = 1, 
	title 	: string = "", 
	ps 	: string = "ggplot", 
	xlab 	: string = "X", 
	ylab 	: string = "Y",
	figsize : tuple  = (6,6),  
	legend 	: bool   = True,
	xmin 	: list   = [],
	xmax 	: list   = []
	):
	
	# checking figsize dimension
	if length( figsize ) == 2:
		if ? figsize[0] == ? 1:
			if ? figsize[1] == ? 1:
				__scan__ * X, Y, color, ls, lw, title, ps, xlab, ylab, figsize, legend, "plot"
			else:
				__show__ * "{g}ValueError : {w}in {figsize} {y}{figsize[1]} {w}is not an {r}integer() {y}type. {w}line : {y}{line} {w}in {g}plot( ){w} / {r}module {b}ggplot( ) {re}"
			end:
		else:
			__show__ * "{g}ValueError : {w}in {figsize} {y}{figsize[0]} {w}is not an {r}integer() {y}type. {w}line : {y}{line} {w}in {g}plot( ){w} / {r}module {b}ggplot( ) {re}"
		end:
	else: 
		__show__ * "{g}ValueError : {r}figsize {w}should be 1D array. {w}line : {y}{line} {w}in {g}plot( ){w} / {r}module {b}ggplot( ) {re}"
	end:
end:

def scatter(
	X 	: list tuple range ndarray=[1:10],
	Y 	: list tuple range ndarray=[1:10],
	color 	: string list = "blue",
	s 	: int    = 10,
	title 	: string = "",
	ps 	: string = "ggplot",
	xlab 	: string = "X",
	ylab 	: string = "Y",
	figsize : tuple  = (6,6),
	legend 	: bool   = True,
	marker 	: int    = 0,
	cmap	: string = "plt",
	xmin	: list   = [],
	xmax	: list   = [],
	edgecolor : list string = "red",
	location : string tuple = "upper left",
	label 	: list string = "dataset"
	):
	
		
	# checking figsize dimension
	if length( figsize ) == 2:
		if ? figsize[0] == ? 1:
			if ? figsize[1] == ? 1:
				if marker >= 0:
					if marker < 18 :
						new_marker = ["o", "^", "+", "*"]#, ".", "v", "<", ">", "1", "2", "3", "4", "s", "p", "h", "H", "x", "D"]
						if ? color == ? list():
							if type(label) in [ type(string()), type(list())]:
								if type(label) == type( list() ):
									if label.size() == color.size():
										__scan__ * X, Y, color, s, title, ps, xlab, ylab, figsize, legend, label, new_marker[marker], "scatter"
									else:
										__show__ * "{g}ValueError : {w}size error between {b}color and {r}label. {w}line : {y}{line} {w}in {g}scatter( ){w} / {r}module {b}ggplot( ) {re}"		
									end:
								else:
									__scan__ * X, Y, color, s, title, ps, xlab, ylab, figsize, legend, label, new_marker[marker], "scatter"
								end:
							else:
								__show__ * "{b}TypeError : {y}label {w}should be a {y}list() or {r}string() {y}type. {w}line : {y}{line} {w}in {g}scatter( ){w} / {r}module {b}ggplot( ) {re}"		
							end:
						else:
							if type( label ) in [ type(None), type( string() )]:
								__scan__ * X, Y, color, s, title, ps, xlab, ylab, figsize, legend, label, new_marker[marker], "scatter" 
							else:
								__show__ * "{b}TypeError : {y}label {w}should be a {b}string() or {r}none() {y}type. {w}line : {y}{line} {w}in {g}scatter( ){w} / {r}module {b}ggplot( ) {re}"		
							end:
						end:
					else:
						__show__ * "{g}ValueError : {y}marker {w}index out of range {r}maker {w}> {g}5. {w}line : {y}{line} {w}in {g}scatter( ){w} / {r}module {b}ggplot( ) {re}"		
					end:
				else:
					__show__ * "{g}ValueError : {y}marker {w}cannot be {r}negative. {w}line : {y}{line} {w}in {g}scatter( ){w} / {r}module {b}ggplot( ) {re}"		
				end:
			else:
				__show__ * "{g}ValueError : {w}in {figsize} {y}{figsize[1]} {w}is not an {r}integer() {y}type. {w}line : {y}{line} {w}in {g}scatter( ){w} / {r}module {b}ggplot( ) {re}"
			end:
		else:
			__show__ * "{g}ValueError : {w}in {figsize} {y}{figsize[0]} {w}is not an {r}integer() {y}type. {w}line : {y}{line} {w}in {g}scatter( ){w} / {r}module {b}ggplot( ) {re}"
		end:
	else:
		__show__ * "{g}ValueError : {r}figsize {w}should be 1D array. {w}line : {y}{line} {w}in {g}scatter( ){w} / {r}module {b}ggplot( ) {re}"
	end:
end:

def save( name : string ):
	__scan__ * name, "save_figure"
end:
